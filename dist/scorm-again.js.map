{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/exports.js","src/utilities.js"],"names":["_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","_scorm12_cmi","AICC","settings","_this","_classCallCheck","this","finalSettings","_objectSpread","mastery_override","_possibleConstructorReturn","_getPrototypeOf","call","cmi","CMI","nav","NAV","CMIElement","value","foundFirstIndex","newChild","_get","prototype","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","_utilities","global_constants","APIConstants","global","scorm12_error_codes","ErrorCodes","scorm12","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","LOG_LEVEL_ERROR","_defineProperty","constructor","TypeError","currentState","STATE_NOT_INITIALIZED","lastErrorCode","listenerArray","_classPrivateFieldSet","apiLogLevel","callbackName","initializeMessage","terminationMessage","returnValue","SCORM_FALSE","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","STATE_INITIALIZED","SCORM_TRUE","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","result","storeData","errorCode","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","undefined","String","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","e","ValidationError","message","console","error","GENERAL","scheduleCommit","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","LOG_LEVEL_DEBUG","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","LOG_LEVEL_WARNING","warn","info","debug","log","messageString","fillChars","length","i","j","str","tester","match","refObject","attribute","Object","hasOwnProperty","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","parseInt","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","replace","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","errorNumber","success","_calculateTotalTime","json","loadFromJSON","unflatten","startingData","key","currentCMIElement","JSON","stringify","parse","renderCMIToJSONString","_terminateCommit","url","params","genericError","httpReq","XMLHttpRequest","open","Array","setRequestHeader","send","join","responseText","when","ScheduledCommit","cancel","API","_API","_cancelled","_timeout2","setTimeout","wrapper","bind","clearTimeout","commit","_BaseAPI2","Utilities","_interopRequireWildcard","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","event","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","getCurrentTotalTime","flattened","flatten","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","processHttpRequest","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","scorm2004_error_codes","correct_responses","Responses","correct","scorm2004_regex","Regex","Scorm2004API","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","request","parts","Number","interaction","interactions","type","interaction_type","interaction_count","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","max","checkCorrectResponseValue","DEPENDENCY_NOT_ESTABLISHED","CMICommentsObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","CMILangcr","lang","ValidLanguages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","mode","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","encodeURIComponent","Function","Scorm12CMI","aicc_constants","aicc","aicc_regex","cmi_children","AICCCMIStudentData","evaluation","CMIEvaluation","_this$student_data","_this$evaluation","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","student_preference","_this2","CMIEvaluationComments","_this$comments","BaseCMI","comments_children","INVALID_SET_VALUE","_this3","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","tries_children","_this4","_status","_time","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","status","time","check12ValidFormat","CMIStatus2","CMITime","_this5","_content","_location","_time2","content","location","CMIString256","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","scorm12_regex","_initialized","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","CMIDecimal","min","_children","_ref2","children","_errorCode","_children3","throwWriteOnlyError","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_suspend_data","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIStudentPreference","CMIInteractions","_this$core","_this$objectives","_this$student_prefere","_this$interactions","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","addHHMMSSTimeStrings","CMITimespan","student_id","student_name","lesson_location","entry","exit","session_time","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","student_preference_children","_audio","_language","_speed","_text","audio","language","speed","text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_this6","_id2","_this7","_id3","_this8","_pattern","_this9","_event","NAVEvent","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","Util","learner_responses","learner","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","addTwoDurations","learner_id","learner_name","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_this$score2","_scaled","scaled_range","readOnlyAfterInit","arguments","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","ADLNav","_this$nav","_this10","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_continue","_previous","_temp","_target","_temp2","previous","continue","_","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","other","_Scorm2004API","_Scorm12API","_AICC","window","getSecondsAsHHMMSS","totalSeconds","hours","Math","floor","SECONDS_PER_HOUR","dateObj","Date","minutes","getUTCMinutes","seconds","getSeconds","msStr","countDecimals","toFixed","getSecondsAsISODuration","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","indexOf","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","months","days","now","anchor","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","milliseconds","setMilliseconds","getMilliseconds","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","regex","m","num","toString","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"AAAA;snFCCA,IAAAA,cAAAC,uBAAAC,QAAA,iBACAC,UAAAD,QAAA,kBAKAE,aAAAF,QAAA,qBAKqBG,iBAKnB,QAAAA,GAAYC,GAAc,GAAAC,EAAAC,iBAAAC,KAAAJ,EACxB,IAAMK,GAAaC,kBAEfC,kBAAkB,MACdN,EAJgB,OAOxBC,GAAAM,2BAAAJ,KAAAK,gBAAAT,GAAAU,KAAAN,KAAMC,IAENH,EAAKS,IAAM,GAAIC,WAAAA,IACfV,EAAKW,IAAM,GAAIC,cAAAA,IAVSZ,8EAqBVa,EAAYC,EAAOC,GACjC,GAAIC,GAAQC,KAAAV,gBAAAT,EAAAoB,WAAA,kBAAAhB,MAAAM,KAAAN,KAAyBW,EAAYC,EAAOC,EAUxD,OARKC,KACCd,KAAKiB,cAAcN,EAAY,qCACjCG,EAAW,GAAII,WAAAA,4BACNlB,KAAKiB,cAAcN,EAAY,sCACxCG,EAAW,GAAIK,WAAAA,iBAIZL,qDAQkBM,GAEzBpB,KAAKO,IAAMa,EAAOb,IAClBP,KAAKS,IAAMW,EAAOX,WAhDYY,aAAAA;;srDCXlC,IAAAC,SAAA7B,QAAA,gBACA8B,YAAA9B,QAAA,gBACA+B,cAAAhC,uBAAAC,QAAA,4BACAgC,eAAAjC,uBAAAC,QAAA,8BACAiC,WAAAjC,QAAA,eAEMkC,iBAAmBC,eAAAA,QAAaC,OAChCC,oBAAsBC,cAAAA,QAAWC,QAMlBC,mBAqBnB,QAAAA,GAAYC,EAAarC,GACvB,GADiCE,gBAAAC,KAAAiC,GAAAE,SAAAC,IAAApC,MAAAqC,UAAA,EAAAzB,UAAA,KAAA0B,aAAAF,IAAApC,MAAAqC,UAAA,EAAAzB,UAAA,KAAA2B,UAAAH,IAAApC,MAAAqC,UAAA,EAAAzB,OAjBjC4B,YAAY,EACZC,kBAAmB,GACnBC,cAAc,EACdC,iBAAkB,OAClBC,sBAAuB,iCACvBC,cAAc,EACdC,SAAUnB,iBAAiBoB,mBAWMC,gBAAAhD,KAAA,UAAA,IAAAgD,gBAAAhD,KAAA,mBAAA,KAC7BA,eAAAiC,GAAAjC,KAAAiD,gBAAA,MAAehB,EACjB,KAAM,IAAIiB,WAAU,8CAEtBlD,MAAKmD,aAAexB,iBAAiByB,sBACrCpD,KAAKqD,cAAgB,EACrBrD,KAAKsD,iBAELC,sBAAAvD,KAAAmC,SAAgB,MAChBoB,sBAAAvD,KAAAsC,aAAoBJ,GAEpBlC,KAAKH,SAAWA,EAChBG,KAAKwD,YAAcxD,KAAKH,SAASiD,iEAW/BW,EACAC,EACAC,GACF,GAAIC,GAAcjC,iBAAiBkC,WAiBnC,OAfI7D,MAAK8D,gBACP9D,KAAK+D,gBAAgBC,sBAAAhE,KAAAsC,cAAkB2B,YAAaP,GAC3C1D,KAAKkE,eACdlE,KAAK+D,gBAAgBC,sBAAAhE,KAAAsC,cAAkB6B,WAAYR,IAEnD3D,KAAKmD,aAAexB,iBAAiByC,kBACrCpE,KAAKqD,cAAgB,EACrBO,EAAcjC,iBAAiB0C,WAC/BrE,KAAKsE,iBAAiBb,IAGxBzD,KAAKuE,OAAOd,EAAc,KAAM,aAAeG,EAC3CjC,iBAAiB6C,gBACrBxE,KAAKyE,gBAAgBb,GAEdA,oCA0BLH,EACAiB,GACF,GAAId,GAAcjC,iBAAiBkC,WAEnC,IAAI7D,KAAK2E,WAAWD,EAChBV,sBAAAhE,KAAAsC,cAAkBsC,wBAClBZ,sBAAAhE,KAAAsC,cAAkBuC,sBAAuB,CAC3C7E,KAAKmD,aAAexB,iBAAiBmD,gBAErC,IAAMC,GAAS/E,KAAKgF,WAAU,EAC1BD,GAAOE,WAAaF,EAAOE,UAAY,GACzCjF,KAAK+D,gBAAgBgB,EAAOE,WAE9BrB,EAAcmB,EAAOA,OACjBA,EAAOA,OAASpD,iBAAiBkC,YAEjCa,IAAiB1E,KAAKqD,cAAgB,GAE1CO,EAAcjC,iBAAiB0C,WAC/BrE,KAAKsE,iBAAiBb,GAOxB,MAJAzD,MAAKuE,OAAOd,EAAc,KAAM,aAAeG,EAC3CjC,iBAAiB6C,gBACrBxE,KAAKyE,gBAAgBb,GAEdA,mCAYLH,EACAiB,EACA/D,GACF,GAAIiD,EAcJ,OAZI5D,MAAK2E,WAAWD,EAChBV,sBAAAhE,KAAAsC,cAAkB4C,qBAClBlB,sBAAAhE,KAAAsC,cAAkB6C,uBAChBT,IAAiB1E,KAAKqD,cAAgB,GAC1CO,EAAc5D,KAAKoF,YAAYzE,GAC/BX,KAAKsE,iBAAiBb,EAAc9C,IAGtCX,KAAKuE,OAAOd,EAAc9C,EAAY,eAAiBiD,EACnDjC,iBAAiB6C,gBACrBxE,KAAKyE,gBAAgBb,GAEdA,mCAaLH,EACAiB,EACA/D,EACAC,OACYyE,KAAVzE,IACFA,EAAQ0E,OAAO1E,GAEjB,IAAIgD,GAAcjC,iBAAiBkC,WAEnC,IAAI7D,KAAK2E,WAAWD,EAAiBV,sBAAAhE,KAAAsC,cAAkBiD,kBACnDvB,sBAAAhE,KAAAsC,cAAkBkD,kBAAmB,CACnCd,IAAiB1E,KAAKqD,cAAgB,EAC1C,KACEO,EAAc5D,KAAKyF,YAAY9E,EAAYC,GAC3C,MAAO8E,GACHA,YAAaC,aAAAA,iBACf3F,KAAKqD,cAAgBqC,EAAET,UACvBrB,EAAcjC,iBAAiBkC,cAE3B6B,EAAEE,QACJC,QAAQC,MAAMJ,EAAEE,SAEhBC,QAAQC,MAAMJ,GAEhB1F,KAAK+D,gBAAgBC,sBAAAhE,KAAAsC,cAAkByD,UAG3C/F,KAAKsE,iBAAiBb,EAAc9C,EAAYC,GAoBlD,WAjBoByE,KAAhBzB,IACFA,EAAcjC,iBAAiBkC,aAKE,MAA/ByB,OAAOtF,KAAKqD,gBACVrD,KAAKH,SAAS2C,aAAcwB,sBAAChE,KAADmC,WAC9BnC,KAAKgG,eAAiD,IAAlChG,KAAKH,SAAS4C,mBAItCzC,KAAKuE,OAAOd,EAAc9C,EACtB,KAAOC,EAAQ,aAAegD,EAC9BjC,iBAAiB6C,gBACrBxE,KAAKyE,gBAAgBb,GAEdA,iCAULH,EACAiB,GACF1E,KAAKiG,sBAEL,IAAIrC,GAAcjC,iBAAiBkC,WAEnC,IAAI7D,KAAK2E,WAAWD,EAAiBV,sBAAAhE,KAAAsC,cAAkB4D,mBACnDlC,sBAAAhE,KAAAsC,cAAkB6D,mBAAoB,CACxC,GAAMpB,GAAS/E,KAAKgF,WAAU,EAC1BD,GAAOE,WAAaF,EAAOE,UAAY,GACzCjF,KAAK+D,gBAAgBgB,EAAOE,WAE9BrB,EAAcmB,EAAOA,OACjBA,EAAOA,OAASpD,iBAAiBkC,YAErC7D,KAAKuE,OAAOd,EAAc,cAAe,YAAcG,EACnDjC,iBAAiByE,iBAEjB1B,IAAiB1E,KAAKqD,cAAgB,GAE1CrD,KAAKsE,iBAAiBb,GAOxB,MAJAzD,MAAKuE,OAAOd,EAAc,KAAM,aAAeG,EAC3CjC,iBAAiB6C,gBACrBxE,KAAKyE,gBAAgBb,GAEdA,uCAQIH,GACX,GAAMG,GAAc0B,OAAOtF,KAAKqD,cAOhC,OALArD,MAAKsE,iBAAiBb,GAEtBzD,KAAKuE,OAAOd,EAAc,KAAM,aAAeG,EAC3CjC,iBAAiB6C,gBAEdZ,yCAUMH,EAAsB4C,GACnC,GAAIzC,GAAc,EAUlB,OARqB,QAAjByC,GAA0C,KAAjBA,IAC3BzC,EAAc5D,KAAKsG,0BAA0BD,GAC7CrG,KAAKsE,iBAAiBb,IAGxBzD,KAAKuE,OAAOd,EAAc,KAAM,aAAeG,EAC3CjC,iBAAiB6C,gBAEdZ,wCAUKH,EAAsB4C,GAClC,GAAIzC,GAAc,EAUlB,OARqB,QAAjByC,GAA0C,KAAjBA,IAC3BzC,EAAc5D,KAAKsG,0BAA0BD,GAAc,GAC3DrG,KAAKsE,iBAAiBb,IAGxBzD,KAAKuE,OAAOd,EAAc,KAAM,aAAeG,EAC3CjC,iBAAiB6C,gBAEdZ,qCAYLc,EACA6B,EACAC,GACF,MAAIxG,MAAKyG,oBACPzG,KAAK+D,gBAAgBwC,IACd,IACE7B,IAAmB1E,KAAKkE,iBACjClE,KAAK+D,gBAAgByC,IACd,kCAePE,EACA/F,EACAgG,EACAC,GAGF,GAFAD,EAAa3G,KAAK6G,cAAcH,EAAc/F,EAAYgG,GAEtDC,GAAgB5G,KAAKwD,YACvB,OAAQoD,GACN,IAAKjF,kBAAiBoB,gBACpB8C,QAAQC,MAAMa,EACd,MACF,KAAKhF,kBAAiBmF,kBACpBjB,QAAQkB,KAAKJ,EACb,MACF,KAAKhF,kBAAiB6C,eACpBqB,QAAQmB,KAAKL,EACb,MACF,KAAKhF,kBAAiByE,gBAChBP,QAAQoB,MACVpB,QAAQoB,MAAMN,GAEdd,QAAQqB,IAAIP,0CAeRD,EAAsB/F,EAAoBiF,GACtD,GACIuB,GAAgB,EAEpBA,IAAiBT,CAIjB,KAAK,GAFDU,GALe,GAKUD,EAAcE,OAElCC,EAAI,EAAGA,EAAIF,EAAWE,IAC7BH,GAAiB,GAKnB,IAFAA,GAAiB,KAEbxG,EAAY,CAGdwG,GAAiBxG,EAEjByG,EAJ6B,GAIMD,EAAcE,MAEjD,KAAK,GAAIE,GAAI,EAAGA,EAAIH,EAAWG,IAC7BJ,GAAiB,IAQrB,MAJIvB,KACFuB,GAAiBvB,GAGZuB,wCAUKK,EAAaC,GACzB,MAAOD,IAAOC,GAAUD,EAAIE,MAAMD,mDAUZE,EAAWC,GACjC,MAAOC,QAAOC,eAAexH,KAAKqH,EAAWC,IACzCC,OAAOE,yBACHF,OAAOG,eAAeL,GAAYC,IACrCA,IAAaD,qDAYMM,EAAcC,GACtC,KAAM,IAAIC,OACN,qGAWMC,GACV,KAAM,IAAID,OAAM,uFAYNC,EAAaC,GACvB,KAAM,IAAIF,OAAM,8FAadG,EAAoBC,EAAoB5H,EAAYC,GACtD,IAAKD,GAA6B,KAAfA,EACjB,MAAOgB,kBAAiBkC,WAa1B,KAAK,GAVC2E,GAAY7H,EAAW8H,MAAM,KAC/Bd,EAAY3H,KACZ4D,EAAcjC,iBAAiBkC,YAC/BhD,GAAkB,EAEhB6H,EAAmB,oCAAAC,OAAuCL,EAAvC,MAAAK,OAAsDhI,EAAtD,8CACnBiI,EAAmBL,EACrBvE,sBAAAhE,KAAAsC,cAAkBuG,qBAClB7E,sBAAAhE,KAAAsC,cAAkByD,QAEbuB,EAAI,EAAGA,EAAIkB,EAAUnB,OAAQC,IAAK,CACzC,GAAMM,GAAYY,EAAUlB,EAE5B,IAAIA,IAAMkB,EAAUnB,OAAS,EACvBkB,GAAyC,aAA3BX,EAAUkB,OAAO,EAAG,IACE,kBAA5BnB,GAAUoB,eACpB/I,KAAK+D,gBAAgBC,sBAAAhE,KAAAsC,cAAkB0G,mBAC7BhJ,KAAKiJ,wBAAwBtB,EAAWC,IAG9C5H,KAAKiB,cAAcN,EAAY,+BACjCX,KAAKkJ,wBAAwBvI,EAAYC,GAGtC2H,GAAoC,IAAvBvI,KAAKqD,gBACrBsE,EAAUC,GAAahH,EACvBgD,EAAcjC,iBAAiB0C,aARjCrE,KAAK+D,gBAAgB6E,EAAkBF,OAWpC,CAEL,KADAf,EAAYA,EAAUC,IACN,CACd5H,KAAK+D,gBAAgB6E,EAAkBF,EACvC,OAGF,GAAIf,YAAqBwB,SAAAA,SAAU,CACjC,GAAMC,GAAQC,SAASb,EAAUlB,EAAI,GAAI,GAGzC,KAAKgC,MAAMF,GAAQ,CACjB,GAAMG,GAAO5B,EAAU6B,WAAWJ,EAElC,IAAIG,EACF5B,EAAY4B,EACZ1I,GAAkB,MACb,CACL,GAAMC,GAAWd,KAAKyJ,gBAAgB9I,EAAYC,EAC9CC,EACJA,IAAkB,EAEbC,GAGC6G,EAAU+B,aAAa5I,EAAS6I,aAEpChC,EAAU6B,WAAWI,KAAK9I,GAC1B6G,EAAY7G,GALZd,KAAK+D,gBAAgB6E,EAAkBF,GAU3CpB,OAYR,MANI1D,KAAgBjC,iBAAiBkC,aACnC7D,KAAKuE,OAAO+D,EAAY,KAAxB,6CAAAK,OACiDhI,EADjD,gBAAAgI,OAC0E/H,GACtEe,iBAAiBmF,mBAGhBlD,kDASewE,EAAaC,4CAcrBD,EAAaC,EAAQwB,GACnC,KAAM,IAAI1B,OAAM,kGAWCG,EAAoBC,EAAoB5H,GACzD,IAAKA,GAA6B,KAAfA,EACjB,MAAO,EAaT,KAAK,GAVC6H,GAAY7H,EAAW8H,MAAM,KAC/Bd,EAAY3H,KACZ4H,EAAY,KAEVkC,EAAyB,oCAAAnB,OAAuCL,EAAvC,MAAAK,OAAsDhI,EAAtD,+BACzB+H,EAAmB,oCAAAC,OAAuCL,EAAvC,MAAAK,OAAsDhI,EAAtD,8CACnBiI,EAAmBL,EACrBvE,sBAAAhE,KAAAsC,cAAkBuG,qBAClB7E,sBAAAhE,KAAAsC,cAAkByD,QAEbuB,EAAI,EAAGA,EAAIkB,EAAUnB,OAAQC,IAAK,CAGzC,GAFAM,EAAYY,EAAUlB,GAEjBiB,EAOE,CACL,GAAwC,aAAnCjD,OAAOsC,GAAWkB,OAAO,EAAG,IACO,kBAA5BnB,GAAUoB,eAA+B,CACnD,GAAMgB,GAASzE,OAAOsC,GAClBkB,OAAO,EAAGxD,OAAOsC,GAAWP,OAAS,EACzC,OAAOM,GAAUoB,eAAegB,GAC3B,IAAK/J,KAAKiJ,wBAAwBtB,EAAWC,GAElD,WADA5H,MAAK+D,gBAAgB6E,EAAkBF,OAbzC,IAAIpB,IAAMkB,EAAUnB,OAAS,IACtBrH,KAAKiJ,wBAAwBtB,EAAWC,GAE3C,WADA5H,MAAK+D,gBAAgB6E,EAAkBF,EAiB7C,QAAkBrD,MADlBsC,EAAYA,EAAUC,IACO,CAC3B5H,KAAK+D,gBAAgB6E,EAAkBF,EACvC,OAGF,GAAIf,YAAqBwB,SAAAA,SAAU,CACjC,GAAMC,GAAQC,SAASb,EAAUlB,EAAI,GAAI,GAGzC,KAAKgC,MAAMF,GAAQ,CACjB,GAAMG,GAAO5B,EAAU6B,WAAWJ,EAElC,KAAIG,EAEG,CACLvJ,KAAK+D,gBAAgBC,sBAAAhE,KAAAsC,cAAkB0H,sBACnCF,EACJ,OAJAnC,EAAY4B,EAQdjC,MAKN,GAAkB,OAAdK,OAAoCtC,KAAdsC,EASxB,MAAOA,EARFY,KACe,cAAdX,EACF5H,KAAK+D,gBAAgBjC,oBAAoBmI,gBAClB,WAAdrC,GACT5H,KAAK+D,gBAAgBjC,oBAAoBoI,sDAc/C,MAAOlK,MAAKmD,eAAiBxB,iBAAiByC,6DAS9C,MAAOpE,MAAKmD,eAAiBxB,iBAAiByB,6DAS9C,MAAOpD,MAAKmD,eAAiBxB,iBAAiBmD,4CAS7CqF,EAAsBC,GACvB,GAAKA,EAGL,IAAK,GADCC,GAAoBF,EAAa1B,MAAM,KACpCnB,EAAI,EAAGA,EAAI+C,EAAkBhD,OAAQC,IAAK,CACjD,GAAMgD,GAAgBD,EAAkB/C,GAAGmB,MAAM,IACjD,IAA6B,IAAzB6B,EAAcjD,OAAc,MAEhC,IAAMX,GAAe4D,EAAc,GAE/B3J,EAAa,IACb2J,GAAcjD,OAAS,IACzB1G,EAAawJ,EAAaI,QAAQ7D,EAAe,IAAK,KAGxD1G,KAAKsD,cAAcsG,MACjBlD,aAAcA,EACd/F,WAAYA,EACZyJ,SAAUA,8CAYC1D,EAAsB/F,EAAoBC,GACzD,IAAK,GAAI0G,GAAI,EAAGA,EAAItH,KAAKsD,cAAc+D,OAAQC,IAAK,CAClD,GAAMkD,GAAWxK,KAAKsD,cAAcgE,GAC9BmD,EAAiBD,EAAS9D,eAAiBA,EAC3CgE,IAA0BF,EAAS7J,WACnCgK,EAAmBH,EAAS7J,aAAeA,GAE7C8J,GAAoBC,IAAyBC,GAC/CH,EAASJ,SAASzJ,EAAYC,4CAWpBgK,EAAqBhF,GAC9BA,IACHA,EAAU5F,KAAKsG,0BAA0BsE,IAG3C5K,KAAKuE,OAAO,kBAAmB,KAAMqG,EAAc,KAAOhF,EACtDjE,iBAAiBoB,iBAErB/C,KAAKqD,cAAgBiC,OAAOsF,2CAQdC,OACExF,KAAZwF,GAAyBA,IAAYlJ,iBAAiBkC,cACxD7D,KAAKqD,cAAgB,qCAYfyH,GACR,KAAM,IAAI3C,OACN,+FAQgB4C,EAAMpK,GAC1BX,KAAKgL,cAAa,EAAAtJ,WAAAuJ,WAAUF,GAAOpK,wCASxBoK,EAAMpK,GACjB,IAAKX,KAAKyG,mBAGR,WAFAZ,SAAQC,MACJ,oEAINnF,OAA4B0E,KAAf1E,EAA2BA,EAAa,MAErDX,KAAKkL,aAAeH,CAGpB,KAAK,GAAMI,KAAOJ,GAChB,MAAOjD,eAAexH,KAAKyK,EAAMI,IAAQJ,EAAKI,GAAM,CAClD,GAAMC,IAAqBzK,EAAaA,EAAa,IAAM,IAAMwK,EAC3DvK,EAAQmK,EAAKI,EAEnB,IAAIvK,EAAK,WACP,IAAK,GAAI0G,GAAI,EAAGA,EAAI1G,EAAK,WAAeyG,OAAQC,IAC9CtH,KAAKgL,aAAapK,EAAK,WAAe0G,GAClC8D,EAAoB,IAAM9D,OAEvB1G,GAAMqC,cAAgB4E,OAC/B7H,KAAKgL,aAAapK,EAAOwK,GAEzBpL,KAAKyF,YAAY2F,EAAmBxK,oDAY1C,GAAML,GAAMP,KAAKO,GAGjB,OAAO8K,MAAKC,WAAW/K,IAAAA,oDAUvB,MAAO8K,MAAKE,MAAMvL,KAAKwL,iEAWTC,GACd,KAAM,IAAItD,OACN,4FASauD,EAAaC,GAC9B,GAAMC,IACJ7G,OAAUpD,iBAAiBkC,YAC3BoB,UAAajB,sBAAAhE,KAAAsC,cAAkByD,SAG3B8F,EAAU,GAAIC,eACpBD,GAAQE,KAAK,OAAQL,GAAK,EAC1B,KACMC,YAAkBK,QACpBH,EAAQI,iBAAiB,eACrB,qCACJJ,EAAQK,KAAKP,EAAOQ,KAAK,QAEzBN,EAAQI,iBAAiB,eACrBjM,KAAKH,SAAS+C,uBAClBiJ,EAAQK,KAAKb,KAAKC,UAAUK,KAE9B,MAAOjG,GACP,MAAOkG,GAGT,IACE,MAAOP,MAAKE,MAAMM,EAAQO,cAC1B,MAAO1G,GACP,MAAOkG,2CASIS,GACb9I,sBAAAvD,KAAAmC,SAAgB,GAAImK,iBAAgBtM,KAAMqM,IAC1CrM,KAAKuE,OAAO,iBAAkB,GAAI,YAC9B5C,iBAAiByE,gEAOrBpC,sBAAIhE,KAAJmC,YACE6B,sBAAAhE,KAAAmC,UAAcoK,SACdhJ,sBAAAvD,KAAAmC,SAAgB,MAChBnC,KAAKuE,OAAO,uBAAwB,GAAI,UACpC5C,iBAAiByE,mDAj1BvB,MAAApC,uBAAOhE,KAAPuC,yBAOW1C,GACX0D,sBAAAvD,KAAAuC,UAAArC,iBAAA8D,sBAAqBhE,KAArBuC,cAAwC1C,6GAi1BtCyM,2BAUJ,QAAAA,GAAYE,EAAUH,GAActM,gBAAAC,KAAAsM,GAAAG,KAAArK,IAAApC,MAAAqC,UAAA,EAAAzB,UAAA,KAAA8L,WAAAtK,IAAApC,MAAAqC,UAAA,EAAAzB,OARvB,IAQuB+L,UAAAvK,IAAApC,MAAAqC,UAAA,EAAAzB,UAAA,KAClC2C,sBAAAvD,KAAAyM,KAAYD,GACZjJ,sBAAAvD,KAAA2M,UAAgBC,WAAW5M,KAAK6M,QAAQC,KAAK9M,MAAOqM,0DAOpD9I,sBAAAvD,KAAA0M,YAAkB,GAClB1I,sBAAIhE,KAAJ2M,YACEI,aAAY/I,sBAAChE,KAAD2M,8CAQV3I,sBAAChE,KAAD0M,aACF1I,sBAAAhE,KAAAyM,MAAUO;;64FC58BhB,IAAAC,WAAAzN,uBAAAC,QAAA,cACAE,aAAAF,QAAA,qBAOAyN,UAAAC,wBAAA1N,QAAA,gBACAgC,eAAAjC,uBAAAC,QAAA,8BACA6C,aAAA9C,uBAAAC,QAAA,4BAEM2N,kBAAoBxL,eAAAA,QAAaI,QACjCL,iBAAmBC,eAAAA,QAAaC,OAChCC,oBAAsBC,aAAAA,QAAWC,QAKlBX,uBAKnB,QAAAA,GAAYxB,GAAc,GAAAC,EAAAC,iBAAAC,KAAAqB,EACxB,IAAMpB,GAAaC,kBAEfC,kBAAkB,MACdN,EAJgB,OAOxBC,GAAAM,2BAAAJ,KAAAK,gBAAAgB,GAAAf,KAAAN,KAAM8B,oBAAqB7B,IAE3BH,EAAKS,IAAM,GAAIC,cAAAA,IACfV,EAAKW,IAAM,GAAIC,cAAAA,IAGfZ,EAAKuN,cAAgBvN,EAAKwN,cAC1BxN,EAAKyN,UAAYzN,EAAK0N,UACtB1N,EAAK2N,YAAc3N,EAAK4N,YACxB5N,EAAK6N,YAAc7N,EAAK8N,YACxB9N,EAAK+N,UAAY/N,EAAKgO,UACtBhO,EAAKiO,gBAAkBjO,EAAKkO,gBAC5BlO,EAAKmO,kBAAoBnO,EAAKoO,kBAC9BpO,EAAKqO,iBAAmBrO,EAAKsO,iBApBLtO,8EA8BxB,MADAE,MAAKO,IAAIoJ,aACF3J,KAAK2J,WAAW,gBAAiB,+BACpC,gEASJ,GAAM5E,GAAS/E,KAAKqO,UAAU,aAAa,EAc3C,OAZItJ,KAAWpD,iBAAiB0C,aACP,KAAnBrE,KAAKS,IAAI6N,MACY,aAAnBtO,KAAKS,IAAI6N,MACXtO,KAAKsE,iBAAiB,gBAEtBtE,KAAKsE,iBAAiB,oBAEftE,KAAKH,SAASgD,cACvB7C,KAAKsE,iBAAiB,iBAInBS,sCASGpE,GACV,MAAOX,MAAKuO,SAAS,eAAe,EAAO5N,uCAUjCA,EAAYC,GACtB,MAAOZ,MAAKwO,SAAS,eAAe,EAAO7N,EAAYC,uCASvD,MAAOZ,MAAKgN,OAAO,aAAa,6CAShC,MAAOhN,MAAKyO,aAAa,6DASTpI,GAChB,MAAOrG,MAAK0O,eAAe,oBAAqBrI,4CASjCA,GACf,MAAOrG,MAAK2O,cAAc,mBAAoBtI,uCAUpC1F,EAAYC,GACtB,MAAOZ,MAAK4O,mBAAmB,eAAe,EAAOjO,EAAYC,uCASvDD,GACV,MAAOX,MAAK6O,mBAAmB,eAAe,EAAOlO,2CAWvCA,EAAYC,EAAOC,GACjC,GAAIC,EAeJ,OAbId,MAAKiB,cAAcN,EAAY,0BACjCG,EAAW,GAAIgO,cAAAA,oBACNjO,GAAmBb,KAAKiB,cAAcN,EAC7C,sDACFG,EAAW,GAAIiO,cAAAA,sCACNlO,GAAmBb,KAAKiB,cAAcN,EAC7C,+CACFG,EAAW,GAAIkO,cAAAA,iCACLnO,GACRb,KAAKiB,cAAcN,EAAY,8BACjCG,EAAW,GAAImO,cAAAA,uBAGVnO,kDAUeH,EAAYC,GAClC,OAAO,oDAUiBgK,EAAasE,GACrC,GAAIC,GAAe,WACfC,EAAgB,UASpB,OANAxE,GAActF,OAAOsF,GACjBwC,kBAAkBiC,mBAAmBzE,KACvCuE,EAAe/B,kBAAkBiC,mBAAmBzE,GAAauE,aACjEC,EAAgBhC,kBAAkBiC,mBAAmBzE,GAAawE,eAG7DF,EAASE,EAAgBD,qDAQP/N,GAEzBpB,KAAKO,IAAMa,EAAOb,4CASJ+O,GACd,GAAMC,GAAYvP,KAAKwP,uBAEnBF,KACFC,EAAUhP,IAAIkP,KAAKC,WAAa1P,KAAKO,IAAIoP,sBAG3C,IAAM5K,MACA6K,EAAY1C,UAAU2C,QAAQN,EACpC,QAAQvP,KAAKH,SAAS8C,kBACpB,IAAK,YACH,MAAOuK,WAAU2C,QAAQN,EAC3B,KAAK,SACH,IAAK,GAAMhG,KAAQqG,QACV9H,eAAexH,KAAKsP,EAAWrG,IACpCxE,EAAO6E,KAAP,GAAAjB,OAAeY,EAAf,KAAAZ,OAAuBiH,EAAUrG,IAGrC,OAAOxE,EACT,KAAK,OACL,QACE,MAAOwK,sCAUHD,GACR,GAAIA,EAAiB,CACnB,GAAMQ,GAAiB9P,KAAKO,IAAIkP,KAAKM,aAKrC,IAJuB,kBAAnBD,IACF9P,KAAKO,IAAIkP,KAAKM,cAAgB,aAGE,WAA9B/P,KAAKO,IAAIkP,KAAKO,YACa,WAAzBhQ,KAAKO,IAAIkP,KAAKQ,QACZjQ,KAAKH,SAASM,kBAC0B,KAAxCH,KAAKO,IAAI2P,aAAaC,eACM,KAA5BnQ,KAAKO,IAAIkP,KAAKW,MAAMC,MAClBC,WAAWtQ,KAAKO,IAAIkP,KAAKW,MAAMC,MAC/BC,WAAWtQ,KAAKO,IAAI2P,aAAaC,eACnCnQ,KAAKO,IAAIkP,KAAKM,cAAgB,SAE9B/P,KAAKO,IAAIkP,KAAKM,cAAgB,cAI/B,IAAkC,WAA9B/P,KAAKO,IAAIkP,KAAKO,YAA0B,CAAA,GAAAO,GAAAC,EAAAC,CACW,QAAvD,QAAAF,EAAAvQ,KAAKkL,mBAAL,KAAAqF,MAAA,GAAA,QAAAC,EAAAD,EAAmBhQ,UAAnB,KAAAiQ,MAAA,GAAA,QAAAC,EAAAD,EAAwBf,WAAxB,KAAAgB,MAAA,GAAAA,EAA8BV,gBAAiB,KAC7B,kBAAnBD,IACF9P,KAAKO,IAAIkP,KAAKM,cAAgB,YAKpC,GAAMW,GAAe1Q,KAAK2Q,gBAAgBrB,EAE1C,OAAItP,MAAKH,SAAS6C,cACZ1C,KAAKwD,cAAgB7B,iBAAiByE,kBACxCP,QAAQoB,MAAM,wBACTqI,EAAkB,MAAQ,MAAQ,OACvCzJ,QAAQoB,MAAMyJ,IAET1Q,KAAK4Q,mBAAmB5Q,KAAKH,SAAS6C,aAAcgO,KAE3D7K,QAAQqB,IAAI,wBACPoI,EAAkB,MAAQ,MAAQ,OACvCzJ,QAAQqB,IAAIwJ,GACL/O,iBAAiB0C,mBAjSUpC,UAAAA;;+iGCnBxC,IAAAgL,WAAAzN,uBAAAC,QAAA,cACAoR,eAAApR,QAAA,uBASAyN,UAAAC,wBAAA1N,QAAA,gBACAgC,eAAAjC,uBAAAC,QAAA,8BACA6C,aAAA9C,uBAAAC,QAAA,4BACAqR,oBAAAtR,uBAAAC,QAAA,mCACAsR,oBAAAvR,uBAAAC,QAAA,mCACAuR,OAAAxR,uBAAAC,QAAA,sBAEMwR,oBAAsBrP,eAAAA,QAAa2G,UACnC5G,iBAAmBC,eAAAA,QAAaC,OAChCqP,sBAAwBnP,aAAAA,QAAWwG,UACnC4I,kBAAoBC,oBAAAA,QAAUC,QAC9BC,gBAAkBC,OAAAA,QAAMhJ,UAKTiJ,yBAOnB,QAAAA,GAAY3R,GAAc,GAAAC,EAAAC,iBAAAC,KAAAwR,EACxB,IAAMvR,GAAaC,kBAEfC,kBAAkB,MACdN,EAJgB,OAOxBC,GAAAM,2BAAAJ,KAAAK,gBAAAmR,GAAAlR,KAAAN,KAAMkR,sBAAuBjR,IAPLwR,SAAArP,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAAoC,gBAAA0O,uBAAA5R,GAAA,yBAwTD,SAAC6R,EAAkBC,EAAehR,GAGzD,IAAK,GAFDiR,IAAQ,EACNC,EAAQH,EAAiBI,OACtBzK,EAAI,EAAGA,EAAIwK,IAAUD,EAAOvK,IAC/BA,IAAMsK,GAAiBD,EAAiBnI,WAAWlC,KAAO1G,IAC5DiR,GAAQ,EAGZ,OAAOA,KAvTP/R,EAAKS,IAAM,GAAIC,gBAAAA,IACfV,EAAKkS,IAAM,GAAIC,gBAAAA,IAGfnS,EAAKoS,WAAapS,EAAKwN,cACvBxN,EAAKqS,UAAYrS,EAAKsS,aACtBtS,EAAKuS,SAAWvS,EAAK4N,YACrB5N,EAAKwS,SAAWxS,EAAK8N,YACrB9N,EAAKyS,OAASzS,EAAKgO,UACnBhO,EAAK0S,aAAe1S,EAAKkO,gBACzBlO,EAAK2S,eAAiB3S,EAAKoO,kBAC3BpO,EAAK4S,cAAgB5S,EAAKsO,iBApBFtO,8EAoCxB,MADAE,MAAKO,IAAIoJ,aACF3J,KAAK2J,WAAW,qDAOvB,GAAM5E,GAAS/E,KAAKqO,UAAU,aAAa,EAE3C,IAAItJ,IAAWpD,iBAAiB0C,WAC9B,GAA6B,WAAzBrE,KAAKgS,IAAIvR,IAAIkS,QACf,OAAQ3S,KAAKgS,IAAIvR,IAAIkS,SACnB,IAAK,WACH3S,KAAKsE,iBAAiB,eACtB,MACF,KAAK,WACHtE,KAAKsE,iBAAiB,mBACtB,MACF,KAAK,SACHtE,KAAKsE,iBAAiB,iBACtB,MACF,KAAK,OACHtE,KAAKsE,iBAAiB,eACtB,MACF,KAAK,UACHtE,KAAKsE,iBAAiB,kBACtB,MACF,KAAK,UACHtE,KAAKsE,iBAAiB,kBACtB,MACF,KAAK,aACHtE,KAAKsE,iBAAiB,0BAGjBtE,MAAKH,SAASgD,cACvB7C,KAAKsE,iBAAiB,eAI1B,OAAOS,uCAOGpE,GACV,MAAOX,MAAKuO,SAAS,YAAY,EAAM5N,uCAQ7BA,EAAYC,GACtB,MAAOZ,MAAKwO,SAAS,YAAY,EAAM7N,EAAYC,uCASnD,MAAOZ,MAAKgN,OAAO,oDASnB,MAAOhN,MAAKyO,aAAa,0DASTpI,GAChB,MAAOrG,MAAK0O,eAAe,iBAAkBrI,4CAS9BA,GACf,MAAOrG,MAAK2O,cAAc,gBAAiBtI,uCAUjC1F,EAAYC,GACtB,MAAOZ,MAAK4O,mBAAmB,YAAY,EAAMjO,EAAYC,2CAW/CD,EAAYC,EAAOC,GACjC,GAAIC,EAEJ,IAAId,KAAKiB,cAAcN,EAAY,0BACjCG,EAAW,GAAIgO,gBAAAA,wBACV,IAAIjO,GAAmBb,KAAKiB,cAAcN,EAC7C,sDAAuD,CACzD,GAAMiS,GAAQjS,EAAW8H,MAAM,KACzBW,EAAQyJ,OAAOD,EAAM,IACrBE,EAAc9S,KAAKO,IAAIwS,aAAavJ,WAAWJ,EACrD,IAAK0J,EAAYE,KAEV,CACL,GAAMC,GAAmBH,EAAYE,KAC/BE,EAAoBJ,EAAY3B,kBAAkBY,MACxD,IAAyB,WAArBkB,EACF,IAAK,GAAI3L,GAAI,EAAGA,EAAI4L,GACpB,IADyClT,KAAKqD,cAC3CiE,IAAK,CACN,GAAM6L,GAAWL,EAAY3B,kBAAkB3H,WAAWlC,EACtD6L,GAASC,UAAYxS,GACvBZ,KAAK+D,gBAAgBmN,sBAAsBmC,qBAKjD,GAAMC,GAAgBnC,kBAAkB8B,EACxC,IAAIK,EAAe,CACjB,GAAIC,OACJ,OAAID,OAAJ,KAAIA,MAAJ,GAAIA,EAAeE,WACjBD,EAAQjO,OAAO1E,GAAO6H,MAAM6K,EAAcE,WAE1CD,EAAM,GAAK3S,EAGT2S,EAAMlM,OAAS,GAAKkM,EAAMlM,QAAUiM,EAAcG,IACpDzT,KAAK0T,0BAA0BT,EAAkBM,EAAO3S,GAC/C2S,EAAMlM,OAASiM,EAAcG,KACtCzT,KAAK+D,gBAAgBmN,sBAAsBmC,oBACvC,2CAGNrT,MAAK+D,gBAAgBmN,sBAAsBmC,oBACvC,4BAA8BJ,OA/BpCjT,MAAK+D,gBAAgBmN,sBAAsByC,2BAkClB,KAAvB3T,KAAKqD,gBACPvC,EAAW,GAAIiO,gBAAAA,2CAERlO,IAAmBb,KAAKiB,cAAcN,EAC7C,+CACFG,EAAW,GAAIkO,gBAAAA,iCACLnO,GACRb,KAAKiB,cAAcN,EAAY,4BACjCG,EAAW,GAAImO,gBAAAA,sBACNjP,KAAKiB,cAAcN,EAC1B,qCACFG,EAAW,GAAI8S,gBAAAA,kBACN5T,KAAKiB,cAAcN,EAC1B,mCACFG,EAAW,GAAI8S,gBAAAA,mBAAkB,GAGnC,OAAO9S,mDAQeH,EAAYC,GAClC,GAAMgS,GAAQjS,EAAW8H,MAAM,KACzBW,EAAQyJ,OAAOD,EAAM,IACrBiB,EAAgBhB,OAAOD,EAAM,IAC7BE,EAAc9S,KAAKO,IAAIwS,aAAavJ,WAAWJ,GAE/C6J,EAAmBH,EAAYE,KAC/BE,EAAoBJ,EAAY3B,kBAAkBY,MACxD,IAAyB,WAArBkB,EACF,IAAK,GAAI3L,GAAI,EAAGA,EAAI4L,GAA4C,IAAvBlT,KAAKqD,cAAqBiE,IAAK,CACtE,GAAM6L,GAAWL,EAAY3B,kBAAkB3H,WAAWlC,EACtD6L,GAASC,UAAYxS,GACvBZ,KAAK+D,gBAAgBmN,sBAAsBmC,qBAKjD,GAAMC,GAAgBnC,kBAAkB8B,EACxC,QAAmC,KAAxBK,EAAcQ,OAAyBZ,EAC9CI,EAAcQ,MAAO,CACvB,GAAIP,OACJ,OAAID,OAAJ,KAAIA,MAAJ,GAAIA,EAAeE,WACjBD,EAAQjO,OAAO1E,GAAO6H,MAAM6K,EAAcE,WAE1CD,EAAM,GAAK3S,EAGT2S,EAAMlM,OAAS,GAAKkM,EAAMlM,QAAUiM,EAAcG,IACpDzT,KAAK0T,0BAA0BT,EAAkBM,EAAO3S,GAC/C2S,EAAMlM,OAASiM,EAAcG,KACtCzT,KAAK+D,gBAAgBmN,sBAAsBmC,oBACvC,uCAGqB,IAAvBrT,KAAKqD,iBACHiQ,EAAcS,YACX/T,KAAKgU,uBAAuBlB,EAAY3B,kBACrC0C,EAAejT,KACC,IAAvBZ,KAAKqD,eAAiC,KAAVzC,GAGJ,IAAvBZ,KAAKqD,eACPrD,KAAK+D,gBAAgBmN,sBAAsBmC,oBACvC,iDAIRrT,MAAK+D,gBAAgBmN,sBAAsBmC,oBACvC,mFAUI1S,GACV,MAAOX,MAAK6O,mBAAmB,YAAY,EAAMlO,qDAUzBiK,EAAasE,GACrC,GAAIC,GAAe,GACfC,EAAgB,EASpB,OANAxE,GAActF,OAAOsF,GACjBqG,oBAAoB5B,mBAAmBzE,KACzCuE,EAAe8B,oBAAoB5B,mBAAmBzE,GAAauE,aACnEC,EAAgB6B,oBAAoB5B,mBAAmBzE,GAAawE,eAG/DF,EAASE,EAAgBD,oDA2BR8D,EAAkBM,EAAO3S,GAGjD,IAAK,GAFCuS,GAAWhC,kBAAkB8B,GAC7BgB,EAAc,GAAIC,QAAOf,EAASgB,QAC/B7M,EAAI,EAAGA,EAAIiM,EAAMlM,QAAiC,IAAvBrH,KAAKqD,cAAqBiE,IAM5D,GALI2L,EAAiBvL,MACjB,8DACF6L,EAAMjM,GAAKtH,KAAKoU,8BAA8Bb,EAAMjM,KAGtD,OAAI6L,OAAJ,KAAIA,MAAJ,GAAIA,EAAUkB,WAAY,CACxB,GAAMC,GAASf,EAAMjM,GAAGmB,MAAM0K,EAASkB,WACvC,IAAsB,IAAlBC,EAAOjN,OAAc,CACvB,GAAMkN,GAAUD,EAAO,GAAG5M,MAAMuM,EAC3BM,GAGED,EAAO,GAAG5M,MAAM,GAAIwM,QAAOf,EAASqB,WACvCxU,KAAK+D,gBAAgBmN,sBAAsBuD,eAH7CzU,KAAK+D,gBAAgBmN,sBAAsBuD,mBAO7CzU,MAAK+D,gBAAgBmN,sBAAsBuD,mBAExC,CACL,GAAMF,GAAUhB,EAAMjM,GAAGI,MAAMuM,EAC/B,KAAMM,GAAqB,KAAV3T,IACX2T,GAAgC,eAArBtB,EACfjT,KAAK+D,gBAAgBmN,sBAAsBuD,mBAE3C,IAAyB,YAArBxB,GAAkCM,EAAMlM,OAAS,EAC/CwL,OAAOU,EAAM,IAAMV,OAAOU,EAAM,KAClCvT,KAAK+D,gBAAgBmN,sBAAsBuD,mBAG7C,IAAiB,KAAblB,EAAMjM,IAAa6L,EAASuB,OAC9B,IAAK,GAAInN,GAAI,EAAGA,EAAID,GAA4B,IAAvBtH,KAAKqD,cAAqBkE,IAC7CgM,EAAMjM,KAAOiM,EAAMhM,IACrBvH,KAAK+D,gBAAgBmN,sBAAsBuD,sEAe7BE,GAS5B,IARA,GAAIC,IAAY,EACZC,GAAW,EACXC,GAAW,EAETC,EAAc,GAAIb,QACpB,kDACAK,EAAUI,EAAKjN,MAAMqN,GACrBC,EAAc,KACXT,GAAS,CACd,OAAQA,EAAQ,IACd,IAAK,OAEH,GADAS,EAAcL,EAAKjN,MAAM4J,gBAAgB2D,WACxB,CACf,GAAMC,GAAOF,EAAY,OACZ3P,KAAT6P,GAAsBA,EAAK7N,OAAS,OACKhC,KAAvC8P,oBAAAA,QAAeD,EAAKE,gBACtBpV,KAAK+D,gBAAgBmN,sBAAsBuD,eAIjDK,GAAW,CACX,MACF,KAAK,eACEA,GAAaF,GAAcC,GACX,SAAfN,EAAQ,IAAgC,UAAfA,EAAQ,IACnCvU,KAAK+D,gBAAgBmN,sBAAsBuD,eAI/CI,GAAW,CACX,MACF,KAAK,gBACEA,GAAaC,GAAaF,GACV,SAAfL,EAAQ,IAAgC,UAAfA,EAAQ,IACnCvU,KAAK+D,gBAAgBmN,sBAAsBuD,eAI/CG,GAAY,EAKhBD,EAAOA,EAAK7L,OAAOyL,EAAQ,GAAGlN,QAC9BkN,EAAUI,EAAKjN,MAAMqN,GAGvB,MAAOJ,sDAOkBvT,GAEzBpB,KAAKO,IAAMa,EAAOb,IAClBP,KAAKgS,IAAM5Q,EAAO4Q,4CASJ1C,GACd,GAAMC,GAAYvP,KAAKwP,uBAEnBF,KACFC,EAAUhP,IAAImP,WAAa1P,KAAKO,IAAIoP,sBAGtC,IAAM5K,MACA6K,EAAY1C,UAAU2C,QAAQN,EACpC,QAAQvP,KAAKH,SAAS8C,kBACpB,IAAK,YACH,MAAOuK,WAAU2C,QAAQN,EAC3B,KAAK,SACH,IAAK,GAAMhG,KAAQqG,QACV9H,eAAexH,KAAKsP,EAAWrG,IACpCxE,EAAO6E,KAAP,GAAAjB,OAAeY,EAAf,KAAAZ,OAAuBiH,EAAUrG,IAGrC,OAAOxE,EACT,KAAK,OACL,QACE,MAAOwK,sCAUHD,GAA0B,GAAAiB,GAAA8E,EAAAC,CAC9BhG,IACoB,WAAlBtP,KAAKO,IAAIgV,MACa,WAApBvV,KAAKO,IAAI0P,SACPjQ,KAAKO,IAAIiV,sBAAwBxV,KAAKO,IAAIkV,mBACxCzV,KAAKO,IAAIkV,kBAAoBzV,KAAKO,IAAIiV,sBACxC3P,QAAQoB,MAAM,wCACdjH,KAAKO,IAAImV,kBAAoB,cAE7B7P,QAAQoB,MAAM,yCACdjH,KAAKO,IAAImV,kBAAoB,eAG7B1V,KAAKO,IAAIoV,sBAAwB3V,KAAKO,IAAI6P,MAAMwF,SAC9C5V,KAAKO,IAAI6P,MAAMwF,QAAU5V,KAAKO,IAAIoV,sBACpC9P,QAAQoB,MAAM,kCACdjH,KAAKO,IAAIsV,eAAiB,WAE1BhQ,QAAQoB,MAAM,kCACdjH,KAAKO,IAAIsV,eAAiB,WAOpC,IAAIC,IAAa,CACb9V,MAAKgS,IAAIvR,IAAIkS,WAAb,QAAApC,EAA0BvQ,KAAKkL,mBAA/B,KAAAqF,MAAA,GAAA,QAAA8E,EAA0B9E,EAAmByB,UAA7C,KAAAqD,MAAA,GAAA,QAAAC,EAA0BD,EAAwB5U,UAAlD,KAAA6U,MAAA,GAA0BA,EAA6B3C,UAC9B,WAAzB3S,KAAKgS,IAAIvR,IAAIkS,UACf3S,KAAKgS,IAAIvR,IAAIkS,QAAUoD,mBAAmB/V,KAAKgS,IAAIvR,IAAIkS,SACvDmD,GAAa,EAGf,IAAMpF,GAAe1Q,KAAK2Q,gBAAgBrB,EAE1C,IAAItP,KAAKH,SAAS6C,aAAc,CAC1B1C,KAAKwD,cAAgB7B,iBAAiByE,kBACxCP,QAAQoB,MAAM,wBACTqI,EAAkB,MAAQ,MAAQ,OACvCzJ,QAAQoB,MAAMyJ,GAEhB,IAAM3L,GAAS/E,KAAK4Q,mBAAmB5Q,KAAKH,SAAS6C,aACjDgO,EAMJ,OAJIoF,QAAoCzQ,KAAtBN,EAAO+Q,YACC,KAAtB/Q,EAAO+Q,YACTE,SAAQ,yBAAArN,OAA0B5D,EAAO+Q,WAAjC,YAEH/Q,EAKP,MAHAc,SAAQqB,IAAI,wBACPoI,EAAkB,MAAQ,MAAQ,OACvCzJ,QAAQqB,IAAIwJ,GACL/O,iBAAiB0C,2CAxf1B,MAAAL,uBAAOhE,KAAPyR,iBAnCsCxP,UAAAA;;q+FC3B1C,IAAAgU,YAAA9I,wBAAA1N,QAAA,kBACA6B,QAAA7B,QAAA,YACAgC,eAAAjC,uBAAAC,QAAA,+BACAuR,OAAAxR,uBAAAC,QAAA,uBACA6C,aAAA9C,uBAAAC,QAAA,6BAOMyW,eAAiBtU,eAAAA,QAAauU,KAC9BC,WAAa7E,OAAAA,QAAM4E,KACnBrU,oBAAsBC,aAAAA,QAAWC,QAK1BxB,gBAKX,QAAAA,GAAYkJ,GAAsB,GAAA5J,EAAA,OAAAC,iBAAAC,KAAAQ,GAChCV,EAAAM,2BAAAJ,KAAAK,gBAAAG,GAAAF,KAAAN,KAAMkW,eAAeG,eAEjB3M,GAAa5J,EAAK6J,aAEtB7J,EAAKoQ,aAAe,GAAIoG,oBACxBxW,EAAKyW,WAAa,GAAIC,eANU1W,2EAYrB,GAAA2W,GAAAC,CACX3V,MAAAV,gBAAAG,EAAAQ,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAAyW,EAAAzW,KAAKkQ,mBAAL,KAAAuG,GAAAA,EAAmB9M,aACnB,QAAA+M,EAAA1W,KAAKuW,iBAAL,KAAAG,GAAAA,EAAiB/M,8CAqBjB3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJ6R,aAAgB5W,KAAK4W,aACrBC,YAAe7W,KAAK6W,YACpBC,SAAY9W,KAAK8W,SACjBC,kBAAqB/W,KAAK+W,kBAC1BtH,KAAQzP,KAAKyP,KACbuH,WAAchX,KAAKgX,WACnB9G,aAAgBlQ,KAAKkQ,aACrB+G,mBAAsBjX,KAAKiX,mBAC3BlE,aAAgB/S,KAAK+S,aACrBwD,WAAcvW,KAAKuW,WAGrB,cADOvW,MAAK2W,WACL5R,SAvDckR,WAAWzV,wBA8D9BgW,2BAIJ,QAAAA,KAAc,GAAAU,EAAA,OAAAnX,iBAAAC,KAAAwW,GACZU,EAAA9W,2BAAAJ,KAAAK,gBAAAmW,GAAAlW,KAAAN,OAEAkX,EAAKJ,SAAW,GAAIK,uBAHRD,2EASD,GAAAE,EACXrW,MAAAV,gBAAAmW,EAAAxV,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAAoX,EAAApX,KAAK8W,eAAL,KAAAM,GAAAA,EAAezN,8CAQf3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJ+R,SAAY9W,KAAK8W,SAGnB,cADO9W,MAAK2W,WACL5R,SA5BiBsS,QAAAA,SAmCtBF,kCAIJ,QAAAA,KAAc,MAAApX,iBAAAC,KAAAmX,GAAA/W,2BAAAJ,KAAAK,gBAAA8W,GAAA7W,KAAAN,KACNkW,eAAeoB,kBACjBxV,oBAAoByV,6CANQpO,QAAAA,UAa9BmN,+BAIJ,QAAAA,KAAc,GAAAkB,EAAA,OAAAzX,iBAAAC,KAAAsW,GACZkB,EAAApX,2BAAAJ,KAAAK,gBAAAiW,GAAAhW,KAAAN,KAAMkW,eAAeuB,wBADTC,qBAAAtV,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MAcS,KAXrB4W,EAAKG,MAAQ,GAAIC,UAHLJ,2EASD,GAAAK,EACX9W,MAAAV,gBAAAiW,EAAAtV,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAA6X,EAAA7X,KAAK2X,YAAL,KAAAE,GAAAA,EAAYlO,8CAoCZ3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJoL,cAAiBnQ,KAAKmQ,cACtB2H,iBAAoB9X,KAAK8X,iBACzBC,kBAAqB/X,KAAK+X,kBAC1BJ,MAAS3X,KAAK2X,MAGhB,cADO3X,MAAK2W,WACL5R,8CAlCP,MAAAf,uBAAOhE,KAAP0X,oCAQsBM,GACrBhY,KAAK0J,aAEF,EAAAuM,WAAAgC,sBAFJ1U,sBACIvD,KADJ0X,qBACgCM,UAnCH/B,WAAWiC,iDAkE/BN,qBAIX,QAAAA,KAAc,MAAA7X,iBAAAC,KAAA4X,GAAAxX,2BAAAJ,KAAAK,gBAAAuX,GAAAtX,KAAAN,KACNkW,eAAeiC,0CALKhP,QAAAA,uCAYjBhI,4BAIX,QAAAA,KAAc,GAAAiX,EAAA,OAAArY,iBAAAC,KAAAmB,GACZiX,EAAAhY,2BAAAJ,KAAAK,gBAAAc,GAAAb,KAAAN,OADYqY,QAAAjW,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAqBJ,KArBI0X,MAAAlW,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAsBN,KAnBNwX,EAAKhI,MAAQ,GAAImI,SAAAA,UAEXC,eAAgBtC,eAAesC,eAC/BC,YAAarC,WAAWqC,YACxB7P,iBAAkB9G,oBAAoByV,kBACtCmB,gBAAiB5W,oBAAoB2S,cACrCkE,iBAAkB7W,oBAAoB8W,qBAThCR,2EAgBD,GAAAS,EACX9X,MAAAV,gBAAAc,EAAAH,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAA6Y,EAAA7Y,KAAKoQ,YAAL,KAAAyI,GAAAA,EAAYlP,8CAqDZ3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJ+T,OAAU9Y,KAAK8Y,OACfC,KAAQ/Y,KAAK+Y,KACb3I,MAASpQ,KAAKoQ,MAGhB,cADOpQ,MAAK2W,WACL5R,iCAjDP,MAAAf,uBAAOhE,KAAPqY,uBAOSS,IACL,EAAA7C,WAAA+C,oBAAmBF,EAAQ1C,WAAW6C,aACxC1V,sBAAAvD,KAAAqY,QAAeS,gCASjB,MAAA9U,uBAAOhE,KAAPsY,qBAOOS,IACH,EAAA9C,WAAA+C,oBAAmBD,EAAM3C,WAAW8C,UACtC3V,sBAAAvD,KAAAsY,MAAaS,UA5DiB1B,QAAAA,yFAyFvBnW,wCAIX,QAAAA,KAAc,GAAAiY,EAAA,OAAApZ,iBAAAC,KAAAkB,GACZiY,EAAA/Y,2BAAAJ,KAAAK,gBAAAa,GAAAZ,KAAAN,OADYoZ,SAAAhX,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAIH,KAJGyY,UAAAjX,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAKF,KALE0Y,OAAAlX,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAMN,KANMuY,uEAyEZnZ,KAAK2W,YAAa,CAClB,IAAM5R,IACJwU,QAAWvZ,KAAKuZ,QAChBC,SAAYxZ,KAAKwZ,SACjBT,KAAQ/Y,KAAK+Y,KAGf,cADO/Y,MAAK2W,WACL5R,kCAnEP,MAAAf,uBAAOhE,KAAPoZ,wBAOUG,IACN,EAAAtD,WAAA+C,oBAAmBO,EAASnD,WAAWqD,eACzClW,sBAAAvD,KAAAoZ,SAAgBG,oCASlB,MAAAvV,uBAAOhE,KAAPqZ,yBAOWG,IACP,EAAAvD,WAAA+C,oBAAmBQ,EAAUpD,WAAWqD,eAC1ClW,sBAAAvD,KAAAqZ,UAAiBG,gCASnB,MAAAxV,uBAAOhE,KAAPsZ,sBAOOP,IACH,EAAA9C,WAAA+C,oBAAmBD,EAAM3C,WAAW8C,UACtC3V,sBAAAvD,KAAAsZ,OAAaP,UA9D8B1B,QAAAA;;+gECpR1C,QAASqC,kBACZ9Y,EACA+Y,EACA1U,EACA2U,GACF,GAAM3F,GAAc,GAAIC,QAAOyF,GACzBpF,EAAU3T,EAAM8G,MAAMuM,EAC5B,IAAI2F,GAA8B,KAAVhZ,EACtB,OAAO,CAET,QAAcyE,KAAVzE,IAAwB2T,GAA0B,KAAfA,EAAQ,GAC7C,KAAM,IAAI5O,aAAAA,gBAAgBV,EAE5B,QAAO,EAWF,QAAS4U,iBACZjZ,EAAYkZ,EAAsB7U,GACpC,GAAM8U,GAASD,EAAarR,MAAM,IAElC,KADA7H,GAAgB,IACHmZ,EAAO,GAAI,CACtB,GAAmB,MAAdA,EAAO,IAAgBnZ,GAASmZ,EAAO,GAC1C,OAAO,CAEP,MAAM,IAAIpU,aAAAA,gBAAgBV,GAG5B,KAAM,IAAIU,aAAAA,gBAAgBV,oMArD9B,IAAAxD,gBAAAjC,uBAAAC,QAAA,+BACA6C,aAAA9C,uBAAAC,QAAA,6BACA8B,YAAA9B,QAAA,iBACAuR,OAAAxR,uBAAAC,QAAA,uBAEM2N,kBAAoBxL,eAAAA,QAAaI,QACjCgY,cAAgBzI,OAAAA,QAAMvP,QACtBF,oBAAsBC,aAAAA,QAAWC,QAqD1BqV,mBAOX,QAAAA,KACE,GADYtX,gBAAAC,KAAAqX,GAAArU,gBAAAhD,KAAA,cAND,GAMCia,aAAA7X,IAAApC,MAAAqC,UAAA,EAAAzB,OALC,KAMTZ,eAAAqX,GAAArX,KAAAiD,gBAAA,MAAeoU,EACjB,KAAM,IAAInU,WAAU,yGAgBtBK,sBAAAvD,KAAAia,cAAoB,uCAPpB,MAAAjW,uBAAOhE,KAAPia,4EAcS1B,qBAWX,QAAAA,GAAA2B,GASO,GAAApa,GAPD0Y,EAOC0B,EAPD1B,eACAC,EAMCyB,EANDzB,YACAhF,EAKCyG,EALDzG,IACA7K,EAICsR,EAJDtR,iBACA8P,EAGCwB,EAHDxB,gBACAC,EAECuB,EAFDvB,iBACAwB,EACCD,EADDC,YACC,OAAApa,iBAAAC,KAAAuY,GACLzY,EAAAM,2BAAAJ,KAAAK,gBAAAkY,GAAAjY,KAAAN,OADKoa,WAAAhY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAAyZ,aAAAjY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAA0Z,oBAAAlY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAA2Z,mBAAAnY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAA4Z,oBAAApY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAA6Z,eAAArY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAAA8Z,KAAAtY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAuBA,KAvBA+Z,KAAAvY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAwBA,KAxBAga,KAAAxY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAGL2C,sBAAAmO,uBAAA5R,GAAAsa,WAAkB5B,GACdpL,kBAAkBoL,gBACtBjV,sBAAAmO,uBAAA5R,GAAAua,eAAsB5B,GAAsBuB,cAAcvB,aAC1DlV,sBAAAmO,uBAAA5R,GAAA8a,KAAanH,GAAe,KAARA,EAAcA,EAAM,OACxClQ,sBAAAmO,uBAAA5R,GAAAwa,oBAA4B1R,GACxB9G,oBAAoByV,mBACxBhU,sBAAAmO,uBAAA5R,GAAAya,mBAA2B7B,GACvB5W,oBAAoB2S,eACxBlR,sBAAAmO,uBAAA5R,GAAA0a,oBAA4B7B,GACxB7W,oBAAoB8W,oBACxBrV,sBAAAmO,uBAAA5R,GAAA2a,eAAuBN,GACnBH,cAAca,YAdb/a,uEAoHLE,KAAK2W,YAAa,CAClB,IAAM5R,IACJsL,IAAOrQ,KAAKqQ,IACZyK,IAAO9a,KAAK8a,IACZrH,IAAOzT,KAAKyT,IAGd,cADOzT,MAAK2W,WACL5R,oCA1FP,MAAAf,uBAAOhE,KAAPoa,0BAQYW,GACZ,KAAM,IAAIpV,aAAAA,gBAAJ3B,sBAAoBhE,KAApBsa,kDAQN,MAAAtW,uBAAOhE,KAAP0a,oBAOMrK,IACFqJ,iBAAiBrJ,EAADrM,sBAAMhE,KAANya,gBAAAzW,sBAChBhE,KADgBua,sBAEfvW,sBAAChE,KAADqa,gBACGR,gBAAgBxJ,EAADrM,sBAAMhE,KAANqa,cAAArW,sBACXhE,KADWwa,uBAErBjX,sBAAAvD,KAAA0a,KAAYrK,+BASd,MAAArM,uBAAOhE,KAAP2a,oBAOMG,IACFpB,iBAAiBoB,EAAD9W,sBAAMhE,KAANya,gBAAAzW,sBAChBhE,KADgBua,sBAEfvW,sBAAChE,KAADqa,gBACGR,gBAAgBiB,EAAD9W,sBAAMhE,KAANqa,cAAArW,sBACXhE,KADWwa,uBAErBjX,sBAAAvD,KAAA2a,KAAYG,+BASd,MAAA9W,uBAAOhE,KAAP4a,oBAOMnH,IACFiG,iBAAiBjG,EAADzP,sBAAMhE,KAANya,gBAAAzW,sBAChBhE,KADgBua,sBAEfvW,sBAAChE,KAADqa,gBACGR,gBAAgBpG,EAADzP,sBAAMhE,KAANqa,cAAArW,sBACXhE,KADWwa,uBAErBjX,sBAAAvD,KAAA4a,KAAYnH,UA/HY4D,oQAsJjBlO,qBAMX,QAAAA,GAAA6R,GAAmC,GAAA9D,GAAtB+D,EAAsBD,EAAtBC,SAAUhW,EAAY+V,EAAZ/V,SAAY,OAAAlF,iBAAAC,KAAAmJ,GACjC+N,EAAA9W,2BAAAJ,KAAAK,gBAAA8I,GAAA7I,KAAAN,OADiCkb,WAAA9Y,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,UAAA,KAAAua,WAAA/Y,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,UAAA,KAEjC2C,sBAAAmO,uBAAAwF,GAAAiE,WAAkBF,GAClB1X,sBAAAmO,uBAAAwF,GAAAgE,WAAkBjW,GAClBiS,EAAK1N,cAJ4B0N,uEA+CjClX,KAAK2W,YAAa,CAElB,KAAK,GADC5R,MACGuC,EAAI,EAAGA,EAAItH,KAAKwJ,WAAWnC,OAAQC,IAC1CvC,EAAOuC,EAAI,IAAMtH,KAAKwJ,WAAWlC,EAGnC,cADOtH,MAAK2W,WACL5R,oCAtCP,MAAAf,uBAAOhE,KAAPmb,0BAOYJ,GACZ,KAAM,IAAIpV,aAAAA,gBAAJ3B,sBAAoBhE,KAApBkb,4CAQN,MAAOlb,MAAKwJ,WAAWnC,qBAOd0K,GACT,KAAM,IAAIpM,aAAAA,gBAAJ3B,sBAAoBhE,KAApBkb,oBA7CoB7D;;s9FC9NvB,QAASY,sBACd,KAAM,IAAItS,aAAAA,gBAAgB7D,oBAAoBkH,mBAMzC,QAASoS,uBACd,KAAM,IAAIzV,aAAAA,gBAAgB7D,oBAAoBuZ,oBAMhD,QAASC,0BACP,KAAM,IAAI3V,aAAAA,gBAAgB7D,oBAAoByV,mBAUzC,QAASyB,oBACZpY,EACA+Y,EACAC,GACF,OAAO,EAAAtY,QAAAoY,kBAAiB9Y,EAAO+Y,EAC3B7X,oBAAoB2S,cAAemF,GAUlC,QAAS2B,mBACZ3a,EACAkZ,EACAF,GACF,OAAO,EAAAtY,QAAAuY,iBAAgBjZ,EAAOkZ,EAC1BhY,oBAAoB8W,mBAAoBgB,ubAjE9C,IAAAtY,SAAA7B,QAAA,YAOAgC,eAAAjC,uBAAAC,QAAA,+BACA6C,aAAA9C,uBAAAC,QAAA,6BACAuR,OAAAxR,uBAAAC,QAAA,uBACA8B,YAAA9B,QAAA,iBACAyN,UAAAC,wBAAA1N,QAAA,iBAEM2N,kBAAoBxL,eAAAA,QAAaI,QACjCgY,cAAgBzI,OAAAA,QAAMvP,QACtBF,oBAAsBC,aAAAA,QAAWC,QAwD1BxB,gBAgBX,QAAAA,GAAY6V,EAAcnG,EAAcxG,GAAsB,GAAA5J,EAAA,OAAAC,iBAAAC,KAAAQ,GAC5DV,EAAAM,2BAAAJ,KAAAK,gBAAAG,GAAAF,KAAAN,OAD4Doa,WAAAhY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAfjD,KAeiD4a,UAAApZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAdlD,QAckD6a,cAAArZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAb9C,KAa8C8a,aAAAtZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAZ/C,KAY+C+a,UAAAvZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAXlD,KAWkDgb,mBAAAxZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAVzC,KAUyCoC,gBAAA0O,uBAAA5R,GAAA,eAR/C,MAWT4J,GAAa5J,EAAK6J,aAEtBpG,sBAAAmO,uBAAA5R,GAAAsa,WAAkB/D,GAA8BjJ,kBAAkBiJ,cAClEvW,EAAK2P,KAAO,GAAIoM,SAChB/b,EAAKkX,WAAa,GAAI8E,eACtBhc,EAAKoQ,aAAeA,GAA8B,GAAIgI,gBACtDpY,EAAKmX,mBAAqB,GAAI8E,sBAC9Bjc,EAAKiT,aAAe,GAAIiJ,iBAVoClc,2EAgBjD,GAAAmc,GAAAC,EAAAzF,EAAA0F,EAAAC,CACXrb,MAAAV,gBAAAG,EAAAQ,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAAic,EAAAjc,KAAKyP,WAAL,KAAAwM,GAAAA,EAAWtS,aACX,QAAAuS,EAAAlc,KAAKgX,iBAAL,KAAAkF,GAAAA,EAAiBvS,aACjB,QAAA8M,EAAAzW,KAAKkQ,mBAAL,KAAAuG,GAAAA,EAAmB9M,aACnB,QAAAwS,EAAAnc,KAAKiX,yBAAL,KAAAkF,GAAAA,EAAyBxS,aACzB,QAAAyS,EAAApc,KAAK+S,mBAAL,KAAAqJ,GAAAA,EAAmBzS,8CAqBnB3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJ6R,aAAgB5W,KAAK4W,aACrBC,YAAe7W,KAAK6W,YACpBC,SAAY9W,KAAK8W,SACjBC,kBAAqB/W,KAAK+W,kBAC1BtH,KAAQzP,KAAKyP,KACbuH,WAAchX,KAAKgX,WACnB9G,aAAgBlQ,KAAKkQ,aACrB+G,mBAAsBjX,KAAKiX,mBAC3BlE,aAAgB/S,KAAK+S,aAGvB,cADO/S,MAAK2W,WACL5R,gDA+GP,MAAO/E,MAAKyP,KAAKE,uDAvGjB,MAAA3L,uBAAOhE,KAAPwb,yBAOW/J,GACX6J,2DAQA,MAAAtX,uBAAOhE,KAAPoa,0BAOYW,GACZO,8DAQA,MAAAtX,uBAAOhE,KAAPyb,6BAOe7E,GACXoC,mBAAmBpC,EAAcoD,cAAcqC,eAAe,IAChE9Y,sBAAAvD,KAAAyb,cAAqB7E,uCASvB,MAAA5S,uBAAOhE,KAAP0b,4BAOc7E,GACb7W,KAAK0J,YAAgDuO,qBAAtD1U,sBAAoBvD,KAApB0b,aAAwC7E,oCAQxC,MAAA7S,uBAAOhE,KAAP2b,yBAOW7E,GACPkC,mBAAmBlC,EAAUkD,cAAcqC,gBAC7C9Y,sBAAAvD,KAAA2b,UAAiB7E,6CASnB,MAAA9S,uBAAOhE,KAAP4b,kCAOoB7E,GACnB/W,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJ4b,mBAC8B7E,UA7KTM,QAAAA,kLA+LnBwE,oBAIJ,QAAAA,KAAc,GAAA3E,EAAA,OAAAnX,iBAAAC,KAAA6b,GACZ3E,EAAA9W,2BAAAJ,KAAAK,gBAAAwb,GAAAvb,KAAAN,OADYmb,WAAA/Y,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MAqBDwM,kBAAkBkP,gBArBjBC,YAAAna,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MAsBA,KAtBA4b,cAAApa,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MAuBE,KAvBF6b,iBAAAra,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MAwBK,KAxBL8b,QAAAta,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MAyBJ,KAzBI+b,eAAAva,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MA0BG,kBA1BHgc,OAAAxa,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MA2BL,KA3BKic,YAAAza,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MA4BA,KA5BAkc,aAAA1a,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MA6BC,WA7BDmc,MAAA3a,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MA8BN,KA9BMoc,cAAA5a,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MA+BE,aA5BdsW,EAAK9G,MAAQ,GAAImI,SAAAA,UAEXC,eAAgBpL,kBAAkBoL,eAClCC,YAAauB,cAAcvB,YAC3B7P,iBAAkB9G,oBAAoByV,kBACtCmB,gBAAiB5W,oBAAoB2S,cACrCkE,iBAAkB7W,oBAAoB8W,qBAThC1B,2EAgBD,GAAA2B,EACX9X,MAAAV,gBAAAwb,EAAA7a,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAA6Y,EAAA7Y,KAAKoQ,YAAL,KAAAyI,GAAAA,EAAYlP,2DAiNZ,MAAOuD,WAAU+P,qBAAVjZ,sBACHhE,KADG6c,aAAA7Y,sBAEHhE,KAFGgd,eAGH,GAAI9I,QAAO8F,cAAckD,+CAuB7Bld,KAAK2W,YAAa,CAClB,IAAM5R,IACJoY,WAAcnd,KAAKmd,WACnBC,aAAgBpd,KAAKod,aACrBC,gBAAmBrd,KAAKqd,gBACxBpN,OAAUjQ,KAAKiQ,OACfF,cAAiB/P,KAAK+P,cACtBuN,MAAStd,KAAKsd,MACdtN,YAAehQ,KAAKgQ,YACpBuN,KAAQvd,KAAKud,KACbC,aAAgBxd,KAAKwd,aACrBpN,MAASpQ,KAAKoQ,MAGhB,cADOpQ,MAAK2W,WACL5R,oCApOP,MAAAf,uBAAOhE,KAAPmb,0BAQYJ,GACZO,4DAQA,MAAAtX,uBAAOhE,KAAPuc,2BAOaY,GACZnd,KAAK0J,YAA8CuO,qBAApD1U,sBAAoBvD,KAApBuc,YAAuCY,wCAQvC,MAAAnZ,uBAAOhE,KAAPwc,6BAOeY,GACdpd,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJwc,cACyBY,2CASzB,MAAApZ,uBAAOhE,KAAPyc,gCAOkBY,GACdrE,mBAAmBqE,EAAiBrD,cAAcP,cAAc,IAClElW,sBAAAvD,KAAAyc,iBAAwBY,kCAS1B,MAAArZ,uBAAOhE,KAAP0c,uBAOSzM,GACRjQ,KAAK0J,YAAsCuO,qBAA5C1U,sBAAoBvD,KAApB0c,QAAmCzM,yCAQnC,MAAAjM,uBAAOhE,KAAP2c,8BAOgB5M,GACZiJ,mBAAmBjJ,EAAeiK,cAAcyD,YAClDla,sBAAAvD,KAAA2c,eAAsB5M,iCASxB,MAAA/L,uBAAOhE,KAAP4c,sBAOQU,GACPtd,KAAK0J,YAAoCuO,qBAA1C1U,sBAAoBvD,KAApB4c,OAAkCU,sCAQlC,MAAAtZ,uBAAOhE,KAAP6c,2BAOanN,GACZ1P,KAAK0J,YAA8CuO,qBAApD1U,sBAAoBvD,KAApB6c,YAAuCnN,uCAQvC,MAAA1L,uBAAOhE,KAAP8c,4BAOc9M,GACbhQ,KAAK0J,YAAgDuO,qBAAtD1U,sBAAoBvD,KAApB8c,aAAwC9M,gCAQxC,MAAShQ,MAAK2W,WAAP3S,sBAA6ChE,KAA7C+c,OAAqB3B,oCAOrBmC,GACHvE,mBAAmBuE,EAAMvD,cAAc0D,SAAS,IAClDna,sBAAAvD,KAAA+c,MAAaQ,wCASf,MAASvd,MAAK2W,WAAP3S,sBAA6ChE,KAA7Cgd,eAAqB5B,oCAOboC,GACXxE,mBAAmBwE,EAAcxD,cAAckD,cACjD3Z,sBAAAvD,KAAAgd,cAAqBQ,UA7NLnG,QAAAA,8QAuRhByE,0BAIJ,QAAAA,KAAc,MAAA/b,iBAAAC,KAAA8b,GAAA1b,2BAAAJ,KAAAK,gBAAAyb,GAAAxb,KAAAN,MAEVib,SAAU7N,kBAAkBuQ,oBAC5B1Y,UAAWnD,oBAAoByV,8CAPTpO,QAAAA,UAgBf+O,2BAUX,QAAAA,GAAYT,GAAuB,GAAAD,EAAA,OAAAzX,iBAAAC,KAAAkY,GACjCV,EAAApX,2BAAAJ,KAAAK,gBAAA6X,GAAA5X,KAAAN,OADiC4d,WAAAxb,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,UAAA,KAAAid,eAAAzb,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MARlB,KAQkBkd,kBAAA1b,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MAPf,KAOemd,mBAAA3b,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MANd,KASnB2C,sBAAAmO,uBAAA8F,GAAAoG,WAAkBnG,GAEdrK,kBAAkBqK,uBALWD,uEA4FjCxX,KAAK2W,YAAa,CAClB,IAAM5R,IACJoL,cAAiBnQ,KAAKmQ,cACtB2H,iBAAoB9X,KAAK8X,iBACzBC,kBAAqB/X,KAAK+X,kBAG5B,cADO/X,MAAK2W,WACL5R,oCArFP,MAAAf,uBAAOhE,KAAP4d,0BAQY7C,GACZO,+DAQA,MAAAtX,uBAAOhE,KAAP6d,8BAOgB1N,GACfnQ,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJ6d,eAC0B1N,4CAS1B,MAAAnM,uBAAOhE,KAAP8d,iCAOmBhG,GAClB9X,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJ8d,kBAC6BhG,6CAS7B,MAAA9T,uBAAOhE,KAAP+d,kCAOoBhG,GACnB/X,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJ+d,mBAC8BhG,UAtFEV,QAAAA,kKAqH9B0E,iCAIJ,QAAAA,KAAc,GAAA3D,EAAA,OAAArY,iBAAAC,KAAA+b,GACZ3D,EAAAhY,2BAAAJ,KAAAK,gBAAA0b,GAAAzb,KAAAN,OADYge,WAAA5b,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAIDwM,kBAAkB6Q,8BAJjBC,OAAA9b,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAKL,KALKud,UAAA/b,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAMF,KANEwd,OAAAhc,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAOL,KAPKyd,MAAAjc,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAQN,KARMwX,uEAoHZpY,KAAK2W,YAAa,CAClB,IAAM5R,IACJuZ,MAASte,KAAKse,MACdC,SAAYve,KAAKue,SACjBC,MAASxe,KAAKwe,MACdC,KAAQze,KAAKye,KAGf,cADOze,MAAK2W,WACL5R,oCA5GP,MAAAf,uBAAOhE,KAAPge,0BAQYjD,GACZO,uDAQA,MAAAtX,uBAAOhE,KAAPke,sBAOQI,GACJtF,mBAAmBsF,EAAOtE,cAAc0E,cACxCnD,kBAAkB+C,EAAOtE,cAAc2E,cACzCpb,sBAAAvD,KAAAke,OAAcI,oCAShB,MAAAta,uBAAOhE,KAAPme,yBAOWI,GACPvF,mBAAmBuF,EAAUvE,cAAcP,eAC7ClW,sBAAAvD,KAAAme,UAAiBI,iCASnB,MAAAva,uBAAOhE,KAAPoe,sBAOQI,GACJxF,mBAAmBwF,EAAOxE,cAAc0E,cACxCnD,kBAAkBiD,EAAOxE,cAAc4E,cACzCrb,sBAAAvD,KAAAoe,OAAcI,gCAShB,MAAAxa,uBAAOhE,KAAPqe,qBAOOI,GACHzF,mBAAmByF,EAAMzE,cAAc0E,cACvCnD,kBAAkBkD,EAAMzE,cAAc6E,aACxCtb,sBAAAvD,KAAAqe,MAAaI,UAvGgBpH,QAAAA,8GAwI7B2E,4BAIJ,QAAAA,KAAc,MAAAjc,iBAAAC,KAAAgc,GAAA5b,2BAAAJ,KAAAK,gBAAA2b,GAAA1b,KAAAN,MAEVib,SAAU7N,kBAAkB0R,sBAC5B7Z,UAAWnD,oBAAoByV,8CAPPpO,QAAAA,UAgBjB8F,kCAIX,QAAAA,KAAc,GAAAkK,EAAA,OAAApZ,iBAAAC,KAAAiP,GACZkK,EAAA/Y,2BAAAJ,KAAAK,gBAAA4O,GAAA3O,KAAAN,OADY+e,IAAA3c,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAsBR,KAtBQ0X,MAAAlW,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAuBN,KAvBMoe,MAAA5c,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAwBN,KAxBMqe,WAAA7c,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MAyBD,KAzBCse,kBAAA9c,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MA0BM,KA1BNue,QAAA/c,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MA2BJ,KA3BIwe,SAAAhd,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MA4BH,KAzBTuY,EAAKnC,WAAa,GAAI7N,SAAAA,UACpBlE,UAAWnD,oBAAoByV,kBAC/B0D,SAAU7N,kBAAkBuQ,sBAE9BxE,EAAKhI,kBAAoB,GAAIhI,SAAAA,UAC3BlE,UAAWnD,oBAAoByV,kBAC/B0D,SAAU7N,kBAAkBiS,6BATlBlG,2EAgBD,GAAAmG,GAAAC,CACXxe,MAAAV,gBAAA4O,EAAAjO,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAAsf,EAAAtf,KAAKgX,iBAAL,KAAAsI,GAAAA,EAAiB3V,aACjB,QAAA4V,EAAAvf,KAAKmR,wBAAL,KAAAoO,GAAAA,EAAwB5V,8CA8JxB3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJya,GAAMxf,KAAKwf,GACXzG,KAAQ/Y,KAAK+Y,KACb/F,KAAQhT,KAAKgT,KACbyM,UAAazf,KAAKyf,UAClBC,iBAAoB1f,KAAK0f,iBACzB3a,OAAU/E,KAAK+E,OACf4a,QAAW3f,KAAK2f,QAChB3I,WAAchX,KAAKgX,WACnB7F,kBAAqBnR,KAAKmR,kBAG5B,cADOnR,MAAK2W,WACL5R,6BA3JP,MAAS/E,MAAK2W,WAAP3S,sBAA6ChE,KAA7C+e,KAAqB3D,oCAOvBoE,GACDxG,mBAAmBwG,EAAIxF,cAAc4F,gBACvCrc,sBAAAvD,KAAA+e,IAAWS,gCASb,MAASxf,MAAK2W,WAAP3S,sBAA6ChE,KAA7CsY,OAAqB8C,oCAOrBrC,GACHC,mBAAmBD,EAAMiB,cAAcd,UACzC3V,sBAAAvD,KAAAsY,MAAaS,gCASf,MAAS/Y,MAAK2W,WAAP3S,sBAA6ChE,KAA7Cgf,OAAqB5D,oCAOrBpI,GACHgG,mBAAmBhG,EAAMgH,cAAc6F,UACzCtc,sBAAAvD,KAAAgf,MAAahM,qCASf,MAAShT,MAAK2W,WAAP3S,sBAEHhE,KAFGif,YACH7D,oCAQQqE,GACRzG,mBAAmByG,EAAWzF,cAAca,aAC5CU,kBAAkBkE,EAAWzF,cAAc8F,kBAC7Cvc,sBAAAvD,KAAAif,WAAkBQ,4CASpB,MAASzf,MAAK2W,WAAP3S,sBAA6ChE,KAA7Ckf,mBAAqB9D,oCAOTsE,GACf1G,mBAAmB0G,EAAkB1F,cAAc+F,aAAa,IAClExc,sBAAAvD,KAAAkf,kBAAyBQ,kCAS3B,MAAS1f,MAAK2W,WAAP3S,sBAA6ChE,KAA7Cmf,SAAqB/D,oCAOnBrW,GACLiU,mBAAmBjU,EAAQiV,cAAcgG,YAC3Czc,sBAAAvD,KAAAmf,QAAepa,mCASjB,MAAS/E,MAAK2W,WAAP3S,sBAA6ChE,KAA7Cof,UAAqBhE,oCAOlBuE,GACN3G,mBAAmB2G,EAAS3F,cAAckD,cAC5C3Z,sBAAAvD,KAAAof,SAAgBO,UA/JqBtI,QAAAA,mNA0M9BvI,gCAIX,QAAAA,KAAc,GAAAmR,EAAA,OAAAlgB,iBAAAC,KAAA8O,GACZmR,EAAA7f,2BAAAJ,KAAAK,gBAAAyO,GAAAxO,KAAAN,OADYkgB,KAAA9d,IAAAsP,uBAAAuO,IAAA5d,UAAA,EAAAzB,MAaR,KAbQyX,QAAAjW,IAAAsP,uBAAAuO,IAAA5d,UAAA,EAAAzB,MAcJ,KAXRqf,EAAK7P,MAAQ,GAAImI,SAAAA,UAEXC,eAAgBpL,kBAAkBoL,eAClCC,YAAauB,cAAcvB,YAC3B7P,iBAAkB9G,oBAAoByV,kBACtCmB,gBAAiB5W,oBAAoB2S,cACrCkE,iBAAkB7W,oBAAoB8W,qBAThCqH,uEA+DZjgB,KAAK2W,YAAa,CAClB,IAAM5R,IACJya,GAAMxf,KAAKwf,GACX1G,OAAU9Y,KAAK8Y,OACf1I,MAASpQ,KAAKoQ,MAGhB,cADOpQ,MAAK2W,WACL5R,6BAjDP,MAAAf,uBAAOhE,KAAPkgB,oBAOKV,GACDxG,mBAAmBwG,EAAIxF,cAAc4F,gBACvCrc,sBAAAvD,KAAAkgB,KAAWV,kCASb,MAAAxb,uBAAOhE,KAAPqY,uBAOSS,GACLE,mBAAmBF,EAAQkB,cAAcf,aAC3C1V,sBAAAvD,KAAAqY,QAAeS,UApDoBzB,QAAAA,kGAkF5BrI,4CAIX,QAAAA,KAAc,GAAAmR,EAAA,OAAApgB,iBAAAC,KAAAgP,GACZmR,EAAA/f,2BAAAJ,KAAAK,gBAAA2O,GAAA1O,KAAAN,OADYogB,KAAAhe,IAAAsP,uBAAAyO,IAAA9d,UAAA,EAAAzB,MAIR,KAJQuf,uEAiCZngB,KAAK2W,YAAa,CAClB,IAAM5R,IACJya,GAAMxf,KAAKwf,GAGb,cADOxf,MAAK2W,WACL5R,6BA3BP,MAAAf,uBAAOhE,KAAPogB,oBAOKZ,GACDxG,mBAAmBwG,EAAIxF,cAAc4F,gBACvCrc,sBAAAvD,KAAAogB,KAAWZ,UAxBoCnI,QAAAA,sGAkDxCtI,kDAIX,QAAAA,KAAc,GAAAsR,EAAA,OAAAtgB,iBAAAC,KAAA+O,GACZsR,EAAAjgB,2BAAAJ,KAAAK,gBAAA0O,GAAAzO,KAAAN,OADYsgB,SAAAle,IAAAsP,uBAAA2O,IAAAhe,UAAA,EAAAzB,MAIH,KAJGyf,uEAiCZrgB,KAAK2W,YAAa,CAClB,IAAM5R,IACJqO,QAAWpT,KAAKoT,QAGlB,cADOpT,MAAK2W,WACL5R,kCA3BP,MAAS/E,MAAK2W,WAAP3S,sBAA6ChE,KAA7CsgB,UAAqBlF,oCAOlBhI,GACN4F,mBAAmB5F,EAAS4G,cAAc+F,aAAa,IACzDxc,sBAAAvD,KAAAsgB,SAAgBlN,UAxBqCiE,QAAAA,sHAiD9C3W,gBAIX,QAAAA,KAAc,GAAA6f,EAAA,OAAAxgB,iBAAAC,KAAAU,GACZ6f,EAAAngB,2BAAAJ,KAAAK,gBAAAK,GAAAJ,KAAAN,OADYwgB,OAAApe,IAAAsP,uBAAA6O,IAAAle,UAAA,EAAAzB,MAIL,KAJK2f,uEAiCZvgB,KAAK2W,YAAa,CAClB,IAAM5R,IACJuJ,MAAStO,KAAKsO,MAGhB,cADOtO,MAAK2W,WACL5R,gCA3BP,MAAS/E,MAAK2W,WAAP3S,sBAA6ChE,KAA7CwgB,QAAqBpF,oCAOpB9M,GACJ0K,mBAAmB1K,EAAO0L,cAAcyG,WAC1Cld,sBAAAvD,KAAAwgB,OAAclS,UAxBK+I,QAAAA;;s9FClqCzB,QAASY,sBACP,KAAM,IAAItS,aAAAA,gBAAgBuL,sBAAsBlI,mBAMlD,QAASoS,uBACP,KAAM,IAAIzV,aAAAA,gBAAgBuL,sBAAsBmK,oBAMlD,QAASqF,0BACP,KAAM,IAAI/a,aAAAA,gBAAgBuL,sBAAsBuD,eAUlD,QAASkM,sBACL/f,EACA+Y,EACAC,GACF,OAAO,EAAAtY,QAAAoY,kBAAiB9Y,EAAO+Y,EAC3BzI,sBAAsBuD,cAAemF,GAS3C,QAASgH,qBAAoBhgB,EAAYkZ,GACvC,OAAO,EAAAxY,QAAAuY,iBAAgBjZ,EAAOkZ,EAC1B5I,sBAAsB0H,mRAhE5B,IAAAtX,SAAA7B,QAAA,YAOAgC,eAAAjC,uBAAAC,QAAA,+BACAuR,OAAAxR,uBAAAC,QAAA,uBACA6C,aAAA9C,uBAAAC,QAAA,6BACAqR,oBAAAtR,uBAAAC,QAAA,oCACA8B,YAAA9B,QAAA,iBACAohB,KAAA1T,wBAAA1N,QAAA,iBAEMwR,oBAAsBrP,eAAAA,QAAa2G,UACnC2I,sBAAwBnP,aAAAA,QAAWwG,UACnCuY,kBAAoB1P,oBAAAA,QAAU2P,QAE9BzP,gBAAkBC,OAAAA,QAAMhJ,UAoDjB/H,gBAKX,QAAAA,GAAYkJ,GAAsB,GAAA5J,EAAA,OAAAC,iBAAAC,KAAAQ,GAChCV,EAAAM,2BAAAJ,KAAAK,gBAAAG,GAAAF,KAAAN,OADgCwb,UAAApZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAatB,QAbsBwZ,WAAAhY,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAcrBqQ,oBAAoBoF,eAdC2K,mBAAA5e,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAeb,YAfaqgB,sBAAA7e,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAgBV,KAhBU8b,QAAAta,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAiBxB,WAjBwBgc,OAAAxa,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAkBzB,KAlByBmc,MAAA3a,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAmB1B,KAnB0B8a,aAAAtZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAoBnB,KApBmBsgB,YAAA9e,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAqBpB,KArBoBugB,cAAA/e,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAsBlB,KAtBkByY,UAAAjX,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAuBtB,KAvBsBkd,kBAAA1b,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAwBd,KAxBcwgB,MAAAhf,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAyB1B,WAzB0BygB,kBAAAjf,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MA0Bd,KA1Bc0gB,sBAAAlf,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MA2BV,KA3BUoc,cAAA5a,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MA4BlB,aA5BkB2gB,gBAAAnf,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MA6BhB,YA7BgB6a,cAAArZ,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MA8BlB,KA9BkBmd,mBAAA3b,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MA+Bb,wBA/Baic,YAAAza,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,MAgCpB,KA7BZd,EAAK0hB,mBAAqB,GAAIC,sBAC9B3hB,EAAKsQ,MAAQ,GAAIsR,mBACjB5hB,EAAK6hB,sBAAwB,GAAIC,wBACjC9hB,EAAKiX,kBAAoB,GAAI8K,oBAC7B/hB,EAAKiT,aAAe,GAAIiJ,iBACxBlc,EAAKkX,WAAa,GAAI8E,eAElBpS,GAAa5J,EAAK6J,aAVU7J,2EAqCrB,GAAAgiB,GAAAjJ,EAAAkJ,EAAAC,EAAA5F,EAAAF,CACXnb,MAAAV,gBAAAG,EAAAQ,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAA8hB,EAAA9hB,KAAKwhB,yBAAL,KAAAM,GAAAA,EAAyBnY,aACzB,QAAAkP,EAAA7Y,KAAKoQ,YAAL,KAAAyI,GAAAA,EAAYlP,aACZ,QAAAoY,EAAA/hB,KAAK2hB,4BAAL,KAAAI,GAAAA,EAA4BpY,aAC5B,QAAAqY,EAAAhiB,KAAK+W,wBAAL,KAAAiL,GAAAA,EAAwBrY,aACxB,QAAAyS,EAAApc,KAAK+S,mBAAL,KAAAqJ,GAAAA,EAAmBzS,aACnB,QAAAuS,EAAAlc,KAAKgX,iBAAL,KAAAkF,GAAAA,EAAiBvS,2DAsWjB,MAAOkX,MAAKoB,gBAALje,sBACHhE,KADG6c,aAAA7Y,sBAEHhE,KAFGgd,eAGH1L,gBAAgB4L,8CAoCpBld,KAAK2W,YAAa,CAClB,IAAM5R,IACJ4c,sBAAyB3hB,KAAK2hB,sBAC9B5K,kBAAqB/W,KAAK+W,kBAC1BrB,kBAAqB1V,KAAK0V,kBAC1BF,qBAAwBxV,KAAKwV,qBAC7BvF,OAAUjQ,KAAKiQ,OACfqN,MAAStd,KAAKsd,MACdC,KAAQvd,KAAKud,KACbxK,aAAgB/S,KAAK+S,aACrB8D,YAAe7W,KAAK6W,YACpBqL,WAAcliB,KAAKkiB,WACnBC,aAAgBniB,KAAKmiB,aACrBX,mBAAsBxhB,KAAKwhB,mBAC3BhI,SAAYxZ,KAAKwZ,SACjB1B,iBAAoB9X,KAAK8X,iBACzBvC,KAAQvV,KAAKuV,KACbyB,WAAchX,KAAKgX,WACnBvB,iBAAoBzV,KAAKyV,iBACzBE,qBAAwB3V,KAAK2V,qBAC7BvF,MAASpQ,KAAKoQ,MACdoN,aAAgBxd,KAAKwd,aACrB3H,eAAkB7V,KAAK6V,eACvBe,aAAgB5W,KAAK4W,aACrBmB,kBAAqB/X,KAAK+X,kBAG5B,cADO/X,MAAK2W,WACL5R,mCA/ZP,MAAAf,uBAAOhE,KAAPwb,yBAQW/J,GACXwG,uDASA,MAAAjU,uBAAOhE,KAAPoa,0BAQYW,GACZ9C,+DAQA,MAAAjU,uBAAOhE,KAAPghB,kCAOoBtL,GAChBiL,qBAAqBjL,EAAmBpE,gBAAgB8Q,aAC1D7e,sBAAAvD,KAAAghB,mBAA0BtL,gDAS5B,MAAA1R,uBAAOhE,KAAPihB,qCAOuBzL,GACtBxV,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJihB,sBACiCzL,kCASjC,MAAAxR,uBAAOhE,KAAP0c,uBAOSzM,GACRjQ,KAAK0J,YAAsCuO,qBAA5C1U,sBAAoBvD,KAApB0c,QAAmCzM,iCAQnC,MAAAjM,uBAAOhE,KAAP4c,sBAOQU,GACPtd,KAAK0J,YAAoCuO,qBAA1C1U,sBAAoBvD,KAApB4c,OAAkCU,gCAQlC,MAAStd,MAAK2W,WAAP3S,sBAA6ChE,KAA7C+c,OAAqB3B,oCAOrBmC,GACHoD,qBAAqBpD,EAAMjM,gBAAgBoM,SAAS,IACtDna,sBAAAvD,KAAA+c,MAAaQ,uCASf,MAAAvZ,uBAAOhE,KAAP0b,4BAOc7E,GACb7W,KAAK0J,YAAgDuO,qBAAtD1U,sBAAoBvD,KAApB0b,aAAwC7E,sCAQxC,MAAA7S,uBAAOhE,KAAPkhB,2BAOagB,GACZliB,KAAK0J,YAA8CuO,qBAApD1U,sBAAoBvD,KAApBkhB,YAAuCgB,wCAQvC,MAAAle,uBAAOhE,KAAPmhB,6BAOegB,GACdniB,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJmhB,cACyBgB,oCASzB,MAAAne,uBAAOhE,KAAPqZ,yBAOWG,GACPmH,qBAAqBnH,EAAUlI,gBAAgB+Q,gBACjD9e,sBAAAvD,KAAAqZ,UAAiBG,4CASnB,MAAAxV,uBAAOhE,KAAP8d,iCAOmBhG,GAClB9X,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJ8d,kBAC6BhG,gCAS7B,MAAA9T,uBAAOhE,KAAPohB,qBAOO7L,GACNvV,KAAK0J,YAAkCuO,qBAAxC1U,sBAAoBvD,KAApBohB,MAAiC7L,4CAQjC,MAAAvR,uBAAOhE,KAAPqhB,iCAOmB5L,GACfkL,qBAAqBlL,EAAkBnE,gBAAgBuJ,aACvD+F,oBAAoBnL,EAAkBnE,gBAAgBgR,iBACxD/e,sBAAAvD,KAAAqhB,kBAAyB5L,gDAS3B,MAAAzR,uBAAOhE,KAAPshB,qCAOuB3L,GACtB3V,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJshB,sBACiC3L,wCASjC,MAAS3V,MAAK2W,WAAP3S,sBAA6ChE,KAA7Cgd,eAAqB5B,oCAOboC,GACXmD,qBAAqBnD,EAAclM,gBAAgB4L,cACrD3Z,sBAAAvD,KAAAgd,cAAqBQ,0CASvB,MAAAxZ,uBAAOhE,KAAPuhB,+BAOiB1L,GACb8K,qBAAqB9K,EAAgBvE,gBAAgBiR,aACvDhf,sBAAAvD,KAAAuhB,gBAAuB1L,wCASzB,MAAA7R,uBAAOhE,KAAPyb,6BAOe7E,GACX+J,qBAAqB/J,EAActF,gBAAgBkR,gBAAgB,IACrEjf,sBAAAvD,KAAAyb,cAAqB7E,6CASvB,MAAA5S,uBAAOhE,KAAP+d,kCAOoBhG,GACnB/X,KAAK0J,YAEFuO,qBAFJ1U,sBACIvD,KADJ+d,mBAC8BhG,sCAS9B,MAAA/T,uBAAOhE,KAAP6c,2BAOanN,GACZ1P,KAAK0J,YAA8CuO,qBAApD1U,sBAAoBvD,KAApB6c,YAAuCnN,UA9YlB2H,QAAAA,4hBAgenBoK,iCAUJ,QAAAA,KAAc,GAAAvK,EAAA,OAAAnX,iBAAAC,KAAAyhB,GACZvK,EAAA9W,2BAAAJ,KAAAK,gBAAAohB,GAAAnhB,KAAAN,OADYmb,WAAA/Y,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MATDqQ,oBAAoBgN,8BASnBwE,aAAArgB,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MARC,MAQDud,UAAA/b,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MAPF,KAOE8hB,gBAAAtgB,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MANI,MAMJ+hB,kBAAAvgB,IAAAsP,uBAAAwF,IAAA7U,UAAA,EAAAzB,MALM,MAKNsW,uEA8GZlX,KAAK2W,YAAa,CAClB,IAAM5R,IACJ6d,YAAe5iB,KAAK4iB,YACpBrE,SAAYve,KAAKue,SACjBsE,eAAkB7iB,KAAK6iB,eACvBC,iBAAoB9iB,KAAK8iB,iBAG3B,cADO9iB,MAAK2W,WACL5R,oCA5GP,MAAAf,uBAAOhE,KAAPmb,0BAQYJ,GACZ9C,yDAQA,MAAAjU,uBAAOhE,KAAPyiB,4BAOcG,GACVjC,qBAAqBiC,EAAatR,gBAAgBuJ,aAClD+F,oBAAoBgC,EAAatR,gBAAgBqN,cACnDpb,sBAAAvD,KAAAyiB,aAAoBG,oCAStB,MAAA5e,uBAAOhE,KAAPme,yBAOWI,GACPoC,qBAAqBpC,EAAUjN,gBAAgByR,UACjDxf,sBAAAvD,KAAAme,UAAiBI,0CASnB,MAAAva,uBAAOhE,KAAP0iB,+BAOiBG,GACblC,qBAAqBkC,EAAgBvR,gBAAgBuJ,aACrD+F,oBAAoBiC,EAAgBvR,gBAAgBsN,cACtDrb,sBAAAvD,KAAA0iB,gBAAuBG,4CASzB,MAAA7e,uBAAOhE,KAAP2iB,iCAOmBG,GACfnC,qBAAqBmC,EAAkBxR,gBAAgBoN,cACvDkC,oBAAoBkC,EAAkBxR,gBAAgBuN,aACxDtb,sBAAAvD,KAAA2iB,kBAAyBG,UAvGIzL,QAAAA,yIAuI7B2E,4BAIJ,QAAAA,KAAc,MAAAjc,iBAAAC,KAAAgc,GAAA5b,2BAAAJ,KAAAK,gBAAA2b,GAAA1b,KAAAN,MAEVib,SAAUhK,oBAAoB6N,sBAC9B7Z,UAAWiM,sBAAsBlI,8CAPTG,QAAAA,UAexB2S,0BAIJ,QAAAA,KAAc,MAAA/b,iBAAAC,KAAA8b,GAAA1b,2BAAAJ,KAAAK,gBAAAyb,GAAAxb,KAAAN,MAEVib,SAAUhK,oBAAoB0M,oBAC9B1Y,UAAWiM,sBAAsBlI,8CAPXG,QAAAA,UAetB0Y,+BAIJ,QAAAA,KAAc,MAAA9hB,iBAAAC,KAAA6hB,GAAAzhB,2BAAAJ,KAAAK,gBAAAwhB,GAAAvhB,KAAAN,MAEVib,SAAUhK,oBAAoBqG,kBAC9BrS,UAAWiM,sBAAsBlI,8CAPNG,QAAAA,UAe3ByY,mCAIJ,QAAAA,KAAc,MAAA7hB,iBAAAC,KAAA4hB,GAAAxhB,2BAAAJ,KAAAK,gBAAAuhB,GAAAthB,KAAAN,MAEVib,SAAUhK,oBAAoBqG,kBAC9BrS,UAAWiM,sBAAsBlI,8CAPFG,QAAAA,UAexB8F,kCAaX,QAAAA,KAAc,GAAAuI,EAAA,OAAAzX,iBAAAC,KAAAiP,GACZuI,EAAApX,2BAAAJ,KAAAK,gBAAA4O,GAAA3O,KAAAN,OADY+e,IAAA3c,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MAZR,KAYQoe,MAAA5c,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MAXN,KAWMoiB,WAAA5gB,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MAVD,KAUCqe,WAAA7c,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MATD,KASCqiB,kBAAA7gB,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MARM,KAQNue,QAAA/c,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MAPJ,KAOIwe,SAAAhd,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MANH,KAMGsiB,aAAA9gB,IAAAsP,uBAAA8F,IAAAnV,UAAA,EAAAzB,MALC,KAQb4W,EAAKR,WAAa,GAAI7N,SAAAA,UACpBlE,UAAWiM,sBAAsBlI,kBACjCiS,SAAUhK,oBAAoB0M,sBAEhCnG,EAAKrG,kBAAoB,GAAIhI,SAAAA,UAC3BlE,UAAWiM,sBAAsBlI,kBACjCiS,SAAUhK,oBAAoBoO,6BATpB7H,2EAgBD,GAAA8H,GAAAC,CACXxe,MAAAV,gBAAA4O,EAAAjO,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAAsf,EAAAtf,KAAKgX,iBAAL,KAAAsI,GAAAA,EAAiB3V,aACjB,QAAA4V,EAAAvf,KAAKmR,wBAAL,KAAAoO,GAAAA,EAAwB5V,8CAsNxB3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJya,GAAMxf,KAAKwf,GACXxM,KAAQhT,KAAKgT,KACbgE,WAAchX,KAAKgX,WACnBmM,UAAanjB,KAAKmjB,UAClB1D,UAAazf,KAAKyf,UAClB2D,iBAAoBpjB,KAAKojB,iBACzBre,OAAU/E,KAAK+E,OACf4a,QAAW3f,KAAK2f,QAChB0D,YAAerjB,KAAKqjB,YACpBlS,kBAAqBnR,KAAKmR,kBAG5B,cADOnR,MAAK2W,WACL5R,6BA5NP,MAAAf,uBAAOhE,KAAP+e,mBAOKS,GACDmB,qBAAqBnB,EAAIlO,gBAAgBgS,oBAC3C/f,sBAAAvD,KAAA+e,IAAWS,gCASb,MAAAxb,uBAAOhE,KAAPgf,qBAOOhM,GACH2N,qBAAqB3N,EAAM1B,gBAAgBuO,UAC7Ctc,sBAAAvD,KAAAgf,MAAahM,qCASf,MAAAhP,uBAAOhE,KAAPgjB,0BAOYG,GACRxC,qBAAqBwC,EAAW7R,gBAAgB4H,UAClD3V,sBAAAvD,KAAAgjB,WAAkBG,qCASpB,MAAAnf,uBAAOhE,KAAPif,0BAOYQ,GACRkB,qBAAqBlB,EAAWnO,gBAAgBuJ,aAClDtX,sBAAAvD,KAAAif,WAAkBQ,4CASpB,MAAAzb,uBAAOhE,KAAPijB,iCAQmBG,GACnB,OAAyB,KAAdpjB,KAAKgT,KACd,KAAM,IAAIrN,aAAAA,gBACNuL,sBAAsByC,2BAE1B,IAAIJ,MACED,EAAgBwN,kBAAkB9gB,KAAKgT,KAC7C,KAAIM,EAyCF,KAAM,IAAI3N,aAAAA,gBAAgBuL,sBAAsBuD,cAlChD,KANA,OAAInB,OAAJ,KAAIA,MAAJ,GAAIA,EAAeE,WACjBD,EAAQ6P,EAAiB3a,MAAM6K,EAAcE,WAE7CD,EAAM,GAAK6P,IAGR7P,EAAMlM,OAAS,GAAOkM,EAAMlM,QAAUiM,EAAcG,KA+BvD,KAAM,IAAI9N,aAAAA,gBAAgBuL,sBAAsBmC,oBA7BhD,KAAK,GADCY,GAAc,GAAIC,QAAOZ,EAAca,QACpC7M,EAAI,EAAGA,EAAIiM,EAAMlM,OAAQC,IAChC,GAAA,OAAIgM,OAAJ,KAAIA,MAAJ,GAAIA,EAAee,WAAY,CAC7B,GAAMC,GAASf,EAAMjM,GAAGmB,MAAM6K,EAAce,WACtB,KAAlBC,EAAOjN,QACJiN,EAAO,GAAG5M,MAAMuM,GAGdK,EAAO,GAAG5M,MAAM,GAAIwM,QAAOZ,EAAckB,WAC5CkM,yBAIJA,6BAGF,IAAKnN,EAAMjM,GAAGI,MAAMuM,IAGlB,GAAiB,KAAbV,EAAMjM,IAAagM,EAAcoB,OACnC,IAAK,GAAInN,GAAI,EAAGA,EAAID,EAAGC,IACjBgM,EAAMjM,KAAOiM,EAAMhM,IACrBmZ,6BALNA,yDA0BZ,MAAA1c,uBAAOhE,KAAPmf,uBAOSpa,GACL4b,qBAAqB5b,EAAQuM,gBAAgB0O,YAC/Czc,sBAAAvD,KAAAmf,QAAepa,mCASjB,MAAAf,uBAAOhE,KAAPof,wBAOUO,GACNgB,qBAAqBhB,EAASrO,gBAAgB4L,cAChD3Z,sBAAAvD,KAAAof,SAAgBO,uCASlB,MAAA3b,uBAAOhE,KAAPkjB,4BAOcG,GACV1C,qBAAqB0C,EAAa/R,gBAAgBiS,kBAAkB,IACtEhgB,sBAAAvD,KAAAkjB,aAAoBG,UA/NiBhM,QAAAA,iPA2Q9BvI,gCAUX,QAAAA,KAAc,GAAAsJ,EAAA,OAAArY,iBAAAC,KAAA8O,GACZsJ,EAAAhY,2BAAAJ,KAAAK,gBAAAyO,GAAAxO,KAAAN,OADYkgB,KAAA9d,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MATR,KASQ4iB,iBAAAphB,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MARI,YAQJ6iB,oBAAArhB,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MAPO,YAOP8iB,mBAAAthB,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MANM,KAMN+iB,cAAAvhB,IAAAsP,uBAAA0G,IAAA/V,UAAA,EAAAzB,MALC,KAQbwX,EAAKhI,MAAQ,GAAIsR,mBAHLtJ,2EASD,GAAAwL,EACX7iB,MAAAV,gBAAAyO,EAAA9N,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAA4jB,EAAA5jB,KAAKoQ,YAAL,KAAAwT,GAAAA,EAAYja,8CA6GZ3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJya,GAAMxf,KAAKwf,GACX3J,eAAkB7V,KAAK6V,eACvBH,kBAAqB1V,KAAK0V,kBAC1BD,iBAAoBzV,KAAKyV,iBACzB4N,YAAerjB,KAAKqjB,YACpBjT,MAASpQ,KAAKoQ,MAGhB,cADOpQ,MAAK2W,WACL5R,6BA/GP,MAAAf,uBAAOhE,KAAPkgB,oBAOKV,GACDmB,qBAAqBnB,EAAIlO,gBAAgBgS,oBAC3C/f,sBAAAvD,KAAAkgB,KAAWV,0CASb,MAAAxb,uBAAOhE,KAAPwjB,gCAOiB3N,GACb8K,qBAAqB9K,EAAgBvE,gBAAgBiR,aACvDhf,sBAAAvD,KAAAwjB,iBAAuB3N,6CASzB,MAAA7R,uBAAOhE,KAAPyjB,mCAOoB/N,GAChBiL,qBAAqBjL,EAAmBpE,gBAAgB8Q,aAC1D7e,sBAAAvD,KAAAyjB,oBAA0B/N,4CAS5B,MAAA1R,uBAAOhE,KAAP0jB,kCAOmBjO,GACfkL,qBAAqBlL,EAAkBnE,gBAAgBuJ,aACvD+F,oBAAoBnL,EAAkBnE,gBAAgBgR,iBACxD/e,sBAAAvD,KAAA0jB,mBAAyBjO,uCAS3B,MAAAzR,uBAAOhE,KAAP2jB,6BAOcN,GACV1C,qBAAqB0C,EAAa/R,gBAAgBiS,kBAAkB,IACtEhgB,sBAAAvD,KAAA2jB,cAAoBN,UA/GehM,QAAAA,oMAmJnCqK,8BAMJ,QAAAA,KAAc,GAAAvI,EAAA,OAAApZ,iBAAAC,KAAA0hB,GACZvI,EAAA/Y,2BAAAJ,KAAAK,gBAAAqhB,GAAAphB,KAAAN,MAEMwY,eAAgBvH,oBAAoBuH,eACpC/E,IAAK,GACL7K,iBAAkBsI,sBAAsBlI,kBACxC0P,gBAAiBxH,sBAAsBuD,cACvCkE,iBAAkBzH,sBAAsB0H,mBACxCuB,aAAc7I,gBAAgBuJ,cARxBgJ,QAAAzhB,IAAAsP,uBAAAyH,IAAA9W,UAAA,EAAAzB,MALJ,KAKIuY,uEA4CZnZ,KAAK2W,YAAa,CAClB,IAAM5R,IACJ6Q,OAAU5V,KAAK4V,OACfvF,IAAAtP,KAAAV,gBAAAqhB,EAAA1gB,WAAA,MAAAhB,MACA8a,IAAA/Z,KAAAV,gBAAAqhB,EAAA1gB,WAAA,MAAAhB,MACAyT,IAAA1S,KAAAV,gBAAAqhB,EAAA1gB,WAAA,MAAAhB,MAGF,cADOA,MAAK2W,WACL5R,iCAnCP,MAAAf,uBAAOhE,KAAP6jB,uBAOSjO,GACL+K,qBAAqB/K,EAAQtE,gBAAgBuJ,aAC7C+F,oBAAoBhL,EAAQtE,gBAAgBwS,eAC9CvgB,sBAAAvD,KAAA6jB,QAAejO,UAjCW2C,QAAAA,8BAiEnB3E,8BAUX,QAAAA,KAAuC,GAAAqM,GAA3B8D,EAA2BC,UAAA3c,OAAA,OAAAhC,KAAA2e,UAAA,IAAAA,UAAA,EAAA,OAAAjkB,iBAAAC,KAAA4T,GACrCqM,EAAA7f,2BAAAJ,KAAAK,gBAAAuT,GAAAtT,KAAAN,OADqCikB,SAAA7hB,IAAAsP,uBAAAuO,IAAA5d,UAAA,EAAAzB,MAT5B,KAS4BsjB,WAAA9hB,IAAAsP,uBAAAuO,IAAA5d,UAAA,EAAAzB,MAR3B,KAQ2BujB,YAAA/hB,IAAAsP,uBAAAuO,IAAA5d,UAAA,EAAAzB,MAP1B,KAO0BwjB,mBAAAhiB,IAAAsP,uBAAAuO,IAAA5d,UAAA,EAAAzB,UAAA,KAErC2C,sBAAAmO,uBAAAuO,GAAAgE,SAAgB,IAChB1gB,sBAAAmO,uBAAAuO,GAAAiE,WAAiB,IACjB3gB,sBAAAmO,uBAAAuO,GAAAkE,YAAkB,IAClB5gB,sBAAAmO,uBAAAuO,GAAAmE,mBAA0BL,GALW9D,uEAqFrCjgB,KAAK2W,YAAa,CAClB,IAAM5R,IACJsf,QAAWrkB,KAAKqkB,QAChB7K,SAAYxZ,KAAKwZ,SACjB2J,UAAanjB,KAAKmjB,UAGpB,cADOnjB,MAAK2W,WACL5R,kCA/EP,MAAAf,uBAAOhE,KAAPikB,wBAOUI,GACNrkB,KAAK0J,aAAL1F,sBAAoBhE,KAApBokB,oBACFnM,qBAEI0I,qBAAqB0D,EAAS/S,gBAAgBgT,mBAAmB,IACnE/gB,sBAAAvD,KAAAikB,SAAgBI,oCAUpB,MAAArgB,uBAAOhE,KAAPkkB,0BAOW1K,GACPxZ,KAAK0J,aAAL1F,sBAAoBhE,KAApBokB,oBACFnM,qBAEI0I,qBAAqBnH,EAAUlI,gBAAgBiT,eACjDhhB,sBAAAvD,KAAAkkB,WAAiB1K,qCAUrB,MAAAxV,uBAAOhE,KAAPmkB,2BAOYhB,GACRnjB,KAAK0J,aAAL1F,sBAAoBhE,KAApBokB,oBACFnM,qBAEI0I,qBAAqBwC,EAAW7R,gBAAgB4H,UAClD3V,sBAAAvD,KAAAmkB,YAAkBhB,UA/Ea9L,QAAAA,4JA6G1BrI,4CAMX,QAAAA,KAAc,GAAAmR,EAAA,OAAApgB,iBAAAC,KAAAgP,GACZmR,EAAA/f,2BAAAJ,KAAAK,gBAAA2O,GAAA1O,KAAAN,OADYogB,KAAAhe,IAAAsP,uBAAAyO,IAAA9d,UAAA,EAAAzB,MALR,KAKQuf,uEA+BZngB,KAAK2W,YAAa,CAClB,IAAM5R,IACJya,GAAMxf,KAAKwf,GAGb,cADOxf,MAAK2W,WACL5R,6BA3BP,MAAAf,uBAAOhE,KAAPogB,oBAOKZ,GACDmB,qBAAqBnB,EAAIlO,gBAAgBgS,oBAC3C/f,sBAAAvD,KAAAogB,KAAWZ,UAxBoCnI,QAAAA,sGAiDxCtI,kDAMX,QAAAA,KAAc,GAAAsR,EAAA,OAAAtgB,iBAAAC,KAAA+O,GACZsR,EAAAjgB,2BAAAJ,KAAAK,gBAAA0O,GAAAzO,KAAAN,OADYsgB,SAAAle,IAAAsP,uBAAA2O,IAAAhe,UAAA,EAAAzB,MALH,KAKGyf,uEA+BZrgB,KAAK2W,YAAa,CAClB,IAAM5R,IACJqO,QAAWpT,KAAKoT,QAGlB,cADOpT,MAAK2W,WACL5R,kCA3BP,MAAAf,uBAAOhE,KAAPsgB,wBAOUlN,GACNuN,qBAAqBvN,EAAS9B,gBAAgByO,cAChDxc,sBAAAvD,KAAAsgB,SAAgBlN,UAxBqCiE,QAAAA,sHAiD9CpF,gBAIX,QAAAA,KAAc,GAAAsO,EAAA,OAAAxgB,iBAAAC,KAAAiS,GACZsO,EAAAngB,2BAAAJ,KAAAK,gBAAA4R,GAAA3R,KAAAN,OAEAugB,EAAK9f,IAAM,GAAI+jB,QAHHjE,2EASD,GAAAkE,EACX1jB,MAAAV,gBAAA4R,EAAAjR,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAAykB,EAAAzkB,KAAKS,UAAL,KAAAgkB,GAAAA,EAAU9a,8CAcV3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJtE,IAAOT,KAAKS,IAGd,cADOT,MAAK2W,WACL5R,SAlCcsS,QAAAA,4BAyCnBmN,oBAMJ,QAAAA,KAAc,GAAAE,EAAA,OAAA3kB,iBAAAC,KAAAwkB,GACZE,EAAAtkB,2BAAAJ,KAAAK,gBAAAmkB,GAAAlkB,KAAAN,OADY2kB,SAAAviB,IAAAsP,uBAAAgT,IAAAriB,UAAA,EAAAzB,MALH,WAQT8jB,EAAKE,cAAgB,GAAIC,oBAHbH,2EASD,GAAAI,EACX/jB,MAAAV,gBAAAmkB,EAAAxjB,WAAA,aAAAhB,MAAAM,KAAAN,MACA,QAAA8kB,EAAA9kB,KAAK4kB,oBAAL,KAAAE,GAAAA,EAAoBnb,8CA+BpB3J,KAAK2W,YAAa,CAClB,IAAM5R,IACJ4N,QAAW3S,KAAK2S,QAGlB,cADO3S,MAAK2W,WACL5R,kCA5BP,MAAAf,uBAAOhE,KAAP2kB,wBAOUhS,GACNgO,qBAAqBhO,EAASrB,gBAAgBmP,WAChDld,sBAAAvD,KAAA2kB,SAAgBhS,UAlCD0E,QAAAA,8BA4DfwN,+BAuBJ,QAAAA,KAAc,GAAAE,EAAA,OAAAhlB,iBAAAC,KAAA6kB,GACZE,EAAA3kB,2BAAAJ,KAAAK,gBAAAwkB,GAAAvkB,KAAAN,OADYglB,UAAA5iB,IAAAsP,uBAAAqT,IAAA1iB,UAAA,EAAAzB,MAtBF,YAsBEqkB,UAAA7iB,IAAAsP,uBAAAqT,IAAA1iB,UAAA,EAAAzB,MArBF,YAqBEoC,gBAAA0O,uBAAAqT,GAAA,SAAA,QAAAG,KAAAnlB,gBAAAC,KAAAklB,GAAAliB,gBAAAhD,KAAA,iBAdK,SAACmlB,GAAD,MAAa,cAclBniB,gBAAA0O,uBAAAqT,GAAA,OAAA,QAAAK,KAAArlB,gBAAAC,KAAAolB,GAAApiB,gBAAAhD,KAAA,iBANK,SAACmlB,GAAD,MAAa,cAMlBJ,uEA+CZ/kB,KAAK2W,YAAa,CAClB,IAAM5R,IACJsgB,SAAYrlB,KAAKqlB,SACjBC,SAAYtlB,KAAA,SAGd,cADOA,MAAK2W,WACL5R,mCA5CP,MAAAf,uBAAOhE,KAAPglB,yBAOWO,GACXtN,sDAQA,MAAAjU,uBAAOhE,KAAPilB,yBAOWM,GACXtN,4BAxD6BZ,QAAAA;;q0BC3/CjC,IAAMxV,SACJwC,WAAY,OACZR,YAAa,QACbT,sBAAuB,EACvBgB,kBAAmB,EACnBU,iBAAkB,EAClBsB,gBAAiB,EACjB5B,eAAgB,EAChBsC,kBAAmB,EACnB/D,gBAAiB,EACjByiB,eAAgB,GAGZxjB,SAEJqU,aAAc,iGACdiG,cAAe,oHACf9D,eAAgB,cAChBlB,kBAAmB,wBACnBqG,oBAAqB,kBACrB0B,2BAA4B,UAC5B5H,sBAAuB,mDACvBwG,4BAA6B,4BAC7Ba,sBAAuB,sFAEvBzP,oBACEoW,KACEtW,aAAc,oBACdC,cAAe,kGAEjBsW,KACEvW,aAAc,yBACdC,cAAe,kGAEjBuW,KACExW,aAAc,+BACdC,cAAe,wKAEjBwW,KACEzW,aAAc,2CACdC,cAAe,kKAEjByW,KACE1W,aAAc,kBACdC,cAAe,yEAEjB0W,KACE3W,aAAc,wBACdC,cAAe,qNAEjB2W,KACE5W,aAAc,0CACdC,cAAe,4IAEjB4W,KACE7W,aAAc,uBACdC,cAAe,2EAEjB6W,KACE9W,aAAc,wBACdC,cAAe,+EAEjB8W,KACE/W,aAAc,sBACdC,cAAe,yHAKf+G,KAAIjW,iBACL8B,YACDqU,aAAc,4GACdoB,sBAAuB,wEACvBU,eAAgB,sBAId5P,WAEJ8N,aAAc,uTACdiB,kBAAmB,6BACnBkB,eAAgB,qBAChBmF,oBAAqB,yEACrB0B,2BAA4B,UAC5B5H,sBAAuB,mDACvBwG,4BAA6B,uDAC7Ba,sBAAuB,uGAEvBzP,oBACE8W,GACEhX,aAAc,WACdC,cAAe,4DAEjBqW,KACEtW,aAAc,oBACdC,cAAe,gGAEjBgX,KACEjX,aAAc,iCACdC,cAAe,oDAEjBiX,KACElX,aAAc,sBACdC,cAAe,oEAEjBkX,KACEnX,aAAc,8BACdC,cAAe,mEAEjBmX,KACEpX,aAAc,8BACdC,cAAe,mDAEjBoX,KACErX,aAAc,oCACdC,cAAe,+EAEjBqX,KACEtX,aAAc,gCACdC,cAAe,kEAEjBsX,KACEvX,aAAc,sCACdC,cAAe,8EAEjBuX,KACExX,aAAc,kCACdC,cAAe,4EAEjBwX,KACEzX,aAAc,mCACdC,cAAe,8EAEjByX,KACE1X,aAAc,+BACdC,cAAe,4EAEjB0X,KACE3X,aAAc,+BACdC,cAAe,4EAEjB2X,KACE5X,aAAc,2BACdC,cAAe,0EAEjBsW,KACEvW,aAAc,yBACdC,cAAe,+JAEjByW,KACE1W,aAAc,sBACdC,cAAe,8HAEjB4X,KACE7X,aAAc,sBACdC,cAAe,8HAEjB6X,KACE9X,aAAc,yBACdC,cAAe,4HAEjB0W,KACE3W,aAAc,+BACdC,cAAe,uGAEjB2W,KACE5W,aAAc,mCACdC,cAAe,yMAEjB4W,KACE7W,aAAc,2CACdC,cAAe,qLAEjB6W,KACE9W,aAAc,kCACdC,cAAe,wEAEjB8W,KACE/W,aAAc,mCACdC,cAAe,4EAEjB8X,KACE/X,aAAc,mCACdC,cAAe,oHAEjB+X,KACEhY,aAAc,wCACdC,cAAe,8HAEjBgY,KACEjY,aAAc,wCACdC,cAAe,6LAKfxN,cACJC,OAAQA,OACRG,QAASA,QACTmU,KAAMA,KACN5N,UAAWA,oBAGE3G;;q0BC5Mf,IAAMC,SACJkE,QAAS,IACTshB,sBAAuB,IACvBpjB,YAAa,IACbE,WAAY,IACZmjB,oBAAqB,IACrB1iB,wBAAyB,IACzBC,qBAAsB,IACtBK,qBAAsB,IACtBC,oBAAqB,IACrBI,kBAAmB,IACnBC,iBAAkB,IAClBU,mBAAoB,IACpBC,kBAAmB,IACnBohB,eAAgB,IAChBtd,eAAgB,IAChBC,YAAa,IACbsd,oBAAqB,IACrBnU,oBAAqB,IACrBoU,uBAAwB,IACxB5e,qBAAsB,IACtB6e,sBAAuB,IACvB1d,sBAAuB,IACvBuN,kBAAmB,IACnBvO,kBAAmB,IACnBqS,mBAAoB,IACpB5G,cAAe,IACfmE,mBAAoB,IACpBjF,2BAA4B,KAGxB3R,QAAO9B,iBACR2B,WACDqD,qBAAsB,IACtBK,kBAAmB,IACnBW,mBAAoB,IACpBqhB,eAAgB,IAChBtd,eAAgB,IAChBC,YAAa,IACbrB,qBAAsB,IACtB6e,sBAAuB,IACvB1d,sBAAuB,IACvBuN,kBAAmB,IACnBvO,kBAAmB,IACnBqS,mBAAoB,IACpB5G,cAAe,IACfmE,mBAAoB,IACpBjF,2BAA4B,MAI1BpL,UAASrI,iBACV2B,WACDwlB,sBAAuB,IACvBpjB,YAAa,IACbE,WAAY,IACZmjB,oBAAqB,IACrB1iB,wBAAyB,IACzB+iB,sBAAuB,IACvBziB,qBAAsB,IACtBC,oBAAqB,IACrBI,kBAAmB,IACnBC,iBAAkB,IAClBU,mBAAoB,IACpBC,kBAAmB,IACnBohB,eAAgB,IAChBC,oBAAqB,IACrBnU,oBAAqB,IACrBoU,uBAAwB,IACxB5e,qBAAsB,IACtB6e,sBAAuB,IACvB1d,sBAAuB,IACvBhB,kBAAmB,IACnBqS,mBAAoB,IACpB5G,cAAe,IACfmE,mBAAoB,IACpBjF,2BAA4B,MAI1B5R,YACJC,QAASA,QACTuG,UAAWA,oBAGExG;;0FCtFf,IAAMoT,iBACJyS,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMpM,GAAM,KAClEqM,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KACln7B,IAAO,MAAOogBAGlD7qB;;q0BCzEf,IAAMnT,UACJyX,aAAc,aACd4C,cAAe,cACfnD,QAAS,wDACTgE,YAAa,oDACb+iB,WAAY,SACZvhB,YAAa,eACb7D,WAAY,6BACZ+E,cAAe,6BACfG,YAAa,aACbmgB,SAAU,cAGVziB,UAAW,iDACXxE,WAAY,+DACZyE,QAAS,+BACTmC,QAAS,+EACTG,UAAW,oEACXS,SAAU,wBAGVhI,YAAa,QACbkG,YAAa,SACbC,YAAa,WACbkB,gBAAiB,WACjBjB,WAAY,QAGR1I,KAAIjW,iBACL8B,YACD4d,cAAe,iBAIbrX,WACJ43B,aAAc,6BACd5b,aAAc,6BACdlC,cAAe,8BACf+d,cAAe,8BACf5d,eAAgB,+BAChBO,QAAS,gDACTQ,iBAAkB,2EAClBtO,UAAW,8DACXorB,mBAAoB,sEACpB/b,kBAAmB,4EACnBpL,QAAS,2RACTgE,YAAa,6HACb+iB,WAAY,SACZvhB,YAAa,eACb7D,WAAY,oCACZ+E,cAAe,0BACf0gB,mBAAoB,kBACpBhd,kBAAmB,+DACnBvD,YAAa,OACbmgB,SAAU,cACVK,cAAe,YAGfne,WAAY,iDACZG,WAAY,4BACZ7E,QAAS,qCACTmC,QAAS,kGACTG,UAAW,0EACXS,SAAU,6GACV+f,WAAY,yBACZC,UAAW,8DAGX3c,aAAc,OACdnF,YAAa,MACbC,YAAa,MACbC,WAAY,OACZyD,eAAgB,OAGZ/Q,OACJ4E,KAAMA,KACNnU,QAASA,QACTuG,UAAWA,oBAGEgJ;;kKClFf,IAAAP,QAAAxR,uBAAAC,QAAA,YAEM6R,gBAAkBC,OAAAA,QAAMhJ,UAExBwY,SACJ2f,cACEvsB,OAAQ,iBACRV,IAAK,EACLD,UAAW,GACXkB,QAAQ,GAEVisB,QACExsB,OAAQ7C,gBAAgBgvB,mBACxB7sB,IAAK,GACLD,UAAW,MACXkB,QAAQ,GAEVksB,WACEzsB,OAAQ7C,gBAAgBiS,iBACxB9P,IAAK,GACLD,UAAW,MACXkB,QAAQ,GAEVmsB,gBACE1sB,OAAQ7C,gBAAgBgT,kBACxB7Q,IAAK,EACLD,UAAW,GACXkB,QAAQ,GAEVosB,UACE3sB,OAAQ7C,gBAAgBgvB,mBACxB9rB,QAASlD,gBAAgBgvB,mBACzB7sB,IAAK,GACLD,UAAW,MACXa,WAAY,MACZK,QAAQ,GAEVqsB,aACE5sB,OAAQ,MAAQ7C,gBAAgBgvB,mBAChC9rB,QAASlD,gBAAgBuJ,WAAa,OAClCvJ,gBAAgBgvB,mBACpB7sB,IAAK,IACLD,UAAW,MACXa,WAAY,MACZK,QAAQ,GAEVssB,YACE7sB,OAAQ7C,gBAAgBgvB,mBACxB7sB,IAAK,GACLD,UAAW,MACXkB,QAAQ,GAEVusB,QACE9sB,OAAQ7C,gBAAgBgvB,mBACxB7sB,IAAK,EACLD,UAAW,GACXkB,QAAQ,GAEVwsB,SACE/sB,OAAQ7C,gBAAgBuJ,WACxBpH,IAAK,EACLD,UAAW,GACXkB,QAAQ,GAEVysB,OACEhtB,OAAQ7C,gBAAgB8uB,cACxB3sB,IAAK,EACLD,UAAW,GACXkB,QAAQ,IAINrD,SACJqvB,cACEjtB,IAAK,EACLD,UAAW,GACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ,iBACRL,MAAO,GAET6sB,QACEltB,IAAK,GACLD,UAAW,MACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgBgvB,oBAE1BM,WACEntB,IAAK,GACLD,UAAW,MACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgB+uB,oBAE1BQ,gBACEptB,IAAK,EACLD,UAAW,GACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgBgT,mBAE1Bwc,UACErtB,IAAK,GACLD,UAAW,MACXa,WAAY,MACZK,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgBgvB,mBACxB9rB,QAASlD,gBAAgBgvB,oBAE3BS,aACEttB,IAAK,IACLD,UAAW,MACXa,WAAY,MACZK,QAAQ,EACRX,WAAW,EACXI,OAAQ,MAAQ7C,gBAAgBgvB,mBAChC9rB,QAASlD,gBAAgBuJ,WAAa,OAClCvJ,gBAAgBgvB,oBAEtBU,YACEvtB,IAAK,GACLD,UAAW,MACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgBgvB,oBAE1BW,QACExtB,IAAK,EACLD,UAAW,GACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgBgvB,mBACxBxsB,MAAO,GAETotB,SACEztB,IAAK,EACLD,UAAW,MACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgBuJ,WACxB/G,MAAO,GAETqtB,OACE1tB,IAAK,EACLD,UAAW,GACXkB,QAAQ,EACRX,WAAW,EACXI,OAAQ7C,gBAAgB8uB,cACxBtsB,MAAO,IAIL1C,WACJ2P,QAASA,QACT1P,QAASA,kBAGID;;2gGC3JFzL,6BAKX,QAAAA,GAAYV,GAAmB,GAAAnF,EAAA,OAAAC,iBAAAC,KAAA2F,GAC7B7F,EAAAM,2BAAAJ,KAAAK,gBAAAsF,GAAArF,KAAAN,KAAMiF,IADuBiW,WAAA9Y,IAAAsP,uBAAA5R,IAAAuC,UAAA,EAAAzB,UAAA,KAE7B2C,sBAAAmO,uBAAA5R,GAAAob,WAAkBjW,GAFWnF,wEAY7B,MAAAkE,uBAAOhE,KAAPkb,4CAQA,MAAOlX,uBAAAhE,KAAAkb,YAAkB,2BAzBQ/S;;qFCLrC,GAAAi5B,eAAA5hC,uBAAAC,QAAA,mBACA4hC,YAAA7hC,uBAAAC,QAAA,iBACA6hC,MAAA9hC,uBAAAC,QAAA,UAEA8hC,QAAOlgC,WAAaA,YAAAA,QACpBkgC,OAAO/vB,aAAeA,cAAAA,QACtB+vB,OAAO3hC,KAAOA,MAAAA;;mnBCaP,QAAS4hC,oBAAmBC,GAEjC,IAAKA,GAAgBA,GAAgB,EACnC,MAAO,UAGT,IAAMC,GAAQC,KAAKC,MAAMH,EAAeI,kBAElCC,EAAU,GAAIC,MAAoB,IAAfN,GACnBO,EAAUF,EAAQG,gBAElBC,EAAUJ,EAAQK,aAClB5T,EAAKkT,EAAe,EACtBW,EAAQ,EAUZ,OATIC,eAAc9T,GAAM,IAEpB6T,EADEC,cAAc9T,GAAM,EACdA,EAAG+T,QAAQ,GAEXh9B,OAAOipB,GAEjB6T,EAAQ,IAAMA,EAAM35B,MAAM,KAAK,KAGzBi5B,EAAQ,IAAMM,EAAU,IAAME,GAAS33B,QAAQ,UACnD,OAAS63B,EASR,QAASG,yBAAwBL,GAEtC,IAAKA,GAAWA,GAAW,EACzB,MAAO,MAGT,IAAIM,GAAW,IACXC,EAAYP,CAsBhB,OApBAQ,cAAaC,QAAQ,SAAAzoB,GAA6B,GAAAc,GAAA4nB,eAAA1oB,EAAA,GAA3B2oB,EAA2B7nB,EAAA,GAArB8nB,EAAqB9nB,EAAA,GAC5Cpa,EAAQ+gC,KAAKC,MAAMa,EAAYK,EAEnCL,IAAwBK,EAGX,MAATD,GAAgBJ,EAAY,IAC9B7hC,GAAS6hC,GAGP7hC,KACG4hC,EAASO,QAAQ,KAAO,GAChB,MAATF,GAAyB,MAATA,GAAyB,MAATA,KACL,IAA3BL,EAASO,QAAQ,OACnBP,GAAY,KAEdA,GAAQ,GAAA75B,OAAO/H,GAAP+H,OAAek6B,MAIpBL,EAUF,QAASQ,kBAAiBC,EAAoBC,GACnD,IAAKD,GAAoC,gBAAfA,KACrBA,EAAWv7B,MAAMw7B,GACpB,MAAO,EAET,IAAMtwB,GAAQqwB,EAAWx6B,MAAM,IAI/B,OAAgB,MAHFoK,OAAOD,EAAM,IAGQ,GAFnBC,OAAOD,EAAM,IACbC,OAAOD,EAAM,IAWxB,QAASuwB,sBAAqBX,EAAkBY,GACrD,IAAKZ,IAAaA,EAAS96B,MAAM07B,GAC/B,MAAO,EAFmE,IAAAC,GAKjB,GAAInvB,QAC3DkvB,GAAeE,KAAKd,OANoDe,EAAAX,eAAAS,EAAA,GAKnEG,EALmED,EAAA,GAK5DE,EAL4DF,EAAA,GAKlDG,EALkDH,EAAA,GAK5C7B,EAL4C6B,EAAA,GAKrCvB,EALqCuB,EAAA,GAK5BrB,EAL4BqB,EAAA,GAQtEI,EAAM,GAAI5B,MACV6B,EAAS,GAAI7B,MAAK4B,EAOxB,IANAC,EAAOC,YAAYD,EAAOE,cAAgBjxB,OAAO2wB,GAAS,IAC1DI,EAAOG,SAASH,EAAOI,WAAanxB,OAAO4wB,GAAU,IACrDG,EAAOK,QAAQL,EAAOM,UAAYrxB,OAAO6wB,GAAQ,IACjDE,EAAOO,SAASP,EAAOQ,WAAavxB,OAAO6uB,GAAS,IACpDkC,EAAOS,WAAWT,EAAOU,aAAezxB,OAAOmvB,GAAW,IAC1D4B,EAAOW,WAAWX,EAAOzB,aAAetvB,OAAOqvB,GAAW,IACtDA,GAAW58B,OAAO48B,GAASa,QAAQ,KAAO,EAAG,CAC/C,GAAMyB,GAAwD,IAAzC3xB,OAAOA,OAAOqvB,GAAW,GAAGI,QAAQ,EACzDsB,GAAOa,gBAAgBb,EAAOc,kBAAoBF,GAEpD,OAAkB,EAATZ,EAAgBD,GAAO,IAW3B,QAAS1hB,iBACZ0iB,EACAC,EACAxB,GACF,MAAOb,yBACHY,qBAAqBwB,EAAOvB,GAC5BD,qBAAqByB,EAAQxB,IAY5B,QAASnmB,sBACZ0nB,EACAC,EACA1B,GACF,MAAO1B,oBACHwB,iBAAiB2B,EAAOzB,GACxBF,iBACI4B,EAAQ1B,IASX,QAASrzB,SAAQg1B,GAQtB,QAASC,GAAQC,EAAKC,GACpB,GAAIn9B,OAAOk9B,KAASA,EAClBhgC,EAAOigC,GAAQD,MACV,IAAI/4B,MAAMi5B,QAAQF,GACvB,IAAK,GAAIz9B,GAAI,EAAG49B,EAAIH,EAAI19B,OAAQC,EAAI49B,EAAG59B,IACrCw9B,EAAQC,EAAIz9B,GAAI09B,EAAO,IAAM19B,EAAI,KACvB,IAAN49B,IAASngC,EAAOigC,WAEjB,CACL,GAAIG,IAAU,CACd,KAAK,GAAMC,KAAKL,QACPj9B,eAAexH,KAAKykC,EAAKK,KAC9BD,GAAU,EACVL,EAAQC,EAAIK,GAAIJ,EAAOA,EAAO,IAAMI,EAAIA,GAGxCD,IAAWH,IAAMjgC,EAAOigC,QAvBhC,GAAMjgC,KA4BN,OADA+/B,GAAQD,EAAM,IACP9/B,EAQF,QAASkG,WAAU45B,GAExB,GAAIh9B,OAAOg9B,KAAUA,GAAQ74B,MAAMi5B,QAAQJ,GAAO,MAAOA,EACzD,IAAMQ,GAAQ,0BACRtgC,IACN,KAAK,GAAMqgC,KAAKP,GACd,MAAO/8B,eAAexH,KAAKukC,EAAMO,GAAI,CAInC,IAHA,GAAIL,GAAMhgC,EACNigC,EAAO,GACPM,EAAID,EAAM/B,KAAK8B,GACZE,GACLP,EAAMA,EAAIC,KAAUD,EAAIC,GAASM,EAAE,UACnCN,EAAOM,EAAE,IAAMA,EAAE,GACjBA,EAAID,EAAM/B,KAAK8B,EAEjBL,GAAIC,GAAQH,EAAKO,GAGrB,MAAOrgC,GAAO,KAAOA,EAQhB,QAASs9B,eAAckD,GAC5B,MAAI5D,MAAKC,MAAM2D,KAASA,EAAY,EAC7BA,EAAIC,WAAW/8B,MAAM,KAAK,GAAGpB,QAAU,0hBA/OzC,IAAMo+B,oBAAqB,+CAC3B,IAAMC,oBAAqB,gDAC3B,IAAM7D,kBAAmB,GAAK6D,4DAC9B,IAAMC,iBAAkB,GAAK9D,wDAEpC,IAAMa,gBACH,IAAKiD,kBACL,IAAK9D,mBACL,IAAK6D,qBACL,IAAKD","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n} from './cmi/aicc_cmi';\nimport {NAV} from './cmi/scorm12_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement, 'cmi\\\\.student_data\\\\.tries\\\\.\\\\d')) {\n        newChild = new CMITriesObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\nimport {ValidationError} from './exceptions';\nimport ErrorCodes from './constants/error_codes';\nimport APIConstants from './constants/api_constants';\nimport {unflatten} from './utilities';\n\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  #settings = {\n    autocommit: false,\n    autocommitSeconds: 60,\n    lmsCommitUrl: false,\n    dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n    commitRequestDataType: 'application/json;charset=UTF-8',\n    autoProgress: false,\n    logLevel: global_constants.LOG_LEVEL_ERROR,\n  };\n  cmi;\n  startingData: {};\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   * @param {object} settings\n   */\n  constructor(error_codes, settings) {\n    if (new.target === BaseAPI) {\n      throw new TypeError('Cannot construct BaseAPI instances directly');\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n\n    this.settings = settings;\n    this.apiLogLevel = this.settings.logLevel;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Getter for #settings\n   * @return {object}\n   */\n  get settings() {\n    return this.#settings;\n  }\n\n  /**\n   * Setter for #settings\n   * @param {object} settings\n   */\n  set settings(settings: Object) {\n    this.#settings = {...this.#settings, ...settings};\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result = this.storeData(true);\n      if (result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          this.lastErrorCode = e.errorCode;\n          returnValue = global_constants.SCORM_FALSE;\n        } else {\n          if (e.message) {\n            console.error(e.message);\n          } else {\n            console.error(e);\n          }\n          this.throwSCORMError(this.#error_codes.GENERAL);\n        }\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === '0') {\n      if (this.settings.autocommit && !this.#timeout) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000);\n      }\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      const result = this.storeData(false);\n      if (result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, 'HttpRequest', ' Result: ' + returnValue,\n          global_constants.LOG_LEVEL_DEBUG);\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case global_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_DEBUG:\n          if (console.debug) {\n            console.debug(logMessage);\n          } else {\n            console.log(logMessage);\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringMatches(str: String, tester: String) {\n    return str && tester && str.match(tester);\n  }\n\n  /**\n   * Check to see if the specific object has the given property\n   * @param {*} refObject\n   * @param {string} attribute\n   * @return {boolean}\n   * @private\n   */\n  _checkObjectHasProperty(refObject, attribute: String) {\n    return Object.hasOwnProperty.call(refObject, attribute) ||\n        Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(refObject), attribute) ||\n        (attribute in refObject);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    throw new Error(\n        'The getLmsErrorMessageDetails method has not been implemented');\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement) {\n    throw new Error('The getCMIValue method has not been implemented');\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement, _value) {\n    throw new Error('The setCMIValue method has not been implemented');\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return global_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value,\n                  foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          global_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {*}\n   * @abstract\n   */\n  getChildElement(_CMIElement, _value, _foundFirstIndex) {\n    throw new Error('The getChildElement method has not been implemented');\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute];\n      if (refObject === undefined) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[i + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED,\n                uninitializedErrorMessage);\n            break;\n          }\n\n          // Have to update i value to skip the array position\n          i++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(scorm12_error_codes.COUNT_ERROR);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      const CMIElementsMatch = listener.CMIElement === CMIElement;\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        global_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {string}\n   * @abstract\n   */\n  storeData(_calculateTotalTime) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromFlattenedJSON(json, CMIElement) {\n    this.loadFromJSON(unflatten(json), CMIElement);\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : 'cmi';\n\n    this.startingData = json;\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + '.' : '') + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSONString() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @return {object}\n   */\n  renderCMIToJSONObject() {\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.parse(this.renderCMIToJSONString());\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {*}\n   * @abstract\n   */\n  renderCommitCMI(_terminateCommit) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Send the request to the LMS\n   * @param {string} url\n   * @param {object|Array} params\n   * @return {object}\n   */\n  processHttpRequest(url: String, params) {\n    const genericError = {\n      'result': global_constants.SCORM_FALSE,\n      'errorCode': this.#error_codes.GENERAL,\n    };\n\n    const httpReq = new XMLHttpRequest();\n    httpReq.open('POST', url, false);\n    try {\n      if (params instanceof Array) {\n        httpReq.setRequestHeader('Content-Type',\n            'application/x-www-form-urlencoded');\n        httpReq.send(params.join('&'));\n      } else {\n        httpReq.setRequestHeader('Content-Type',\n            this.settings.commitRequestDataType);\n        httpReq.send(JSON.stringify(params));\n      }\n    } catch (e) {\n      return genericError;\n    }\n\n    try {\n      return JSON.parse(httpReq.responseText);\n    } catch (e) {\n      return genericError;\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n    this.apiLog('scheduleCommit', '', 'scheduled',\n        global_constants.LOG_LEVEL_DEBUG);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n      this.apiLog('clearScheduledCommit', '', 'cleared',\n          global_constants.LOG_LEVEL_DEBUG);\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled = false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper.bind(this), when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject, NAV,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm12_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    const result = this.terminate('LMSFinish', false);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== '') {\n        if (this.nav.event === 'continue') {\n          this.processListeners('SequenceNext');\n        } else {\n          this.processListeners('SequencePrevious');\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (originalStatus === 'not attempted') {\n        this.cmi.core.lesson_status = 'completed';\n      }\n\n      if (this.cmi.core.lesson_mode === 'normal') {\n        if (this.cmi.core.credit === 'credit') {\n          if (this.settings.mastery_override &&\n              this.cmi.student_data.mastery_score !== '' &&\n              this.cmi.core.score.raw !== '') {\n            if (parseFloat(this.cmi.core.score.raw) >=\n                parseFloat(this.cmi.student_data.mastery_score)) {\n              this.cmi.core.lesson_status = 'passed';\n            } else {\n              this.cmi.core.lesson_status = 'failed';\n            }\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === 'browse') {\n        if ((this.startingData?.cmi?.core?.lesson_status || '') === '' &&\n            originalStatus === 'not attempted') {\n          this.cmi.core.lesson_status = 'browsed';\n        }\n      }\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      return this.processHttpRequest(this.settings.lmsCommitUrl, commitObject);\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\nimport Responses from './constants/response_constants';\nimport ValidLanguages from './constants/language_constants';\nimport Regex from './constants/regex';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst global_constants = APIConstants.global;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst correct_responses = Responses.correct;\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm2004_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    const result = this.terminate('Terminate', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== '_none_') {\n        switch (this.adl.nav.request) {\n          case 'continue':\n            this.processListeners('SequenceNext');\n            break;\n          case 'previous':\n            this.processListeners('SequencePrevious');\n            break;\n          case 'choice':\n            this.processListeners('SequenceChoice');\n            break;\n          case 'exit':\n            this.processListeners('SequenceExit');\n            break;\n          case 'exitAll':\n            this.processListeners('SequenceExitAll');\n            break;\n          case 'abandon':\n            this.processListeners('SequenceAbandon');\n            break;\n          case 'abandonAll':\n            this.processListeners('SequenceAbandonAll');\n            break;\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (!interaction.type) {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        if (response_type) {\n          let nodes = [];\n          if (response_type?.delimiter) {\n            nodes = String(value).split(response_type.delimiter);\n          } else {\n            nodes[0] = value;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response_type.max) {\n            this.checkCorrectResponseValue(interaction_type, nodes, value);\n          } else if (nodes.length > response_type.max) {\n            this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n                'Data Model Element Pattern Too Long');\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Incorrect Response Type: ' + interaction_type);\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_learner\\\\.\\\\d')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_lms\\\\.\\\\d')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = correct_responses[interaction_type];\n    if (typeof response_type.limit !== 'undefined' || interaction_count <\n        response_type.limit) {\n      let nodes = [];\n      if (response_type?.delimiter) {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (ValidLanguages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      if (this.cmi.mode === 'normal') {\n        if (this.cmi.credit === 'credit') {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              console.debug('Setting Completion Status: Completed');\n              this.cmi.completion_status = 'completed';\n            } else {\n              console.debug('Setting Completion Status: Incomplete');\n              this.cmi.completion_status = 'incomplete';\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              console.debug('Setting Success Status: Passed');\n              this.cmi.success_status = 'passed';\n            } else {\n              console.debug('Setting Success Status: Failed');\n              this.cmi.success_status = 'failed';\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (this.adl.nav.request !== (this.startingData?.adl?.nav?.request) &&\n        this.adl.nav.request !== '_none_') {\n      this.adl.nav.request = encodeURIComponent(this.adl.nav.request);\n      navRequest = true;\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      const result = this.processHttpRequest(this.settings.lmsCommitUrl,\n          commitObject);\n      // check if this is a sequencing call, and then call the necessary JS\n      if (navRequest && result.navRequest !== undefined &&\n          result.navRequest !== '') {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      }\n      return result;\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n  throwWriteOnlyError,\n} from './scorm12_cmi';\n\nconst aicc_constants = APIConstants.aicc;\nconst aicc_regex = Regex.aicc;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(aicc_constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_data = new AICCCMIStudentData();\n    this.evaluation = new CMIEvaluation();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_data?.initialize();\n    this.evaluation?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(aicc_constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, aicc_regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, aicc_regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport Regex from '../constants/regex';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport Regex from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE, allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #suspend_data = '';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ? cmi_children : scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, scorm12_regex.CMIString4096, true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, scorm12_regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime();\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = scorm12_constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = 'not attempted';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, scorm12_regex.CMIString256, true)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, scorm12_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, scorm12_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        this.#session_time,\n        new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nclass CMIStudentPreference extends BaseCMI {\n  /**\n   * Constructor for cmi.student_preference\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = scorm12_constants.student_preference_children;\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, scorm12_regex.CMISInteger) &&\n        check12ValidRange(audio, scorm12_regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, scorm12_regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, scorm12_regex.CMISInteger) &&\n        check12ValidRange(speed, scorm12_regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, scorm12_regex.CMISInteger) &&\n        check12ValidRange(text, scorm12_regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, scorm12_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, scorm12_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, scorm12_regex.CMIDecimal) &&\n        check12ValidRange(weighting, scorm12_regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, scorm12_regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, scorm12_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, scorm12_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, scorm12_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, scorm12_regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, scorm12_regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport Responses from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst learner_responses = Responses.learner;\n\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  #_version = '1.0';\n  #_children = scorm2004_constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '';\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, scorm2004_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, scorm2004_regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, scorm2004_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, scorm2004_regex.CMIString64000, true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    return Util.addTwoDurations(\n        this.#total_time,\n        this.#session_time,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = scorm2004_constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, scorm2004_regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, scorm2004_regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, scorm2004_regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, scorm2004_regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, scorm2004_regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, scorm2004_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, scorm2004_regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type) {\n        if (response_type?.delimiter) {\n          nodes = learner_response.split(response_type.delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n          const formatRegex = new RegExp(response_type.format);\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              const values = nodes[i].split(response_type.delimiter2);\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throwTypeMismatchError();\n                } else {\n                  if (!values[1].match(new RegExp(response_type.format2))) {\n                    throwTypeMismatchError();\n                  }\n                }\n              } else {\n                throwTypeMismatchError();\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (nodes[i] !== '' && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throwTypeMismatchError();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, scorm2004_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, scorm2004_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, scorm2004_regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, scorm2004_regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: scorm2004_constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(scaled, scorm2004_regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, scorm2004_regex.CMILangString4000, true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, scorm2004_regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, scorm2004_regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, scorm2004_regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nconst global = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\nconst scorm12 = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    tries_children: 'time,status,score',\n  },\n};\n\nconst scorm2004 = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst APIConstants = {\n  global: global,\n  scorm12: scorm12,\n  aicc: aicc,\n  scorm2004: scorm2004,\n};\n\nexport default APIConstants;\n","// @flow\nconst global = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nconst scorm12 = {\n  ...global, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst scorm2004 = {\n  ...global, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst ErrorCodes = {\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default ErrorCodes;\n","const ValidLanguages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n\nexport default ValidLanguages;\n","// @flow\n\nconst scorm12 = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(passed|completed|failed|incomplete|browsed)$',\n  CMIStatus2: '^(passed|completed|failed|incomplete|browsed|not attempted)$',\n  CMIExit: '^(time-out|suspend|logout|)$',\n  CMIType: '^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nconst scorm2004 = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\.]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000})$',\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(completed|incomplete|not attempted|unknown)$',\n  CMISStatus: '^(passed|failed|unknown)$',\n  CMIExit: '^(time-out|suspend|logout|normal)$',\n  CMIType: '^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n\nconst Regex = {\n  aicc: aicc,\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default Regex;\n","// @flow\nimport Regex from './regex';\n\nconst scorm2004_regex = Regex.scorm2004;\n\nconst learner = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nconst correct = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nconst Responses = {\n  learner: learner,\n  correct: correct,\n};\n\nexport default Responses;\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","import Scorm2004API from './Scorm2004API';\nimport Scorm12API from './Scorm12API';\nimport AICC from './AICC';\n\nwindow.Scorm12API = Scorm12API;\nwindow.Scorm2004API = Scorm2004API;\nwindow.AICC = AICC;\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = '';\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n    msStr = '.' + msStr.split('.')[1];\n  }\n\n  return (hours + ':' + minutes + ':' + seconds).replace(/\\b\\d\\b/g,\n      '0$&') + msStr;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  const now = new Date();\n  const anchor = new Date(now);\n  anchor.setFullYear(anchor.getFullYear() + Number(years || 0));\n  anchor.setMonth(anchor.getMonth() + Number(months || 0));\n  anchor.setDate(anchor.getDate() + Number(days || 0));\n  anchor.setHours(anchor.getHours() + Number(hours || 0));\n  anchor.setMinutes(anchor.getMinutes() + Number(minutes || 0));\n  anchor.setSeconds(anchor.getSeconds() + Number(seconds || 0));\n  if (seconds && String(seconds).indexOf('.') > 0) {\n    const milliseconds = Number(Number(seconds) % 1).toFixed(6) * 1000.0;\n    anchor.setMilliseconds(anchor.getMilliseconds() + milliseconds);\n  }\n  return ((anchor * 1.0) - now) / 1000.0;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  return getSecondsAsISODuration(\n      getDurationAsSeconds(first, durationRegex) +\n      getDurationAsSeconds(second, durationRegex),\n  );\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  return getSecondsAsHHMMSS(\n      getTimeAsSeconds(first, timeRegex) +\n      getTimeAsSeconds(\n          second, timeRegex),\n  );\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n\n/**\n * Counts the number of decimal places\n * @param {number} num\n * @return {number}\n */\nexport function countDecimals(num: number) {\n  if (Math.floor(num) === num) return 0;\n  return num.toString().split('.')[1].length || 0;\n}\n"]}
