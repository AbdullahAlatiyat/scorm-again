{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/field_values.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/utilities.js"],"names":["_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","AICC","settings","_this","_classCallCheck","this","finalSettings","_objectSpread","mastery_override","_possibleConstructorReturn","_getPrototypeOf","call","cmi","CMI","nav","NAV","CMIElement","value","foundFirstIndex","newChild","_get","prototype","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","lmsCommitUrl","dataCommitFormat","_defineProperty","constructor","TypeError","currentState","global_constants","STATE_NOT_INITIALIZED","apiLogLevel","LOG_LEVEL_ERROR","lastErrorCode","listenerArray","_classPrivateFieldSet","callbackName","initializeMessage","terminationMessage","returnValue","SCORM_FALSE","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","STATE_INITIALIZED","SCORM_TRUE","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","e","ValidationError","errorCode","GENERAL","undefined","String","scheduleCommit","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","result","storeData","LOG_LEVEL_DEBUG","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","console","error","LOG_LEVEL_WARNING","warn","info","message","messageString","fillChars","length","i","j","str","tester","match","refObject","attribute","Object","hasOwnProperty","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","parseInt","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","scorm12_error_codes","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","replace","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","errorNumber","success","_calculateTotalTime","json","startingData","key","currentCMIElement","loadFromJSON","JSON","stringify","parse","renderCMIToJSONString","_terminateCommit","getCurrentTotalTime","url","params","httpReq","XMLHttpRequest","open","setRequestHeader","Array","send","join","responseText","when","ScheduledCommit","cancel","API","_API","_cancelled","_timeout2","setTimeout","wrapper","clearTimeout","commit","_BaseAPI2","_scorm12_cmi","Utilities","_interopRequireWildcard","constants","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","flattened","flatten","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","debug","processHttpRequest","log","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","Scorm2004API","scorm2004_error_codes","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","parts","Number","interaction","interactions","type","DEPENDENCY_NOT_ESTABLISHED","interaction_type","interaction_count","correct_responses","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","max","checkCorrectResponseValue","CMICommentsObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","scorm2004_regex","CMILangcr","lang","valid_languages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","request","encodeURIComponent","Function","Scorm12CMI","aicc_constants","regex","aicc_regex","cmi_children","AICCCMIStudentData","evaluation","CMIEvaluation","_this$student_data","_this$evaluation","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","student_preference","_this2","CMIEvaluationComments","_this$comments","BaseCMI","comments_children","INVALID_SET_VALUE","_this3","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","tries_children","_this4","_status","_time","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","status","time","check12ValidFormat","CMIStatus2","CMITime","_this5","_content","_location","_time2","content","location","CMIString256","_this6","_event","event","throwWriteOnlyError","NAVEvent","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","_initialized","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","scorm12_regex","CMIDecimal","min","_children","_ref2","children","_errorCode","_children3","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_suspend_data","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIStudentPreference","CMIInteractions","_this$core","_this$objectives","_this$student_prefere","_this$interactions","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","addHHMMSSTimeStrings","CMITimespan","student_id","student_name","lesson_location","entry","exit","session_time","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","student_preference_children","_audio","_language","_speed","_text","audio","language","speed","text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_id2","_this7","_id3","_this8","_pattern","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","Util","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","addTwoDurations","learner_id","learner_name","mode","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","learner_responses","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_this$score2","_scaled","scaled_range","readOnlyAfterInit","arguments","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","_this9","ADLNav","_this$nav","_this10","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_continue","_previous","_temp","_target","_temp2","previous","continue","_","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","common_values","validResult","invalidResult","valid0To1Range","invalid0To1Range","valid0To100Range","invalid0To100Range","validScaledRange","invalidScaledRange","validIntegerScaledRange","invalidIntegerScaledRange","scorm12_values","validLessonStatus","invalidLessonStatus","validExit","invalidExit","validType","invalidType","validSpeedRange","invalidSpeedRange","validScoreRange","invalidScoreRange","validTime","invalidTime","validTimespan","invalidTimespan","scorm2004_values","validTimestamps","invalidTimestamps","validCStatus","invalidCStatus","validSStatus","invalidSStatus","validISO8601Durations","invalidISO8601Durations","validComment","repeat","invalidComment","validDescription","invalidDescription","validNavRequest","invalidNavRequest","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","_field_values","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","other","getSecondsAsHHMMSS","totalSeconds","hours","Math","floor","SECONDS_PER_HOUR","dateObj","Date","minutes","getUTCMinutes","seconds","getSeconds","toString","padStart","getSecondsAsISODuration","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","indexOf","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","months","days","now","anchor","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","milliseconds","toFixed","setMilliseconds","getMilliseconds","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","unflatten","m","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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BACE,IACA,IACA,MAEFC,2BACE,OACA,OACA,MACA,OACA,OACA,KACA,QAISC,eAAcxnB,iBACtB6mB,kBACDY,mBACE,SACA,YACA,SACA,aACA,WAEFC,qBACE,SACA,IACA,IACA,IACA,OACA,QACA,YAGFC,WACE,WACA,UACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,WACA,cACA,aACA,SACA,WAEFC,aACE,UACA,QACA,UAGFC,iBACE,IACA,KACA,MACA,KACA,MACA,QAEFC,mBACE,UACA,OACA,OACA,MACA,UACA,UAGFC,iBACE,IACA,QACA,OAEFC,mBACE,UACA,OACA,KACA,MACA,UACA,UAEFf,oBACE,UACA,OACA,MAGFgB,WACE,WACA,WACA,YAEFC,aACE,WACA,cACA,UACA,eACA,iBAGFC,eACE,WACA,cACA,WACA,YAEFC,iBACE,UACA,eACA,wDAKC,IAAMC,kBAAgBvoB,iBACxB6mB,kBAED2B,iBACE,aACA,mBACA,yBACA,cAEFC,mBACE,cACA,0BACA,yBACA,aACA,aACA,YACA,UACA,aAGFC,cACE,YACA,aACA,gBACA,WAEFC,gBACE,WACA,SACA,UAGFC,cACE,SACA,SACA,WAEFC,gBACE,WACA,aACA,IACA,KAGFlB,WACE,WACA,UACA,SACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,eACA,WACA,cACA,aACA,SACA,UACA,SAEFC,aACE,UACA,QACA,UAGFG,iBACE,IACA,KACA,MACA,SACA,KACA,SAEFC,mBACE,UACA,OACA,UACA,UAGFY,uBACE,mBACA,UACA,MACA,SAEFC,yBACE,WACA,OACA,QACA,KAGFC,cACE,+BACA,kCACA,sBAAwB,IAAIC,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFC,gBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAID,OAAO,MACnC,uBAAyB,IAAIA,OAAO,OAGtCE,kBACE,+BACA,kCACA,sBAAwB,IAAIF,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFG,oBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAIH,OAAO,KACnC,uBAAyB,IAAIA,OAAO,MAGtCI,iBACE,WACA,WACA,OACA,UACA,UACA,aACA,cAEFC,mBACE,QACA,OACA,OACA;;kGC1UC,IAAMnV,kBACXoV,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAM3O,GAAM,KAClE4O,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,M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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n  NAV,\n} from './cmi/aicc_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement, 'cmi\\\\.student_data\\\\.tries\\\\.\\\\d')) {\n        newChild = new CMITriesObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\nimport {ValidationError} from './exceptions';\nimport {scorm12_error_codes} from './constants/error_codes';\nimport {global_constants} from './constants/api_constants';\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  #settings = {\n    autocommit: false,\n    autocommitSeconds: 60,\n    lmsCommitUrl: false,\n    dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n  };\n  cmi;\n  startingData: {};\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   * @param {object} settings\n   */\n  constructor(error_codes, settings) {\n    if (new.target === BaseAPI) {\n      throw new TypeError('Cannot construct BaseAPI instances directly');\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.apiLogLevel = global_constants.LOG_LEVEL_ERROR;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n\n    this.settings = settings;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Getter for #settings\n   * @return {object}\n   */\n  get settings() {\n    return this.#settings;\n  }\n\n  /**\n   * Setter for #settings\n   * @param {object} settings\n   */\n  set settings(settings: Object) {\n    this.#settings = {...this.#settings, ...settings};\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      this.currentState = global_constants.STATE_TERMINATED;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          this.lastErrorCode = e.errorCode;\n          returnValue = global_constants.SCORM_FALSE;\n        } else {\n          this.throwSCORMError(this.#error_codes.GENERAL);\n        }\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === '0') {\n      if (this.#settings.autocommit && this.#timeout === undefined) {\n        this.scheduleCommit(this.#settings.autocommitSeconds * 1000);\n      }\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      const result = this.storeData(false);\n      if (result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, 'HttpRequest', ' Result: ' + returnValue,\n          global_constants.LOG_LEVEL_DEBUG);\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case global_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringMatches(str: String, tester: String) {\n    return str && tester && str.match(tester);\n  }\n\n  /**\n   * Check to see if the specific object has the given property\n   * @param {*} refObject\n   * @param {string} attribute\n   * @return {boolean}\n   * @private\n   */\n  _checkObjectHasProperty(refObject, attribute: String) {\n    return Object.hasOwnProperty.call(refObject, attribute) ||\n        Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(refObject), attribute) ||\n        (attribute in refObject);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    throw new Error(\n        'The getLmsErrorMessageDetails method has not been implemented');\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement) {\n    throw new Error('The getCMIValue method has not been implemented');\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement, _value) {\n    throw new Error('The setCMIValue method has not been implemented');\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return global_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value,\n                  foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          global_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {*}\n   * @abstract\n   */\n  getChildElement(_CMIElement, _value, _foundFirstIndex) {\n    throw new Error('The getChildElement method has not been implemented');\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute];\n      if (!refObject) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[i + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED,\n                uninitializedErrorMessage);\n            break;\n          }\n\n          // Have to update i value to skip the array position\n          i++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(scorm12_error_codes.COUNT_ERROR);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      const CMIElementsMatch = listener.CMIElement === CMIElement;\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        global_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {string}\n   * @abstract\n   */\n  storeData(_calculateTotalTime) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement || 'cmi';\n\n    this.startingData = json;\n\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = CMIElement + '.' + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSONString() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @return {object}\n   */\n  renderCMIToJSONObject() {\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.parse(this.renderCMIToJSONString());\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {*}\n   * @abstract\n   */\n  renderCommitCMI(_terminateCommit) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Gets the current total time as total_time + session_time\n   * APIs that inherit BaseAPI should override this function\n   */\n  getCurrentTotalTime() {\n    this.cmi.getCurrentTotalTime();\n  }\n\n  /**\n   * Send the request to the LMS\n   * @param {string} url\n   * @param {object|Array} params\n   * @return {object}\n   */\n  processHttpRequest(url: String, params) {\n    const httpReq = new XMLHttpRequest();\n    httpReq.open('POST', url, false);\n    httpReq.setRequestHeader('Content-Type',\n        'application/x-www-form-urlencoded');\n    try {\n      if (params instanceof Array) {\n        httpReq.send(params.join('&'));\n      } else {\n        httpReq.send(params);\n      }\n    } catch (e) {\n      return {\n        'result': global_constants.SCORM_FALSE,\n        'errorCode': this.#error_codes.GENERAL,\n      };\n    }\n\n    return JSON.parse(httpReq.responseText);\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled: false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper, when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport {global_constants, scorm12_constants} from './constants/api_constants';\nimport {scorm12_error_codes} from './constants/error_codes';\n\nconst constants = scorm12_constants;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm12_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    return this.terminate('LMSFinish', false);\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.core.total_time = this.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (originalStatus === 'not attempted') {\n        this.cmi.core.lesson_status = 'completed';\n      }\n\n      if (this.cmi.core.lesson_mode === 'normal') {\n        if (this.cmi.core.credit === 'credit') {\n          if (this.settings.mastery_override &&\n              this.cmi.student_data.mastery_score !== '' &&\n              this.cmi.core.score.raw !== '') {\n            if (parseFloat(this.cmi.core.score.raw) >=\n                parseFloat(this.cmi.student_data.mastery_score)) {\n              this.cmi.core.lesson_status = 'passed';\n            } else {\n              this.cmi.core.lesson_status = 'failed';\n            }\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === 'browse') {\n        if ((this.startingData?.cmi?.core?.lesson_status || '') === '' &&\n            originalStatus === 'not attempted') {\n          this.cmi.core.lesson_status = 'browsed';\n        }\n      }\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      return this.processHttpRequest(this.settings.lmsCommitUrl, commitObject);\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Utilities from './utilities';\nimport {global_constants, scorm2004_constants} from './constants/api_constants';\nimport {scorm2004_error_codes} from './constants/error_codes';\nimport {correct_responses} from './constants/response_constants';\nimport {valid_languages} from './constants/language_constants';\nimport {scorm2004_regex} from './constants/regex';\n\nconst constants = scorm2004_constants;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm2004_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    return this.terminate('Terminate', true);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (typeof interaction.type === 'undefined') {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        let nodes = [];\n        if (response_type.delimiter !== '') {\n          nodes = String(value).split(response_type.delimiter);\n        } else {\n          nodes[0] = value;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          this.checkCorrectResponseValue(interaction_type, nodes, value);\n        } else if (nodes.length > response_type.max) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Too Long');\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_learner\\\\.\\\\d')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_lms\\\\.\\\\d')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = scorm2004_constants.correct_responses[interaction_type];\n    if (typeof response_type.limit !== 'undefined' || interaction_count <\n        response_type.limit) {\n      let nodes = [];\n      if (response_type.delimiter !== '') {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response.delimiter2 !== undefined) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (valid_languages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmi = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmi.total_time = this.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmi);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmi);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmi;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      if (this.cmi.lesson_mode === 'normal') {\n        if (this.cmi.credit === 'credit') {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = 'completed';\n            } else {\n              this.cmi.completion_status = 'incomplete';\n            }\n          }\n          if (this.cmi.scaled_passing_score !== null &&\n              this.cmi.score.scaled !== '') {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = 'passed';\n            } else {\n              this.cmi.success_status = 'failed';\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (this.adl.nav.request !== (this.startingData?.adl?.nav?.request || '')) {\n      this.adl.nav.request = encodeURIComponent(this.adl.nav.request);\n      navRequest = true;\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      const result = this.processHttpRequest(this.settings.lmsCommitUrl,\n          commitObject);\n      // check if this is a sequencing call, and then call the necessary JS\n      if (navRequest && result.navRequest !== undefined &&\n          result.navRequest !== '') {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      }\n      return result;\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport {aicc_constants} from '../constants/api_constants';\nimport {aicc_regex} from '../constants/regex';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n  throwWriteOnlyError,\n} from './scorm12_cmi';\n\nconst constants = aicc_constants;\nconst regex = aicc_regex;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_data = new AICCCMIStudentData();\n    this.evaluation = new CMIEvaluation();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_data?.initialize();\n    this.evaluation?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport {scorm12_regex} from '../constants/regex';\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    return {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {scorm12_regex} from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\n\nconst constants = scorm12_constants;\nconst regex = scorm12_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE, allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #suspend_data = '';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ? cmi_children : constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, regex.CMIString4096)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime();\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = 'not attempted';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, regex.CMIString256)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        this.#session_time,\n        new RegExp(scorm12_regex.CMITimespan)\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      total_time: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'total_time': this.total_time,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nclass CMIStudentPreference extends BaseCMI {\n  /**\n   * Constructor for cmi.student_preference\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = constants.student_preference_children;\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, regex.CMISInteger) &&\n        check12ValidRange(audio, regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, regex.CMISInteger) &&\n        check12ValidRange(speed, regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, regex.CMISInteger) &&\n        check12ValidRange(text, regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, regex.CMIDecimal) &&\n        check12ValidRange(weighting, regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm2004_constants} from '../constants/api_constants';\nimport {scorm2004_regex} from '../constants/regex';\nimport {scorm2004_error_codes} from '../constants/error_codes';\nimport {learner_responses} from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst constants = scorm2004_constants;\nconst regex = scorm2004_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  #_version = '1.0';\n  #_children = constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '0';\n\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, regex.CMIString64000)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    return Util.addTwoDurations(\n        this.#total_time,\n        this.#session_time,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string,\n   *      total_time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n      'total_time': this.total_time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type.delimiter !== '') {\n        nodes = learner_response.split(response_type.delimiter);\n      } else {\n        nodes[0] = learner_response;\n      }\n\n      if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n        const formatRegex = new RegExp(response_type.format);\n        for (let i = 0; i < nodes.length; i++) {\n          if (typeof response_type.delimiter2 !== 'undefined') {\n            const values = nodes[i].split(response_type.delimiter2);\n            if (values.length === 2) {\n              if (!values[0].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (!values[1].match(new RegExp(response_type.format2))) {\n                  throwTypeMismatchError();\n                }\n              }\n            } else {\n              throwTypeMismatchError();\n            }\n          } else {\n            if (!nodes[i].match(formatRegex)) {\n              throwTypeMismatchError();\n            } else {\n              if (nodes[i] !== '' && response_type.unique) {\n                for (let j = 0; j < i; j++) {\n                  if (nodes[i] === nodes[j]) {\n                    throwTypeMismatchError();\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, regex.CMIDecimal) &&\n        check2004ValidRange(scaled, regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, regex.CMILangString4000, true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nexport const global_constants = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\nexport const scorm12_constants = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nexport const aicc_constants = {\n  ...scorm12_constants, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    tries_children: 'time,status,score',\n  },\n};\n\nexport const scorm2004_constants = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n","// @flow\nexport const error_codes = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_error_codes = {\n  ...error_codes, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nexport const scorm2004_error_codes = {\n  ...error_codes, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n","const common_values = {\n  validResult: [\n    'correct',\n    'wrong',\n    'unanticipated',\n    'neutral',\n  ],\n  invalidResult: [\n    '-10000',\n    '10000',\n    'invalid',\n  ],\n\n  valid0To1Range: [\n    '0.0',\n    '0.25',\n    '0.5',\n    '1.0',\n  ],\n  invalid0To1Range: [\n    '-1',\n    '-0.1',\n    '1.1',\n    '.25',\n  ],\n\n  valid0To100Range: [\n    '1',\n    '50',\n    '100',\n  ],\n  invalid0To100Range: [\n    'invalid',\n    'a100',\n    '-1',\n  ],\n\n  validScaledRange: [\n    '1',\n    '0.5',\n    '0',\n    '-0.5',\n    '-1',\n  ],\n  invalidScaledRange: [\n    '-101',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n\n  validIntegerScaledRange: [\n    '1',\n    '0',\n    '-1',\n  ],\n  invalidIntegerScaledRange: [\n    '-101',\n    '-0.5',\n    '0.5',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n};\n\nexport const scorm12_values = {\n  ...common_values, ...{\n    validLessonStatus: [\n      'passed',\n      'completed',\n      'failed',\n      'incomplete',\n      'browsed',\n    ],\n    invalidLessonStatus: [\n      'Passed',\n      'P',\n      'F',\n      'p',\n      'true',\n      'false',\n      'complete',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validSpeedRange: [\n      '1',\n      '50',\n      '100',\n      '-1',\n      '-50',\n      '-100',\n    ],\n    invalidSpeedRange: [\n      'invalid',\n      'a100',\n      '-101',\n      '101',\n      '-100000',\n      '100000',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50.25',\n      '100',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-1',\n      '101',\n      '-100000',\n      '100000',\n    ],\n    invalid0To100Range: [\n      'invalid',\n      'a100',\n      '-2',\n    ],\n\n    validTime: [\n      '10:06:57',\n      '23:59:59',\n      '00:00:00',\n    ],\n    invalidTime: [\n      '47:59:59',\n      '00:00:01.56',\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n\n    validTimespan: [\n      '10:06:57',\n      '00:00:01.56',\n      '23:59:59',\n      '47:59:59',\n    ],\n    invalidTimespan: [\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n  },\n};\n\nexport const scorm2004_values = {\n  ...common_values, ...{\n    // valid field values\n    validTimestamps: [\n      '2019-06-25',\n      '2019-06-25T23:59',\n      '2019-06-25T23:59:59.99',\n      '1970-01-01',\n    ],\n    invalidTimestamps: [\n      '2019-06-25T',\n      '2019-06-25T23:59:59.999',\n      '2019-06-25T25:59:59.99',\n      '2019-13-31',\n      '1969-12-31',\n      '-00:00:30',\n      '0:50:30',\n      '23:00:30.',\n    ],\n\n    validCStatus: [\n      'completed',\n      'incomplete',\n      'not attempted',\n      'unknown',\n    ],\n    invalidCStatus: [\n      'complete',\n      'passed',\n      'failed',\n    ],\n\n    validSStatus: [\n      'passed',\n      'failed',\n      'unknown',\n    ],\n    invalidSStatus: [\n      'complete',\n      'incomplete',\n      'P',\n      'f',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n      'normal',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'long-fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n      'other',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50',\n      '100',\n      '-10000',\n      '-1',\n      '10000',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-100000',\n      '100000',\n    ],\n\n    validISO8601Durations: [\n      'P1Y34DT23H45M15S',\n      'PT1M45S',\n      'P0S',\n      'PT75M',\n    ],\n    invalidISO8601Durations: [\n      '00:08:45',\n      '-P1H',\n      '1y45D',\n      '0',\n    ],\n\n    validComment: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4000),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidComment: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4001),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(3999),\n    ],\n\n    validDescription: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(250),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidDescription: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(251),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(249),\n    ],\n\n    validNavRequest: [\n      'previous',\n      'continue',\n      'exit',\n      'exitAll',\n      'abandon',\n      'abandonAll',\n      'suspendAll',\n    ],\n    invalidNavRequest: [\n      'close',\n      'quit',\n      'next',\n      'before',\n    ],\n  },\n};\n","export const valid_languages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n","// @flow\n\nimport {scorm12_values, scorm2004_values} from './field_values';\n\nexport const scorm12_regex = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(' + scorm12_values.validLessonStatus.join('|') + ')$',\n  CMIStatus2: '^(' + scorm12_values.validLessonStatus.join('|') + '|not attempted)$',\n  CMIExit: '^(' + scorm12_values.validExit.join('|') + '|)$',\n  CMIType: '^(' + scorm12_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm12_values.validResult.join('|') + '|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nexport const aicc_regex = {\n  ...scorm12_regex, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nexport const scorm2004_regex = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\.]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000})$',\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(' + scorm2004_values.validCStatus.join('|') + ')$',\n  CMISStatus: '^(' + scorm2004_values.validSStatus.join('|') + ')$',\n  CMIExit: '^(' + scorm2004_values.validExit.join('|') + ')$',\n  CMIType: '^(' + scorm2004_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm2004_values.validResult.join('|') + '|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(' + scorm2004_values.validNavRequest.join('|') + '|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n","// @flow\nimport {scorm2004_regex} from './regex';\n\nexport const learner_responses = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nexport const correct_responses = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds() + (totalSeconds % 1.0);\n\n  return hours.toString().padStart(2, '0') + ':' +\n      minutes.toString().padStart(2, '0') + ':' +\n      seconds.toString().padStart(2, '0');\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  const now = new Date();\n  const anchor = new Date(now);\n  anchor.setFullYear(anchor.getFullYear() + Number(years || 0));\n  anchor.setMonth(anchor.getMonth() + Number(months || 0));\n  anchor.setDate(anchor.getDate() + Number(days || 0));\n  anchor.setHours(anchor.getHours() + Number(hours || 0));\n  anchor.setMinutes(anchor.getMinutes() + Number(minutes || 0));\n  anchor.setSeconds(anchor.getSeconds() + Number(seconds || 0));\n  if (seconds && String(seconds).indexOf('.') > 0) {\n    const milliseconds = Number(Number(seconds) % 1).toFixed(6) * 1000.0;\n    anchor.setMilliseconds(anchor.getMilliseconds() + milliseconds);\n  }\n\n  return ((anchor * 1.0) - now) / 1000.0;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  const firstSeconds = getDurationAsSeconds(first, durationRegex);\n  const secondSeconds = getDurationAsSeconds(second, durationRegex);\n\n  return getSecondsAsISODuration(firstSeconds + secondSeconds);\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  const firstSeconds = getTimeAsSeconds(first, timeRegex);\n  const secondSeconds = getTimeAsSeconds(second, timeRegex);\n  return getSecondsAsHHMMSS(firstSeconds + secondSeconds);\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n"]}