{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/lodash.debounce/index.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/exports.js","src/utilities.js"],"names":["debounce","func","wait","options","invokeFunc","time","args","lastArgs","thisArg","lastThis","undefined","lastInvokeTime","result","apply","leadingEdge","timerId","setTimeout","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","nativeMin","maxWait","shouldInvoke","now","trailingEdge","trailing","cancel","clearTimeout","flush","debounced","isInvoking","arguments","this","TypeError","FUNC_ERROR_TEXT","toNumber","isObject","nativeMax","value","type","isObjectLike","isSymbol","objectToString","call","symbolTag","NAN","other","valueOf","replace","reTrim","isBinary","reIsBinary","test","reIsOctal","freeParseInt","slice","reIsBadHex","parseInt","freeGlobal","global","Object","freeSelf","self","root","Function","objectProto","prototype","toString","Math","max","min","Date","module","exports","_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","_scorm12_cmi","AICC","settings","_this","_classCallCheck","finalSettings","_objectSpread","mastery_override","_super","cmi","CMI","nav","NAV","CMIElement","foundFirstIndex","newChild","_get","_getPrototypeOf","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","CMIAttemptRecordsObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","_utilities","_lodash","global_constants","APIConstants","scorm12_error_codes","ErrorCodes","scorm12","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","asyncCommit","sendBeaconCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","LOG_LEVEL_ERROR","selfReportSessionTime","responseHandler","xhr","JSON","parse","responseText","hasOwnProperty","status","SCORM_TRUE","SCORM_FALSE","errorCode","_defineProperty","constructor","currentState","STATE_NOT_INITIALIZED","lastErrorCode","listenerArray","_classPrivateFieldSet","apiLogLevel","callbackName","initializeMessage","terminationMessage","returnValue","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","setStartTime","STATE_INITIALIZED","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","storeData","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","String","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","e","ValidationError","message","console","error","GENERAL","scheduleCommit","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","LOG_LEVEL_DEBUG","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","LOG_LEVEL_WARNING","warn","info","debug","log","messageString","fillChars","length","i","j","str","tester","match","refObject","attribute","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","substring","indexOf","errorNumber","success","_calculateTotalTime","json","loadFromJSON","unflatten","startingData","key","currentCMIElement","stringify","renderCMIToJSONString","_terminateCommit","url","params","immediate","process","genericError","blob","headers","Array","Blob","join","navigator","sendBeacon","httpReq","XMLHttpRequest","open","setRequestHeader","send","when","ScheduledCommit","API","_API","_cancelled","_timeout2","wrapper","bind","commit","_BaseAPI2","Utilities","_interopRequireWildcard","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","event","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","getCurrentTotalTime","flattened","flatten","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","processHttpRequest","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","scorm2004_error_codes","correct_responses","Responses","correct","scorm2004_regex","Regex","Scorm2004API","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","request","parts","Number","interaction","interactions","interaction_type","interaction_count","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","checkCorrectResponseValue","DEPENDENCY_NOT_ESTABLISHED","CMICommentsObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","CMILangcr","lang","ValidLanguages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","mode","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","encodeURIComponent","Scorm12CMI","aicc_constants","aicc","aicc_regex","cmi_children","student_preference","AICCStudentPreferences","AICCCMIStudentData","student_demographics","CMIStudentDemographics","evaluation","CMIEvaluation","paths","CMIPaths","_this$student_prefere","_this$student_data","_this$student_demogra","_this$evaluation","_this$paths","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","_this2","_super2","CMIEvaluationComments","_this$comments","BaseCMI","_super3","comments_children","INVALID_SET_VALUE","_this3","_super4","student_preference_children","_lesson_type","_text_color","_text_location","_text_size","_video","windows","children","_this$windows","audio","language","lesson_type","speed","text","text_color","text_location","text_size","video","check12ValidFormat","CMIString256","CMIStudentPreference","_this4","_super5","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","_this5","_super6","_children","student_demographics_children","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","class","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","clazz","_super7","paths_children","CMIPathsObject","_this6","_super8","_location_id","_date","_time","_status","_why_left","_time_in_element","location_id","date","why_left","time_in_element","CMITime","CMIStatus2","_super9","tries_children","_this7","_super10","_status2","_time2","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","CMIAttemptRecords","_super11","attempt_records_children","_this8","_super12","_lesson_status","_this$score2","_this9","_super13","_content","_location","_time3","content","location","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","scorm12_regex","_initialized","_start_time","getTime","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","CMIDecimal","_ref2","_errorCode","_children3","throwWriteOnlyError","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIInteractions","_this$core","_this$objectives","_this$interactions","start_time","_this$core2","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","sessionTime","startTime","seconds","Util","getSecondsAsHHMMSS","addHHMMSSTimeStrings","CMITimespan","student_id","student_name","lesson_location","entry","exit","session_time","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","_audio","_language","_speed","_text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_id2","_id3","_pattern","_event","NAVEvent","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","learner_responses","learner","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","getSecondsAsISODuration","addTwoDurations","learner_id","learner_name","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_scaled","scaled_range","readOnlyAfterInit","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","ADLNav","_this$nav","_this10","_super14","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_super15","_continue","_previous","_temp","_target","_temp2","previous","continue","_","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","_Scorm2004API","_Scorm12API","_AICC","window","totalSeconds","hours","floor","SECONDS_PER_HOUR","dateObj","minutes","getUTCMinutes","getSeconds","msStr","countDecimals","toFixed","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","days","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","regex","m","num","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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AAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMhM,GAAM,KAClEiM,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIAttemptRecordsObject,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n} from './cmi/aicc_cmi';\nimport {NAV} from './cmi/scorm12_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.tries\\\\.\\\\d+')) {\n        newChild = new CMITriesObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+')) {\n        newChild = new CMIAttemptRecordsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\nimport {ValidationError} from './exceptions';\nimport ErrorCodes from './constants/error_codes';\nimport APIConstants from './constants/api_constants';\nimport {unflatten} from './utilities';\nimport debounce from 'lodash.debounce';\n\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  #settings = {\n    autocommit: false,\n    autocommitSeconds: 10,\n    asyncCommit: false,\n    sendBeaconCommit: false,\n    lmsCommitUrl: false,\n    dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n    commitRequestDataType: 'application/json;charset=UTF-8',\n    autoProgress: false,\n    logLevel: global_constants.LOG_LEVEL_ERROR,\n    selfReportSessionTime: false,\n    responseHandler: function(xhr) {\n      let result;\n      if (typeof xhr !== 'undefined') {\n        result = JSON.parse(xhr.responseText);\n        if (result === null || !{}.hasOwnProperty.call(result, 'result')) {\n          result = {};\n          if (xhr.status === 200) {\n            result.result = global_constants.SCORM_TRUE;\n          } else {\n            result.result = global_constants.SCORM_FALSE;\n            result.errorCode = 101;\n          }\n        }\n      }\n      return result;\n    },\n  };\n  cmi;\n  startingData: {};\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   * @param {object} settings\n   */\n  constructor(error_codes, settings) {\n    if (new.target === BaseAPI) {\n      throw new TypeError('Cannot construct BaseAPI instances directly');\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n\n    this.settings = settings;\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Getter for #error_codes\n   * @return {object}\n   */\n  get error_codes() {\n    return this.#error_codes;\n  }\n\n  /**\n   * Getter for #settings\n   * @return {object}\n   */\n  get settings() {\n    return this.#settings;\n  }\n\n  /**\n   * Setter for #settings\n   * @param {object} settings\n   */\n  set settings(settings: Object) {\n    this.#settings = {...this.#settings, ...settings};\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result = this.storeData(true);\n      if (!this.settings.sendBeaconCommit && !this.settings.asyncCommit &&\n          typeof result.errorCode !== 'undefined' && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = (typeof result !== 'undefined' && result.result) ?\n          result.result : global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          this.lastErrorCode = e.errorCode;\n          returnValue = global_constants.SCORM_FALSE;\n        } else {\n          if (e.message) {\n            console.error(e.message);\n          } else {\n            console.error(e);\n          }\n          this.throwSCORMError(this.#error_codes.GENERAL);\n        }\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === '0') {\n      if (this.settings.autocommit && !this.#timeout) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000);\n      }\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      const result = this.storeData(false);\n      if (!this.settings.sendBeaconCommit && !this.settings.asyncCommit &&\n          result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = (typeof result !== 'undefined' && result.result) ?\n          result.result : global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, 'HttpRequest', ' Result: ' + returnValue,\n          global_constants.LOG_LEVEL_DEBUG);\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case global_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_DEBUG:\n          if (console.debug) {\n            console.debug(logMessage);\n          } else {\n            console.log(logMessage);\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringMatches(str: String, tester: String) {\n    return str && tester && str.match(tester);\n  }\n\n  /**\n   * Check to see if the specific object has the given property\n   * @param {*} refObject\n   * @param {string} attribute\n   * @return {boolean}\n   * @private\n   */\n  _checkObjectHasProperty(refObject, attribute: String) {\n    return Object.hasOwnProperty.call(refObject, attribute) ||\n        Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(refObject), attribute) ||\n        (attribute in refObject);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    throw new Error(\n        'The getLmsErrorMessageDetails method has not been implemented');\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement) {\n    throw new Error('The getCMIValue method has not been implemented');\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement, _value) {\n    throw new Error('The setCMIValue method has not been implemented');\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return global_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d+')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value,\n                  foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          global_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {*}\n   * @abstract\n   */\n  getChildElement(_CMIElement, _value, _foundFirstIndex) {\n    throw new Error('The getChildElement method has not been implemented');\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute];\n      if (refObject === undefined) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[i + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED,\n                uninitializedErrorMessage);\n            break;\n          }\n\n          // Have to update i value to skip the array position\n          i++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(scorm12_error_codes.COUNT_ERROR);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    this.apiLog(functionName, CMIElement, value);\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n      if (CMIElement && listener.CMIElement &&\n          listener.CMIElement.substring(listener.CMIElement.length - 1) ===\n          '*') {\n        CMIElementsMatch = CMIElement.indexOf(listener.CMIElement.substring(0,\n            listener.CMIElement.length - 1)) === 0;\n      } else {\n        CMIElementsMatch = listener.CMIElement === CMIElement;\n      }\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        global_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {string}\n   * @abstract\n   */\n  storeData(_calculateTotalTime) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromFlattenedJSON(json, CMIElement) {\n    this.loadFromJSON(unflatten(json), CMIElement);\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : 'cmi';\n\n    this.startingData = json;\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + '.' : '') + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSONString() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @return {object}\n   */\n  renderCMIToJSONObject() {\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.parse(this.renderCMIToJSONString());\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {*}\n   * @abstract\n   */\n  renderCommitCMI(_terminateCommit) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Send the request to the LMS\n   * @param {string} url\n   * @param {object|Array} params\n   * @param {boolean} immediate\n   * @return {object}\n   */\n  processHttpRequest(url: String, params, immediate = false) {\n    const process = function(url, params, settings, error_codes) {\n      const genericError = {\n        'result': global_constants.SCORM_FALSE,\n        'errorCode': error_codes.GENERAL,\n      };\n\n      let result;\n      if (!settings.sendBeaconCommit) {\n        const httpReq = new XMLHttpRequest();\n        httpReq.open('POST', url, settings.asyncCommit);\n        try {\n          if (params instanceof Array) {\n            httpReq.setRequestHeader('Content-Type',\n                'application/x-www-form-urlencoded');\n            httpReq.send(params.join('&'));\n          } else {\n            httpReq.setRequestHeader('Content-Type',\n                settings.commitRequestDataType);\n            httpReq.send(JSON.stringify(params));\n          }\n\n          if (typeof settings.responseHandler === 'function') {\n            result = settings.responseHandler(httpReq);\n          } else {\n            result = JSON.parse(httpReq.responseText);\n          }\n        } catch (e) {\n          console.error(e);\n          return genericError;\n        }\n      } else {\n        try {\n          const headers = {\n            type: settings.commitRequestDataType,\n          };\n          let blob;\n          if (params instanceof Array) {\n            blob = new Blob([params.join('&')], headers);\n          } else {\n            blob = new Blob([JSON.stringify(params)], headers);\n          }\n\n          result = {};\n          if (navigator.sendBeacon(url, blob)) {\n            result.result = global_constants.SCORM_TRUE;\n            result.errorCode = 0;\n          } else {\n            result.result = global_constants.SCORM_FALSE;\n            result.errorCode = 101;\n          }\n        } catch (e) {\n          console.error(e);\n          return genericError;\n        }\n      }\n\n      if (typeof result === 'undefined') {\n        return genericError;\n      }\n\n      return result;\n    };\n\n    if (typeof debounce !== 'undefined') {\n      const debounced = debounce(process, 500);\n      debounced(url, params, this.settings, this.error_codes);\n\n      // if we're terminating, go ahead and commit immediately\n      if (immediate) {\n        debounced.flush();\n      }\n\n      return {\n        result: global_constants.SCORM_TRUE,\n        errorCode: 0,\n      };\n    } else {\n      return process(url, params, this.settings, this.error_codes);\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n    this.apiLog('scheduleCommit', '', 'scheduled',\n        global_constants.LOG_LEVEL_DEBUG);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n      this.apiLog('clearScheduledCommit', '', 'cleared',\n          global_constants.LOG_LEVEL_DEBUG);\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled = false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper.bind(this), when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject, NAV,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm12_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    const result = this.terminate('LMSFinish', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== '') {\n        if (this.nav.event === 'continue') {\n          this.processListeners('SequenceNext');\n        } else {\n          this.processListeners('SequencePrevious');\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (originalStatus === 'not attempted') {\n        this.cmi.core.lesson_status = 'completed';\n      }\n\n      if (this.cmi.core.lesson_mode === 'normal') {\n        if (this.cmi.core.credit === 'credit') {\n          if (this.settings.mastery_override &&\n              this.cmi.student_data.mastery_score !== '' &&\n              this.cmi.core.score.raw !== '') {\n            if (parseFloat(this.cmi.core.score.raw) >=\n                parseFloat(this.cmi.student_data.mastery_score)) {\n              this.cmi.core.lesson_status = 'passed';\n            } else {\n              this.cmi.core.lesson_status = 'failed';\n            }\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === 'browse') {\n        if ((this.startingData?.cmi?.core?.lesson_status || '') === '' &&\n            originalStatus === 'not attempted') {\n          this.cmi.core.lesson_status = 'browsed';\n        }\n      }\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      return this.processHttpRequest(this.settings.lmsCommitUrl, commitObject, terminateCommit);\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\nimport Responses from './constants/response_constants';\nimport ValidLanguages from './constants/language_constants';\nimport Regex from './constants/regex';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst global_constants = APIConstants.global;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst correct_responses = Responses.correct;\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm2004_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    const result = this.terminate('Terminate', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== '_none_') {\n        switch (this.adl.nav.request) {\n          case 'continue':\n            this.processListeners('SequenceNext');\n            break;\n          case 'previous':\n            this.processListeners('SequencePrevious');\n            break;\n          case 'choice':\n            this.processListeners('SequenceChoice');\n            break;\n          case 'exit':\n            this.processListeners('SequenceExit');\n            break;\n          case 'exitAll':\n            this.processListeners('SequenceExitAll');\n            break;\n          case 'abandon':\n            this.processListeners('SequenceAbandon');\n            break;\n          case 'abandonAll':\n            this.processListeners('SequenceAbandonAll');\n            break;\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (!interaction.type) {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        if (response_type) {\n          let nodes = [];\n          if (response_type?.delimiter) {\n            nodes = String(value).split(response_type.delimiter);\n          } else {\n            nodes[0] = value;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response_type.max) {\n            this.checkCorrectResponseValue(interaction_type, nodes, value);\n          } else if (nodes.length > response_type.max) {\n            this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n                'Data Model Element Pattern Too Long');\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Incorrect Response Type: ' + interaction_type);\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_learner\\\\.\\\\d+')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_lms\\\\.\\\\d+')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = correct_responses[interaction_type];\n    if (typeof response_type.limit === 'undefined' || interaction_count <=\n        response_type.limit) {\n      let nodes = [];\n      if (response_type?.delimiter) {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (ValidLanguages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      if (this.cmi.mode === 'normal') {\n        if (this.cmi.credit === 'credit') {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              console.debug('Setting Completion Status: Completed');\n              this.cmi.completion_status = 'completed';\n            } else {\n              console.debug('Setting Completion Status: Incomplete');\n              this.cmi.completion_status = 'incomplete';\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              console.debug('Setting Success Status: Passed');\n              this.cmi.success_status = 'passed';\n            } else {\n              console.debug('Setting Success Status: Failed');\n              this.cmi.success_status = 'failed';\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (this.adl.nav.request !== (this.startingData?.adl?.nav?.request) &&\n        this.adl.nav.request !== '_none_') {\n      this.adl.nav.request = encodeURIComponent(this.adl.nav.request);\n      navRequest = true;\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      const result = this.processHttpRequest(this.settings.lmsCommitUrl,\n          commitObject, terminateCommit);\n\n      // check if this is a sequencing call, and then call the necessary JS\n      {\n        if (navRequest && result.navRequest !== undefined &&\n          result.navRequest !== '') {\n          Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n        }\n      }\n      return result;\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n} from './scorm12_cmi';\n\nconst aicc_constants = APIConstants.aicc;\nconst aicc_regex = Regex.aicc;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(aicc_constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'student_demographics': this.student_demographics,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n      'paths': this.paths,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(aicc_constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentPreferences class for AICC\n */\nclass AICCStudentPreferences extends Scorm12CMI.CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n\n    this.windows = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: '',\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  #lesson_type = '';\n  #text_color = '';\n  #text_location = '';\n  #text_size = '';\n  #video = '';\n\n  /**\n   * Getter for #lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this.#lesson_type;\n  }\n\n  /**\n   * Setter for #lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (check12ValidFormat(lesson_type, aicc_regex.CMIString256)) {\n      this.#lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for #text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this.#text_color;\n  }\n\n  /**\n   * Setter for #text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (check12ValidFormat(text_color, aicc_regex.CMIString256)) {\n      this.#text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for #text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this.#text_location;\n  }\n\n  /**\n   * Setter for #text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (check12ValidFormat(text_location, aicc_regex.CMIString256)) {\n      this.#text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for #text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this.#text_size;\n  }\n\n  /**\n   * Setter for #text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (check12ValidFormat(text_size, aicc_regex.CMIString256)) {\n      this.#text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for #video\n   * @return {string}\n   */\n  get video(): string {\n    return this.#video;\n  }\n\n  /**\n   * Setter for #video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (check12ValidFormat(video, aicc_regex.CMIString256)) {\n      this.#video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'lesson_type': this.lesson_type,\n      'speed': this.speed,\n      'text': this.text,\n      'text_color': this.text_color,\n      'text_location': this.text_location,\n      'text_size': this.text_size,\n      'video': this.video,\n      'windows': this.windows,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = aicc_constants.student_demographics_children;\n  #city = '';\n  #class = '';\n  #company = '';\n  #country = '';\n  #experience = '';\n  #familiar_name = '';\n  #instructor_name = '';\n  #title = '';\n  #native_language = '';\n  #state = '';\n  #street_address = '';\n  #telephone = '';\n  #years_experience = '';\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city() {\n    return this.#city;\n  }\n\n  /**\n   * Setter for #city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city) {\n    !this.initialized ?\n        this.#city = city :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class() {\n    return this.#class;\n  }\n\n  /**\n   * Setter for #class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz) {\n    !this.initialized ?\n        this.#class = clazz :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company() {\n    return this.#company;\n  }\n\n  /**\n   * Setter for #company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company) {\n    !this.initialized ?\n        this.#company = company :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country() {\n    return this.#country;\n  }\n\n  /**\n   * Setter for #country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country) {\n    !this.initialized ?\n        this.#country = country :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience() {\n    return this.#experience;\n  }\n\n  /**\n   * Setter for #experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience) {\n    !this.initialized ?\n        this.#experience = experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name() {\n    return this.#familiar_name;\n  }\n\n  /**\n   * Setter for #familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name) {\n    !this.initialized ?\n        this.#familiar_name = familiar_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name() {\n    return this.#instructor_name;\n  }\n\n  /**\n   * Setter for #instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name) {\n    !this.initialized ?\n        this.#instructor_name = instructor_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title() {\n    return this.#title;\n  }\n\n  /**\n   * Setter for #title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title) {\n    !this.initialized ?\n        this.#title = title :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language() {\n    return this.#native_language;\n  }\n\n  /**\n   * Setter for #native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language) {\n    !this.initialized ?\n        this.#native_language = native_language :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * Setter for #state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state) {\n    !this.initialized ?\n        this.#state = state :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address() {\n    return this.#street_address;\n  }\n\n  /**\n   * Setter for #street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address) {\n    !this.initialized ?\n        this.#street_address = street_address :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone() {\n    return this.#telephone;\n  }\n\n  /**\n   * Setter for #telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone) {\n    !this.initialized ?\n        this.#telephone = telephone :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience() {\n    return this.#years_experience;\n  }\n\n  /**\n   * Setter for #years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience) {\n    !this.initialized ?\n        this.#years_experience = years_experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'city': this.city,\n      'class': this.class,\n      'company': this.company,\n      'country': this.country,\n      'experience': this.experience,\n      'familiar_name': this.familiar_name,\n      'instructor_name': this.instructor_name,\n      'title': this.title,\n      'native_language': this.native_language,\n      'state': this.state,\n      'street_address': this.street_address,\n      'telephone': this.telephone,\n      'years_experience': this.years_experience,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.paths object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super(aicc_constants.paths_children);\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super();\n  }\n\n  #location_id = '';\n  #date = '';\n  #time = '';\n  #status = '';\n  #why_left = '';\n  #time_in_element = '';\n\n  /**\n   * Getter for #location_id\n   * @return {string}\n   */\n  get location_id() {\n    return this.#location_id;\n  }\n\n  /**\n   * Setter for #location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id) {\n    if (check12ValidFormat(location_id, aicc_regex.CMIString256)) {\n      this.#location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for #date\n   * @return {string}\n   */\n  get date() {\n    return this.#date;\n  }\n\n  /**\n   * Setter for #date\n   * @param {string} date\n   */\n  set date(date) {\n    if (check12ValidFormat(date, aicc_regex.CMIString256)) {\n      this.#date = date;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #why_left\n   * @return {string}\n   */\n  get why_left() {\n    return this.#why_left;\n  }\n\n  /**\n   * Setter for #why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left) {\n    if (check12ValidFormat(why_left, aicc_regex.CMIString256)) {\n      this.#why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for #time_in_element\n   * @return {string}\n   */\n  get time_in_element() {\n    return this.#time_in_element;\n  }\n\n  /**\n   * Setter for #time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element) {\n    if (check12ValidFormat(time_in_element, aicc_regex.CMITime)) {\n      this.#time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'location_id': this.location_id,\n      'date': this.date,\n      'time': this.time,\n      'status': this.status,\n      'why_left': this.why_left,\n      'time_in_element': this.time_in_element,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.attempt_records_children);\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #lesson_status = '';\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, aicc_regex.CMIStatus2)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'lesson_status': this.lesson_status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, aicc_regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, aicc_regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport Regex from '../constants/regex';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n  #start_time;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Getter for #start_time\n   * @return {Number}\n   */\n  get start_time() {\n    return this.#start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime() {\n    this.#start_time = new Date().getTime();\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport Regex from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\nimport * as Util from '../utilities';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE, allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ?\n        cmi_children :\n        scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, scorm12_regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = scorm12_constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = 'not attempted';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n  #suspend_data = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, scorm12_regex.CMIString256, true)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, scorm12_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, scorm12_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, scorm12_regex.CMIString4096, true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {Number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: Number) {\n    let sessionTime = this.#session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== 'undefined' || startTime === null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        sessionTime,\n        new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  #_children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children) {\n    super();\n\n    this.#_children = student_preference_children ?\n        student_preference_children :\n        scorm12_constants.student_preference_children;\n  }\n\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, scorm12_regex.CMISInteger) &&\n        check12ValidRange(audio, scorm12_regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, scorm12_regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, scorm12_regex.CMISInteger) &&\n        check12ValidRange(speed, scorm12_regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, scorm12_regex.CMISInteger) &&\n        check12ValidRange(text, scorm12_regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, scorm12_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, scorm12_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, scorm12_regex.CMIDecimal) &&\n        check12ValidRange(weighting, scorm12_regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, scorm12_regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, scorm12_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, scorm12_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, scorm12_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, scorm12_regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, scorm12_regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport Responses from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst learner_responses = Responses.learner;\n\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  #_version = '1.0';\n  #_children = scorm2004_constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '';\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, scorm2004_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, scorm2004_regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, scorm2004_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, scorm2004_regex.CMIString64000,\n        true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    let sessionTime = this.#session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== 'undefined' || startTime === null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(\n        this.#total_time,\n        sessionTime,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = scorm2004_constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, scorm2004_regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, scorm2004_regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, scorm2004_regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, scorm2004_regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, scorm2004_regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, scorm2004_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, scorm2004_regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type) {\n        if (response_type?.delimiter) {\n          nodes = learner_response.split(response_type.delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n          const formatRegex = new RegExp(response_type.format);\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              const values = nodes[i].split(response_type.delimiter2);\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throwTypeMismatchError();\n                } else {\n                  if (!values[1].match(new RegExp(response_type.format2))) {\n                    throwTypeMismatchError();\n                  }\n                }\n              } else {\n                throwTypeMismatchError();\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (nodes[i] !== '' && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throwTypeMismatchError();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, scorm2004_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, scorm2004_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n        true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n        true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: scorm2004_constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(scaled, scorm2004_regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, scorm2004_regex.CMILangString4000,\n          true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, scorm2004_regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, scorm2004_regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, scorm2004_regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nconst global = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\nconst scorm12 = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_preference_children: 'audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    student_demographics_children: 'city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience',\n    tries_children: 'time,status,score',\n    attempt_records_children: 'score,lesson_status',\n    paths_children: 'location_id,date,time,status,why_left,time_in_element',\n  },\n};\n\nconst scorm2004 = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst APIConstants = {\n  global: global,\n  scorm12: scorm12,\n  aicc: aicc,\n  scorm2004: scorm2004,\n};\n\nexport default APIConstants;\n","// @flow\nconst global = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nconst scorm12 = {\n  ...global, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst scorm2004 = {\n  ...global, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst ErrorCodes = {\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default ErrorCodes;\n","const ValidLanguages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n\nexport default ValidLanguages;\n","// @flow\n\nconst scorm12 = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(passed|completed|failed|incomplete|browsed)$',\n  CMIStatus2: '^(passed|completed|failed|incomplete|browsed|not attempted)$',\n  CMIExit: '^(time-out|suspend|logout|)$',\n  CMIType: '^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nconst scorm2004 = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\\\.\\\\-\\\\_]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$', // need to re-examine this\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(completed|incomplete|not attempted|unknown)$',\n  CMISStatus: '^(passed|failed|unknown)$',\n  CMIExit: '^(time-out|suspend|logout|normal)$',\n  CMIType: '^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n\nconst Regex = {\n  aicc: aicc,\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default Regex;\n","// @flow\nimport Regex from './regex';\n\nconst scorm2004_regex = Regex.scorm2004;\n\nconst learner = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nconst correct = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nconst Responses = {\n  learner: learner,\n  correct: correct,\n};\n\nexport default Responses;\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","import Scorm2004API from './Scorm2004API';\nimport Scorm12API from './Scorm12API';\nimport AICC from './AICC';\n\nwindow.Scorm12API = Scorm12API;\nwindow.Scorm2004API = Scorm2004API;\nwindow.AICC = AICC;\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = '';\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n    msStr = '.' + msStr.split('.')[1];\n  }\n\n  return (hours + ':' + minutes + ':' + seconds).replace(/\\b\\d\\b/g,\n      '0$&') + msStr;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  let result = 0.0;\n\n  result += (Number(seconds) * 1.0 || 0.0);\n  result += (Number(minutes) * 60.0 || 0.0);\n  result += (Number(hours) * 3600.0 || 0.0);\n  result += (Number(days) * (60 * 60 * 24.0) || 0.0);\n  result += (Number(years) * (60 * 60 * 24 * 365.0) || 0.0);\n\n  return result;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  return getSecondsAsISODuration(\n      getDurationAsSeconds(first, durationRegex) +\n      getDurationAsSeconds(second, durationRegex),\n  );\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  return getSecondsAsHHMMSS(\n      getTimeAsSeconds(first, timeRegex) +\n      getTimeAsSeconds(\n          second, timeRegex),\n  );\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n\n/**\n * Counts the number of decimal places\n * @param {number} num\n * @return {number}\n */\nexport function countDecimals(num: number) {\n  if (Math.floor(num) === num || String(num).indexOf('.') < 0) return 0;\n  const parts = num.toString().split('.')[1];\n  return parts.length || 0;\n}\n"]}