{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/exports.js","src/utilities.js"],"names":["_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","_scorm12_cmi","AICC","settings","_this","_classCallCheck","this","finalSettings","_objectSpread","mastery_override","_super","call","cmi","CMI","nav","NAV","CMIElement","value","foundFirstIndex","newChild","_get","_getPrototypeOf","prototype","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","CMIAttemptRecordsObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","_utilities","global_constants","APIConstants","global","scorm12_error_codes","ErrorCodes","scorm12","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","asyncCommit","sendBeaconCommit","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","LOG_LEVEL_ERROR","selfReportSessionTime","responseHandler","xhr","result","JSON","parse","responseText","hasOwnProperty","status","SCORM_TRUE","SCORM_FALSE","errorCode","_defineProperty","constructor","TypeError","currentState","STATE_NOT_INITIALIZED","lastErrorCode","listenerArray","_classPrivateFieldSet","apiLogLevel","callbackName","initializeMessage","terminationMessage","returnValue","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","setStartTime","STATE_INITIALIZED","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","STATE_TERMINATED","storeData","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","undefined","String","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","e","ValidationError","message","console","error","GENERAL","scheduleCommit","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","LOG_LEVEL_DEBUG","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","LOG_LEVEL_WARNING","warn","info","debug","log","messageString","fillChars","length","i","j","str","tester","match","refObject","attribute","Object","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","parseInt","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","replace","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","substring","indexOf","errorNumber","success","_calculateTotalTime","json","loadFromJSON","unflatten","startingData","key","currentCMIElement","stringify","renderCMIToJSONString","_terminateCommit","url","params","genericError","beacon","Array","navigator","sendBeacon","join","httpReq","XMLHttpRequest","open","setRequestHeader","send","when","ScheduledCommit","cancel","API","_API","_cancelled","_timeout2","setTimeout","wrapper","bind","clearTimeout","commit","_BaseAPI2","Utilities","_interopRequireWildcard","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","event","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","getCurrentTotalTime","flattened","flatten","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","processHttpRequest","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","scorm2004_error_codes","correct_responses","Responses","correct","scorm2004_regex","Regex","Scorm2004API","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","request","parts","Number","interaction","interactions","type","interaction_type","interaction_count","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","max","checkCorrectResponseValue","DEPENDENCY_NOT_ESTABLISHED","CMICommentsObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","CMILangcr","lang","ValidLanguages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","mode","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","encodeURIComponent","Function","Scorm12CMI","aicc_constants","aicc","aicc_regex","cmi_children","student_preference","AICCStudentPreferences","AICCCMIStudentData","student_demographics","CMIStudentDemographics","evaluation","CMIEvaluation","paths","CMIPaths","_this$student_prefere","_this$student_data","_this$student_demogra","_this$evaluation","_this$paths","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","_this2","_super2","CMIEvaluationComments","_this$comments","BaseCMI","_super3","comments_children","INVALID_SET_VALUE","_this3","_super4","student_preference_children","_lesson_type","_text_color","_text_location","_text_size","_video","windows","children","_this$windows","audio","language","lesson_type","speed","text","text_color","text_location","text_size","video","check12ValidFormat","CMIString256","CMIStudentPreference","_this4","_super5","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","_this5","_super6","_children","student_demographics_children","_city","_class","_company","_country","_experience","_familiar_name","_instructor_name","_title","_native_language","_state","_street_address","_telephone","_years_experience","city","class","company","country","experience","familiar_name","instructor_name","title","native_language","state","street_address","telephone","years_experience","clazz","_super7","paths_children","CMIPathsObject","_this6","_super8","_location_id","_date","_time","_status","_why_left","_time_in_element","location_id","date","time","why_left","time_in_element","CMITime","CMIStatus2","_super9","tries_children","_this7","_super10","_status2","_time2","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","CMIAttemptRecords","_super11","attempt_records_children","_this8","_super12","_lesson_status","_this$score2","_this9","_super13","_content","_location","_time3","content","location","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","scorm12_regex","_initialized","_start_time","Date","getTime","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","CMIDecimal","min","_ref2","_errorCode","_children3","throwWriteOnlyError","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIInteractions","_this$core","_this$objectives","_this$interactions","start_time","_this$core2","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_entry","_total_time","_lesson_mode","_exit","_session_time","_suspend_data","sessionTime","startTime","seconds","Util","getSecondsAsHHMMSS","addHHMMSSTimeStrings","CMITimespan","student_id","student_name","lesson_location","entry","exit","session_time","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","_audio","_language","_speed","_text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_id2","_id3","_pattern","_event","NAVEvent","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","learner_responses","learner","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","getSecondsAsISODuration","addTwoDurations","learner_id","learner_name","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_scaled","scaled_range","readOnlyAfterInit","arguments","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","ADLNav","_this$nav","_this10","_super14","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_super15","_continue","_previous","_temp","_target","_temp2","previous","continue","_","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","other","_Scorm2004API","_Scorm12API","_AICC","window","totalSeconds","hours","Math","floor","SECONDS_PER_HOUR","dateObj","minutes","getUTCMinutes","getSeconds","msStr","countDecimals","toFixed","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","days","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","regex","m","num","toString","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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M,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMjM,GAAM,KAClEkM,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,K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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIAttemptRecordsObject,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n} from './cmi/aicc_cmi';\nimport {NAV} from './cmi/scorm12_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d+')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.tries\\\\.\\\\d+')) {\n        newChild = new CMITriesObject();\n      } else if (this.stringMatches(CMIElement,\n          'cmi\\\\.student_data\\\\.attempt_records\\\\.\\\\d+')) {\n        newChild = new CMIAttemptRecordsObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\nimport {ValidationError} from './exceptions';\nimport ErrorCodes from './constants/error_codes';\nimport APIConstants from './constants/api_constants';\nimport {unflatten} from './utilities';\n\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  #settings = {\n    autocommit: false,\n    autocommitSeconds: 10,\n    asyncCommit: false,\n    sendBeaconCommit: false,\n    lmsCommitUrl: false,\n    dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n    commitRequestDataType: 'application/json;charset=UTF-8',\n    autoProgress: false,\n    logLevel: global_constants.LOG_LEVEL_ERROR,\n    selfReportSessionTime: false,\n    responseHandler: function(xhr) {\n      let result;\n      if (typeof xhr !== 'undefined') {\n        result = JSON.parse(xhr.responseText);\n        if (result === null || !{}.hasOwnProperty.call(result, 'result')) {\n          result = {};\n          if (xhr.status === 200) {\n            result.result = global_constants.SCORM_TRUE;\n          } else {\n            result.result = global_constants.SCORM_FALSE;\n            result.errorCode = 101;\n          }\n        }\n      }\n      return result;\n    },\n  };\n  cmi;\n  startingData: {};\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   * @param {object} settings\n   */\n  constructor(error_codes, settings) {\n    if (new.target === BaseAPI) {\n      throw new TypeError('Cannot construct BaseAPI instances directly');\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n\n    this.settings = settings;\n    this.apiLogLevel = this.settings.logLevel;\n    this.selfReportSessionTime = this.settings.selfReportSessionTime;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      if (this.selfReportSessionTime) {\n        this.cmi.setStartTime();\n      }\n\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Getter for #settings\n   * @return {object}\n   */\n  get settings() {\n    return this.#settings;\n  }\n\n  /**\n   * Setter for #settings\n   * @param {object} settings\n   */\n  set settings(settings: Object) {\n    this.#settings = {...this.#settings, ...settings};\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      this.currentState = global_constants.STATE_TERMINATED;\n\n      const result = this.storeData(true);\n      if (typeof result.errorCode !== 'undefined' && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    if (value !== undefined) {\n      value = String(value);\n    }\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          this.lastErrorCode = e.errorCode;\n          returnValue = global_constants.SCORM_FALSE;\n        } else {\n          if (e.message) {\n            console.error(e.message);\n          } else {\n            console.error(e);\n          }\n          this.throwSCORMError(this.#error_codes.GENERAL);\n        }\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === '0') {\n      if (this.settings.autocommit && !this.#timeout) {\n        this.scheduleCommit(this.settings.autocommitSeconds * 1000);\n      }\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      const result = this.storeData(false);\n      if (result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, 'HttpRequest', ' Result: ' + returnValue,\n          global_constants.LOG_LEVEL_DEBUG);\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case global_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_DEBUG:\n          if (console.debug) {\n            console.debug(logMessage);\n          } else {\n            console.log(logMessage);\n          }\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringMatches(str: String, tester: String) {\n    return str && tester && str.match(tester);\n  }\n\n  /**\n   * Check to see if the specific object has the given property\n   * @param {*} refObject\n   * @param {string} attribute\n   * @return {boolean}\n   * @private\n   */\n  _checkObjectHasProperty(refObject, attribute: String) {\n    return Object.hasOwnProperty.call(refObject, attribute) ||\n        Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(refObject), attribute) ||\n        (attribute in refObject);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    throw new Error(\n        'The getLmsErrorMessageDetails method has not been implemented');\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement) {\n    throw new Error('The getCMIValue method has not been implemented');\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement, _value) {\n    throw new Error('The setCMIValue method has not been implemented');\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return global_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d+')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n              foundFirstIndex = true;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value,\n                  foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          global_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {*}\n   * @abstract\n   */\n  getChildElement(_CMIElement, _value, _foundFirstIndex) {\n    throw new Error('The getChildElement method has not been implemented');\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute];\n      if (refObject === undefined) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[i + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED,\n                uninitializedErrorMessage);\n            break;\n          }\n\n          // Have to update i value to skip the array position\n          i++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(scorm12_error_codes.COUNT_ERROR);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    this.apiLog(functionName, CMIElement, value);\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      let CMIElementsMatch = false;\n      if (CMIElement && listener.CMIElement &&\n          listener.CMIElement.substring(listener.CMIElement.length - 1) ===\n          '*') {\n        CMIElementsMatch = CMIElement.indexOf(listener.CMIElement.substring(0,\n            listener.CMIElement.length - 1)) === 0;\n      } else {\n        CMIElementsMatch = listener.CMIElement === CMIElement;\n      }\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        global_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {string}\n   * @abstract\n   */\n  storeData(_calculateTotalTime) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromFlattenedJSON(json, CMIElement) {\n    this.loadFromJSON(unflatten(json), CMIElement);\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement !== undefined ? CMIElement : 'cmi';\n\n    this.startingData = json;\n\n    // could this be refactored down to flatten(json) then setCMIValue on each?\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = (CMIElement ? CMIElement + '.' : '') + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSONString() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @return {object}\n   */\n  renderCMIToJSONObject() {\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.parse(this.renderCMIToJSONString());\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {*}\n   * @abstract\n   */\n  renderCommitCMI(_terminateCommit) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Send the request to the LMS\n   * @param {string} url\n   * @param {object|Array} params\n   * @return {object}\n   */\n  processHttpRequest(url: String, params) {\n    const genericError = {\n      'result': global_constants.SCORM_FALSE,\n      'errorCode': this.#error_codes.GENERAL,\n    };\n\n    let result;\n    if (!this.#settings.sendBeaconCommit) {\n      const httpReq = new XMLHttpRequest();\n      httpReq.open('POST', url, this.#settings.asyncCommit);\n      try {\n        if (params instanceof Array) {\n          httpReq.setRequestHeader('Content-Type',\n              'application/x-www-form-urlencoded');\n          httpReq.send(params.join('&'));\n        } else {\n          httpReq.setRequestHeader('Content-Type',\n              this.settings.commitRequestDataType);\n          httpReq.send(JSON.stringify(params));\n        }\n\n        if (typeof this.settings.responseHandler === 'function') {\n          result = this.settings.responseHandler(httpReq);\n        } else {\n          result = JSON.parse(httpReq.responseText);\n        }\n      } catch (e) {\n        console.error(e);\n        return genericError;\n      }\n    } else {\n      try {\n        let beacon;\n        if (params instanceof Array) {\n          beacon = navigator.sendBeacon(url, params.join('&'));\n        } else {\n          beacon = navigator.sendBeacon(url, params);\n        }\n\n        result = {};\n        if (beacon) {\n          result.result = global_constants.SCORM_TRUE;\n        } else {\n          result.result = global_constants.SCORM_FALSE;\n          result.errorCode = 101;\n        }\n      } catch (e) {\n        console.error(e);\n        return genericError;\n      }\n    }\n\n    if (typeof result === 'undefined') {\n      return genericError;\n    }\n\n    return result;\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n    this.apiLog('scheduleCommit', '', 'scheduled',\n        global_constants.LOG_LEVEL_DEBUG);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n      this.apiLog('clearScheduledCommit', '', 'cleared',\n          global_constants.LOG_LEVEL_DEBUG);\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled = false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper.bind(this), when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject, NAV,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst global_constants = APIConstants.global;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm12_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    const result = this.terminate('LMSFinish', false);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== '') {\n        if (this.nav.event === 'continue') {\n          this.processListeners('SequenceNext');\n        } else {\n          this.processListeners('SequencePrevious');\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm12_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm12_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm12_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (originalStatus === 'not attempted') {\n        this.cmi.core.lesson_status = 'completed';\n      }\n\n      if (this.cmi.core.lesson_mode === 'normal') {\n        if (this.cmi.core.credit === 'credit') {\n          if (this.settings.mastery_override &&\n              this.cmi.student_data.mastery_score !== '' &&\n              this.cmi.core.score.raw !== '') {\n            if (parseFloat(this.cmi.core.score.raw) >=\n                parseFloat(this.cmi.student_data.mastery_score)) {\n              this.cmi.core.lesson_status = 'passed';\n            } else {\n              this.cmi.core.lesson_status = 'failed';\n            }\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === 'browse') {\n        if ((this.startingData?.cmi?.core?.lesson_status || '') === '' &&\n            originalStatus === 'not attempted') {\n          this.cmi.core.lesson_status = 'browsed';\n        }\n      }\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      return this.processHttpRequest(this.settings.lmsCommitUrl, commitObject);\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Utilities from './utilities';\nimport APIConstants from './constants/api_constants';\nimport ErrorCodes from './constants/error_codes';\nimport Responses from './constants/response_constants';\nimport ValidLanguages from './constants/language_constants';\nimport Regex from './constants/regex';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst global_constants = APIConstants.global;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst correct_responses = Responses.correct;\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm2004_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    const result = this.terminate('Terminate', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== '_none_') {\n        switch (this.adl.nav.request) {\n          case 'continue':\n            this.processListeners('SequenceNext');\n            break;\n          case 'previous':\n            this.processListeners('SequencePrevious');\n            break;\n          case 'choice':\n            this.processListeners('SequenceChoice');\n            break;\n          case 'exit':\n            this.processListeners('SequenceExit');\n            break;\n          case 'exitAll':\n            this.processListeners('SequenceExitAll');\n            break;\n          case 'abandon':\n            this.processListeners('SequenceAbandon');\n            break;\n          case 'abandonAll':\n            this.processListeners('SequenceAbandonAll');\n            break;\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.correct_responses\\\\.\\\\d+')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (!interaction.type) {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        if (response_type) {\n          let nodes = [];\n          if (response_type?.delimiter) {\n            nodes = String(value).split(response_type.delimiter);\n          } else {\n            nodes[0] = value;\n          }\n\n          if (nodes.length > 0 && nodes.length <= response_type.max) {\n            this.checkCorrectResponseValue(interaction_type, nodes, value);\n          } else if (nodes.length > response_type.max) {\n            this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n                'Data Model Element Pattern Too Long');\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Incorrect Response Type: ' + interaction_type);\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d+\\\\.objectives\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (!foundFirstIndex &&\n        this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d+')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_learner\\\\.\\\\d+')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_lms\\\\.\\\\d+')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = correct_responses[interaction_type];\n    if (typeof response_type.limit === 'undefined' || interaction_count <=\n        response_type.limit) {\n      let nodes = [];\n      if (response_type?.delimiter) {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (scorm2004_constants.error_descriptions[errorNumber]) {\n      basicMessage = scorm2004_constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = scorm2004_constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response?.delimiter2) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (ValidLanguages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      if (this.cmi.mode === 'normal') {\n        if (this.cmi.credit === 'credit') {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              console.debug('Setting Completion Status: Completed');\n              this.cmi.completion_status = 'completed';\n            } else {\n              console.debug('Setting Completion Status: Incomplete');\n              this.cmi.completion_status = 'incomplete';\n            }\n          }\n          if (this.cmi.scaled_passing_score && this.cmi.score.scaled) {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              console.debug('Setting Success Status: Passed');\n              this.cmi.success_status = 'passed';\n            } else {\n              console.debug('Setting Success Status: Failed');\n              this.cmi.success_status = 'failed';\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (this.adl.nav.request !== (this.startingData?.adl?.nav?.request) &&\n        this.adl.nav.request !== '_none_') {\n      this.adl.nav.request = encodeURIComponent(this.adl.nav.request);\n      navRequest = true;\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      const result = this.processHttpRequest(this.settings.lmsCommitUrl,\n          commitObject);\n\n      // check if this is a sequencing call, and then call the necessary JS\n      {\n        if (navRequest && result.navRequest !== undefined &&\n          result.navRequest !== '') {\n          Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n        }\n      }\n      return result;\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n} from './scorm12_cmi';\n\nconst aicc_constants = APIConstants.aicc;\nconst aicc_regex = Regex.aicc;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(aicc_constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_preference = new AICCStudentPreferences();\n    this.student_data = new AICCCMIStudentData();\n    this.student_demographics = new CMIStudentDemographics();\n    this.evaluation = new CMIEvaluation();\n    this.paths = new CMIPaths();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_preference?.initialize();\n    this.student_data?.initialize();\n    this.student_demographics?.initialize();\n    this.evaluation?.initialize();\n    this.paths?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions,\n   *      paths: CMIPaths\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'student_demographics': this.student_demographics,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n      'paths': this.paths,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(aicc_constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentPreferences class for AICC\n */\nclass AICCStudentPreferences extends Scorm12CMI.CMIStudentPreference {\n  /**\n   * Constructor for AICC Student Preferences object\n   */\n  constructor() {\n    super(aicc_constants.student_preference_children);\n\n    this.windows = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: '',\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.windows?.initialize();\n  }\n\n  #lesson_type = '';\n  #text_color = '';\n  #text_location = '';\n  #text_size = '';\n  #video = '';\n\n  /**\n   * Getter for #lesson_type\n   * @return {string}\n   */\n  get lesson_type(): string {\n    return this.#lesson_type;\n  }\n\n  /**\n   * Setter for #lesson_type\n   * @param {string} lesson_type\n   */\n  set lesson_type(lesson_type: string) {\n    if (check12ValidFormat(lesson_type, aicc_regex.CMIString256)) {\n      this.#lesson_type = lesson_type;\n    }\n  }\n\n  /**\n   * Getter for #text_color\n   * @return {string}\n   */\n  get text_color(): string {\n    return this.#text_color;\n  }\n\n  /**\n   * Setter for #text_color\n   * @param {string} text_color\n   */\n  set text_color(text_color: string) {\n    if (check12ValidFormat(text_color, aicc_regex.CMIString256)) {\n      this.#text_color = text_color;\n    }\n  }\n\n  /**\n   * Getter for #text_location\n   * @return {string}\n   */\n  get text_location(): string {\n    return this.#text_location;\n  }\n\n  /**\n   * Setter for #text_location\n   * @param {string} text_location\n   */\n  set text_location(text_location: string) {\n    if (check12ValidFormat(text_location, aicc_regex.CMIString256)) {\n      this.#text_location = text_location;\n    }\n  }\n\n  /**\n   * Getter for #text_size\n   * @return {string}\n   */\n  get text_size(): string {\n    return this.#text_size;\n  }\n\n  /**\n   * Setter for #text_size\n   * @param {string} text_size\n   */\n  set text_size(text_size: string) {\n    if (check12ValidFormat(text_size, aicc_regex.CMIString256)) {\n      this.#text_size = text_size;\n    }\n  }\n\n  /**\n   * Getter for #video\n   * @return {string}\n   */\n  get video(): string {\n    return this.#video;\n  }\n\n  /**\n   * Setter for #video\n   * @param {string} video\n   */\n  set video(video: string) {\n    if (check12ValidFormat(video, aicc_regex.CMIString256)) {\n      this.#video = video;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'lesson_type': this.lesson_type,\n      'speed': this.speed,\n      'text': this.text,\n      'text_color': this.text_color,\n      'text_location': this.text_location,\n      'text_size': this.text_size,\n      'video': this.video,\n      'windows': this.windows,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(aicc_constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_demographics object\n */\nexport class CMIStudentDemographics extends BaseCMI {\n  /**\n   * Constructor for AICC StudentDemographics object\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = aicc_constants.student_demographics_children;\n  #city = '';\n  #class = '';\n  #company = '';\n  #country = '';\n  #experience = '';\n  #familiar_name = '';\n  #instructor_name = '';\n  #title = '';\n  #native_language = '';\n  #state = '';\n  #street_address = '';\n  #telephone = '';\n  #years_experience = '';\n\n  /**\n   * Getter for city\n   * @return {string}\n   */\n  get city() {\n    return this.#city;\n  }\n\n  /**\n   * Setter for #city. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} city\n   */\n  set city(city) {\n    !this.initialized ?\n        this.#city = city :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for class\n   * @return {string}\n   */\n  get class() {\n    return this.#class;\n  }\n\n  /**\n   * Setter for #class. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} clazz\n   */\n  set class(clazz) {\n    !this.initialized ?\n        this.#class = clazz :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for company\n   * @return {string}\n   */\n  get company() {\n    return this.#company;\n  }\n\n  /**\n   * Setter for #company. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} company\n   */\n  set company(company) {\n    !this.initialized ?\n        this.#company = company :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for country\n   * @return {string}\n   */\n  get country() {\n    return this.#country;\n  }\n\n  /**\n   * Setter for #country. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} country\n   */\n  set country(country) {\n    !this.initialized ?\n        this.#country = country :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for experience\n   * @return {string}\n   */\n  get experience() {\n    return this.#experience;\n  }\n\n  /**\n   * Setter for #experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} experience\n   */\n  set experience(experience) {\n    !this.initialized ?\n        this.#experience = experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for familiar_name\n   * @return {string}\n   */\n  get familiar_name() {\n    return this.#familiar_name;\n  }\n\n  /**\n   * Setter for #familiar_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} familiar_name\n   */\n  set familiar_name(familiar_name) {\n    !this.initialized ?\n        this.#familiar_name = familiar_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for instructor_name\n   * @return {string}\n   */\n  get instructor_name() {\n    return this.#instructor_name;\n  }\n\n  /**\n   * Setter for #instructor_name. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} instructor_name\n   */\n  set instructor_name(instructor_name) {\n    !this.initialized ?\n        this.#instructor_name = instructor_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for title\n   * @return {string}\n   */\n  get title() {\n    return this.#title;\n  }\n\n  /**\n   * Setter for #title. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} title\n   */\n  set title(title) {\n    !this.initialized ?\n        this.#title = title :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for native_language\n   * @return {string}\n   */\n  get native_language() {\n    return this.#native_language;\n  }\n\n  /**\n   * Setter for #native_language. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} native_language\n   */\n  set native_language(native_language) {\n    !this.initialized ?\n        this.#native_language = native_language :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for state\n   * @return {string}\n   */\n  get state() {\n    return this.#state;\n  }\n\n  /**\n   * Setter for #state. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} state\n   */\n  set state(state) {\n    !this.initialized ?\n        this.#state = state :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for street_address\n   * @return {string}\n   */\n  get street_address() {\n    return this.#street_address;\n  }\n\n  /**\n   * Setter for #street_address. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} street_address\n   */\n  set street_address(street_address) {\n    !this.initialized ?\n        this.#street_address = street_address :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for telephone\n   * @return {string}\n   */\n  get telephone() {\n    return this.#telephone;\n  }\n\n  /**\n   * Setter for #telephone. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} telephone\n   */\n  set telephone(telephone) {\n    !this.initialized ?\n        this.#telephone = telephone :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for years_experience\n   * @return {string}\n   */\n  get years_experience() {\n    return this.#years_experience;\n  }\n\n  /**\n   * Setter for #years_experience. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} years_experience\n   */\n  set years_experience(years_experience) {\n    !this.initialized ?\n        this.#years_experience = years_experience :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_demographics object\n   * @return {\n   *      {\n   *        city: string,\n   *        class: string,\n   *        company: string,\n   *        country: string,\n   *        experience: string,\n   *        familiar_name: string,\n   *        instructor_name: string,\n   *        title: string,\n   *        native_language: string,\n   *        state: string,\n   *        street_address: string,\n   *        telephone: string,\n   *        years_experience: string\n   *      }\n   *    }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'city': this.city,\n      'class': this.class,\n      'company': this.company,\n      'country': this.country,\n      'experience': this.experience,\n      'familiar_name': this.familiar_name,\n      'instructor_name': this.instructor_name,\n      'title': this.title,\n      'native_language': this.native_language,\n      'state': this.state,\n      'street_address': this.street_address,\n      'telephone': this.telephone,\n      'years_experience': this.years_experience,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.paths object\n */\nexport class CMIPaths extends CMIArray {\n  /**\n   * Constructor for inline Paths Array class\n   */\n  constructor() {\n    super(aicc_constants.paths_children);\n  }\n}\n\n/**\n * Class for AICC Paths\n */\nexport class CMIPathsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Paths objects\n   */\n  constructor() {\n    super();\n  }\n\n  #location_id = '';\n  #date = '';\n  #time = '';\n  #status = '';\n  #why_left = '';\n  #time_in_element = '';\n\n  /**\n   * Getter for #location_id\n   * @return {string}\n   */\n  get location_id() {\n    return this.#location_id;\n  }\n\n  /**\n   * Setter for #location_id\n   * @param {string} location_id\n   */\n  set location_id(location_id) {\n    if (check12ValidFormat(location_id, aicc_regex.CMIString256)) {\n      this.#location_id = location_id;\n    }\n  }\n\n  /**\n   * Getter for #date\n   * @return {string}\n   */\n  get date() {\n    return this.#date;\n  }\n\n  /**\n   * Setter for #date\n   * @param {string} date\n   */\n  set date(date) {\n    if (check12ValidFormat(date, aicc_regex.CMIString256)) {\n      this.#date = date;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #why_left\n   * @return {string}\n   */\n  get why_left() {\n    return this.#why_left;\n  }\n\n  /**\n   * Setter for #why_left\n   * @param {string} why_left\n   */\n  set why_left(why_left) {\n    if (check12ValidFormat(why_left, aicc_regex.CMIString256)) {\n      this.#why_left = why_left;\n    }\n  }\n\n  /**\n   * Getter for #time_in_element\n   * @return {string}\n   */\n  get time_in_element() {\n    return this.#time_in_element;\n  }\n\n  /**\n   * Setter for #time_in_element\n   * @param {string} time_in_element\n   */\n  set time_in_element(time_in_element) {\n    if (check12ValidFormat(time_in_element, aicc_regex.CMITime)) {\n      this.#time_in_element = time_in_element;\n    }\n  }\n\n  /**\n   * toJSON for cmi.paths.n object\n   * @return {\n   *    {\n   *      location_id: string,\n   *      date: string,\n   *      time: string,\n   *      status: string,\n   *      why_left: string,\n   *      time_in_element: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'location_id': this.location_id,\n      'date': this.date,\n      'time': this.time,\n      'status': this.status,\n      'why_left': this.why_left,\n      'time_in_element': this.time_in_element,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, aicc_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for cmi.student_data.attempt_records array\n */\nexport class CMIAttemptRecords extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.attempt_records_children);\n  }\n}\n\n/**\n * Class for AICC Attempt Records\n */\nexport class CMIAttemptRecordsObject extends BaseCMI {\n  /**\n   * Constructor for AICC Attempt Records object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: aicc_constants.score_children,\n          score_range: aicc_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #lesson_status = '';\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, aicc_regex.CMIStatus2)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.attempt_records.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'lesson_status': this.lesson_status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, aicc_regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, aicc_regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, aicc_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport Regex from '../constants/regex';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n  #start_time;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Getter for #start_time\n   * @return {Number}\n   */\n  get start_time() {\n    return this.#start_time;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n\n  /**\n   * Called when the player should override the 'session_time' provided by\n   * the module\n   */\n  setStartTime() {\n    this.#start_time = new Date().getTime();\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport ErrorCodes from '../constants/error_codes';\nimport Regex from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\nimport * as Util from '../utilities';\n\nconst scorm12_constants = APIConstants.scorm12;\nconst scorm12_regex = Regex.scorm12;\nconst scorm12_error_codes = ErrorCodes.scorm12;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE, allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ?\n        cmi_children :\n        scorm12_constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.core?.suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (this.core) {\n      this.core.suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, scorm12_regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime(this.start_time);\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = scorm12_constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = 'not attempted';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n  #suspend_data = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, scorm12_regex.CMIString256, true)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, scorm12_regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, scorm12_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, scorm12_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, scorm12_regex.CMIString4096, true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   * @param {Number} start_time\n   * @return {string}\n   */\n  getCurrentTotalTime(start_time: Number) {\n    let sessionTime = this.#session_time;\n    const startTime = start_time;\n\n    if (typeof startTime !== 'undefined' || startTime === null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsHHMMSS(seconds / 1000);\n    }\n\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        sessionTime,\n        new RegExp(scorm12_regex.CMITimespan),\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        scorm12_constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nexport class CMIStudentPreference extends BaseCMI {\n  #_children;\n\n  /**\n   * Constructor for cmi.student_preference\n   * @param {string} student_preference_children\n   */\n  constructor(student_preference_children) {\n    super();\n\n    this.#_children = student_preference_children ?\n        student_preference_children :\n        scorm12_constants.student_preference_children;\n  }\n\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, scorm12_regex.CMISInteger) &&\n        check12ValidRange(audio, scorm12_regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, scorm12_regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, scorm12_regex.CMISInteger) &&\n        check12ValidRange(speed, scorm12_regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, scorm12_regex.CMISInteger) &&\n        check12ValidRange(text, scorm12_regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: scorm12_constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: scorm12_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: scorm12_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, scorm12_regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, scorm12_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, scorm12_regex.CMIDecimal) &&\n        check12ValidRange(weighting, scorm12_regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, scorm12_regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, scorm12_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, scorm12_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: scorm12_constants.score_children,\n          score_range: scorm12_regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, scorm12_regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, scorm12_regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, scorm12_regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, scorm12_regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport APIConstants from '../constants/api_constants';\nimport Regex from '../constants/regex';\nimport ErrorCodes from '../constants/error_codes';\nimport Responses from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst scorm2004_constants = APIConstants.scorm2004;\nconst scorm2004_error_codes = ErrorCodes.scorm2004;\nconst learner_responses = Responses.learner;\n\nconst scorm2004_regex = Regex.scorm2004;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  #_version = '1.0';\n  #_children = scorm2004_constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '';\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, scorm2004_regex.CMIExit, true)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, scorm2004_regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, scorm2004_regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, scorm2004_regex.CMIString64000,\n        true)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    let sessionTime = this.#session_time;\n    const startTime = this.start_time;\n\n    if (typeof startTime !== 'undefined' || startTime === null) {\n      const seconds = new Date().getTime() - startTime;\n      sessionTime = Util.getSecondsAsISODuration(seconds / 1000);\n    }\n\n    return Util.addTwoDurations(\n        this.#total_time,\n        sessionTime,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = scorm2004_constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, scorm2004_regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, scorm2004_regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, scorm2004_regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, scorm2004_regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, scorm2004_regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: scorm2004_constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: scorm2004_constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: scorm2004_constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, scorm2004_regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, scorm2004_regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type) {\n        if (response_type?.delimiter) {\n          nodes = learner_response.split(response_type.delimiter);\n        } else {\n          nodes[0] = learner_response;\n        }\n\n        if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n          const formatRegex = new RegExp(response_type.format);\n          for (let i = 0; i < nodes.length; i++) {\n            if (response_type?.delimiter2) {\n              const values = nodes[i].split(response_type.delimiter2);\n              if (values.length === 2) {\n                if (!values[0].match(formatRegex)) {\n                  throwTypeMismatchError();\n                } else {\n                  if (!values[1].match(new RegExp(response_type.format2))) {\n                    throwTypeMismatchError();\n                  }\n                }\n              } else {\n                throwTypeMismatchError();\n              }\n            } else {\n              if (!nodes[i].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (nodes[i] !== '' && response_type.unique) {\n                  for (let j = 0; j < i; j++) {\n                    if (nodes[i] === nodes[j]) {\n                      throwTypeMismatchError();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, scorm2004_regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, scorm2004_regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n        true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, scorm2004_regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, scorm2004_regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, scorm2004_regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, scorm2004_regex.CMILangString250,\n        true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: scorm2004_constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, scorm2004_regex.CMIDecimal) &&\n        check2004ValidRange(scaled, scorm2004_regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, scorm2004_regex.CMILangString4000,\n          true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, scorm2004_regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, scorm2004_regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, scorm2004_regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, scorm2004_regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, scorm2004_regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nconst global = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\nconst scorm12 = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_preference_children: 'audio,language,lesson_type,speed,text,text_color,text_location,text_size,video,windows',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    student_demographics_children: 'city,class,company,country,experience,familiar_name,instructor_name,title,native_language,state,street_address,telephone,years_experience',\n    tries_children: 'time,status,score',\n    attempt_records_children: 'score,lesson_status',\n    paths_children: 'location_id,date,time,status,why_left,time_in_element',\n  },\n};\n\nconst scorm2004 = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n\nconst APIConstants = {\n  global: global,\n  scorm12: scorm12,\n  aicc: aicc,\n  scorm2004: scorm2004,\n};\n\nexport default APIConstants;\n","// @flow\nconst global = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nconst scorm12 = {\n  ...global, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst scorm2004 = {\n  ...global, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nconst ErrorCodes = {\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default ErrorCodes;\n","const ValidLanguages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n\nexport default ValidLanguages;\n","// @flow\n\nconst scorm12 = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(passed|completed|failed|incomplete|browsed)$',\n  CMIStatus2: '^(passed|completed|failed|incomplete|browsed|not attempted)$',\n  CMIExit: '^(time-out|suspend|logout|)$',\n  CMIType: '^(true-false|choice|fill-in|matching|performance|sequencing|likert|numeric)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nconst aicc = {\n  ...scorm12, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nconst scorm2004 = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\\\.\\\\-\\\\_]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000}|.{1,4000})$', // need to re-examine this\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(completed|incomplete|not attempted|unknown)$',\n  CMISStatus: '^(passed|failed|unknown)$',\n  CMIExit: '^(time-out|suspend|logout|normal)$',\n  CMIType: '^(true-false|choice|fill-in|long-fill-in|matching|performance|sequencing|likert|numeric|other)$',\n  CMIResult: '^(correct|wrong|unanticipated|neutral|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(previous|continue|exit|exitAll|abandon|abandonAll|suspendAll|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n\nconst Regex = {\n  aicc: aicc,\n  scorm12: scorm12,\n  scorm2004: scorm2004,\n};\n\nexport default Regex;\n","// @flow\nimport Regex from './regex';\n\nconst scorm2004_regex = Regex.scorm2004;\n\nconst learner = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nconst correct = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n\nconst Responses = {\n  learner: learner,\n  correct: correct,\n};\n\nexport default Responses;\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","import Scorm2004API from './Scorm2004API';\nimport Scorm12API from './Scorm12API';\nimport AICC from './AICC';\n\nwindow.Scorm12API = Scorm12API;\nwindow.Scorm2004API = Scorm2004API;\nwindow.AICC = AICC;\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds();\n  const ms = totalSeconds % 1.0;\n  let msStr = '';\n  if (countDecimals(ms) > 0) {\n    if (countDecimals(ms) > 2) {\n      msStr = ms.toFixed(2);\n    } else {\n      msStr = String(ms);\n    }\n    msStr = '.' + msStr.split('.')[1];\n  }\n\n  return (hours + ':' + minutes + ':' + seconds).replace(/\\b\\d\\b/g,\n      '0$&') + msStr;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    if (countDecimals(remainder) > 2) {\n      remainder = Number(Number(remainder).toFixed(2));\n    }\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  let result = 0.0;\n\n  result += (Number(seconds) * 1.0 || 0.0);\n  result += (Number(minutes) * 60.0 || 0.0);\n  result += (Number(hours) * 3600.0 || 0.0);\n  result += (Number(days) * (60 * 60 * 24.0) || 0.0);\n  result += (Number(years) * (60 * 60 * 24 * 365.0) || 0.0);\n\n  return result;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  return getSecondsAsISODuration(\n      getDurationAsSeconds(first, durationRegex) +\n      getDurationAsSeconds(second, durationRegex),\n  );\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  return getSecondsAsHHMMSS(\n      getTimeAsSeconds(first, timeRegex) +\n      getTimeAsSeconds(\n          second, timeRegex),\n  );\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n\n/**\n * Counts the number of decimal places\n * @param {number} num\n * @return {number}\n */\nexport function countDecimals(num: number) {\n  if (Math.floor(num) === num || String(num).indexOf('.') < 0) return 0;\n  const parts = num.toString().split('.')[1];\n  return parts.length || 0;\n}\n"]}