{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/field_values.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/utilities.js"],"names":["_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","AICC","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","cmi","CMI","_assertThisInitialized","nav","NAV","CMIElement","value","newChild","_get","prototype","stringContains","CMIEvaluationCommentsObject","CMITriesObject","newAPI","Scorm12API","_common","api_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","LOG_LEVEL_DEBUG","LOG_LEVEL_INFO","LOG_LEVEL_WARNING","LOG_LEVEL_ERROR","LOG_LEVEL_NONE","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_defineProperty","currentState","apiLogLevel","lastErrorCode","listenerArray","_classPrivateFieldSet","callbackName","initializeMessage","terminationMessage","returnValue","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","processListeners","apiLog","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","String","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","console","error","warn","info","message","messageString","fillChars","length","i","j","str","tester","indexOf","_errorNumber","_detail","_CMIElement","_value","methodName","scorm2004","structure","split","refObject","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","GENERAL","attribute","substr","_isTargetValid","READ_ONLY_ELEMENT","hasOwnProperty","validateCorrectResponse","CMIArray","index","parseInt","isNaN","item","childArray","getChildElement","push","target","undefined","listenerName","callback","listenerFunctions","listenerSplit","replace","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","errorNumber","success","json","key","currentCMIElement","loadFromJSON","constructor","Object","JSON","stringify","when","ScheduledCommit","cancel","API","_API","_cancelled","_timeout2","setTimeout","wrapper","clearTimeout","commit","_BaseAPI2","_scorm12_cmi","Utilities","_interopRequireWildcard","_api_constants","_regex","constants","scorm12_constants","scorm12_error_codes","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","initialize","terminate","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","timeRegex","RegExp","scorm12_regex","CMITime","totalTime","core","total_time","sessionTime","session_time","addHHMMSSTimeStrings","_scorm2004_cmi","Util","_response_constants","_language_constants","scorm2004_constants","Scorm2004API","scorm2004_error_codes","_version","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","parts","Number","interaction","interactions","type","DEPENDENCY_NOT_ESTABLISHED","interaction_type","interaction_count","correct_responses","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","max","checkCorrectResponseValue","CMICommentsFromLearnerObject","CMICommentsFromLMSObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","format","match","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","scorm2004_regex","CMILangcr","lang","valid_languages","toLowerCase","addTwoDurations","CMITimespan","Scorm12CMI","aicc_constants","regex","aicc_regex","initialized","cmi_children","student_data","AICCCMIStudentData","evaluation","CMIEvaluation","_this$student_data","_this$evaluation","jsonString","result","suspend_data","launch_data","comments","comments_from_lms","objectives","student_preference","_this2","CMIEvaluationComments","_this$comments","BaseCMI","comments_children","INVALID_SET_VALUE","_this3","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","mastery_score","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","tries_children","_this4","_status","_time","score","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","status","time","check12ValidFormat","CMIStatus2","_this5","_content","_location","_time2","content","location","CMIString256","_this6","_event","event","throwWriteOnlyError","NAVEvent","checkValidFormat","regexPattern","errorCode","allowEmptyString","ValidationError","checkValidRange","rangePattern","ranges","_exceptions","_initialized","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","CMIDecimal","raw","min","_children","_ref2","children","_errorCode","_children3","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_suspend_data","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIStudentPreference","CMIInteractions","_this$core","_this$objectives","_this$student_prefere","_this$interactions","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","student_id","student_name","lesson_location","credit","lesson_status","entry","lesson_mode","exit","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","student_preference_children","_audio","_language","_speed","_text","audio","language","speed","text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_id2","_this7","_id3","_this8","_pattern","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","completion_status","completion_threshold","learner_id","learner_name","mode","progress_measure","scaled_passing_score","success_status","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","learner_responses","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_this$score2","_scaled","scaled","scaled_range","_comment","_location2","_timestamp2","comment","CMILangString4000","CMIString250","_set","_this9","ADLNav","_this$nav","_this10","_request","request_valid","ADLNavRequestValid","_this$request_valid","request","_this11","_continue","_previous","_temp","_target","_temp2","previous","continue","_","101","201","202","203","301","401","402","403","404","405","_objectSpread","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","VALUE_NOT_INITIALIZED","MULTIPLE_TERMINATIONS","common_values","validResult","invalidResult","valid0To1Range","invalid0To1Range","valid0To100Range","invalid0To100Range","validScaledRange","invalidScaledRange","validIntegerScaledRange","invalidIntegerScaledRange","scorm12_values","validLessonStatus","invalidLessonStatus","validExit","invalidExit","validType","invalidType","validSpeedRange","invalidSpeedRange","validScoreRange","invalidScoreRange","validTime","invalidTime","validTimestamp","invalidTimestamp","scorm2004_values","validTimestamps","invalidTimestamps","validCStatus","invalidCStatus","validSStatus","invalidSStatus","validISO8601Durations","invalidISO8601Durations","validComment","repeat","invalidComment","validDescription","invalidDescription","validNavRequest","invalidNavRequest","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","_field_values","CMIInteger","CMIIndex","join","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","other","Error","getSecondsAsHHMMSS","totalSeconds","hours","Math","floor","SECONDS_PER_HOUR","dateObj","Date","minutes","getUTCMinutes","seconds","getSeconds","toString","padStart","getSecondsAsISODuration","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","getTimeAsSeconds","timeString","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","months","days","now","anchor","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","milliseconds","toFixed","setMilliseconds","getMilliseconds","first","second","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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ACvB7f,qBAAsB,IACtBC,oBAAqB,IACrBE,kBAAmB,IACnBC,iBAAkB,IAClBE,mBAAoB,IACpBC,kBAAmB,IACnB+e,eAAgB,IAChBG,oBAAqB,IACrBvU,oBAAqB,IACrBwU,uBAAwB,IACxB/c,qBAAsB,IACtBgd,sBAAuB,IACvBC,sBAAuB,IACvB5c,kBAAmB,IACnBoQ,mBAAoB,IACpB9G,cAAe,IACf+D,mBAAoB,IACpBzF,2BAA4B;;q1BC7EhC,IAAMkV,gBACJC,aACE,UACA,QACA,gBACA,WAEFC,eACE,SACA,QACA,WAGFC,gBACE,MACA,OACA,MACA,OAEFC,kBACE,KACA,OACA,MACA,OAGFC,kBACE,IACA,KACA,OAEFC,oBACE,UACA,OACA,MAGFC,kBACE,IACA,MACA,IACA,OACA,MAEFC,oBACE,OACA,OACA,OACA,KACA,OAGFC,yBACE,IACA,IACA,MAEFC,2BACE,OACA,OACA,MACA,OACA,OACA,KACA,QAISC,eAAcxC,iBACtB6B,kBACDY,mBACE,SACA,YACA,SACA,aACA,WAEFC,qBACE,SACA,IACA,IACA,IACA,OACA,QACA,YAGFC,WACE,WACA,UACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,WACA,cACA,aACA,SACA,WAEFC,aACE,UACA,QACA,UAGFC,iBACE,IACA,KACA,MACA,KACA,MACA,QAEFC,mBACE,UACA,OACA,OACA,MACA,UACA,UAGFC,iBACE,IACA,QACA,OAEFC,mBACE,UACA,OACA,KACA,MACA,UACA,UAEFf,oBACE,UACA,OACA,MAGFgB,WACE,WACA,WACA,YAEFC,aACE,WACA,cACA,UACA,eACA,iBAGFC,gBACE,WACA,cACA,WACA,YAEFC,kBACE,UACA,eACA,wDAKC,IAAMC,kBAAgBvD,iBACxB6B,kBAED2B,iBACE,aACA,mBACA,yBACA,cAEFC,mBACE,cACA,0BACA,yBACA,aACA,aACA,YACA,UACA,aAGFC,cACE,YACA,aACA,gBACA,WAEFC,gBACE,WACA,SACA,UAGFC,cACE,SACA,SACA,WAEFC,gBACE,WACA,aACA,IACA,KAGFlB,WACE,WACA,UACA,SACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,eACA,WACA,cACA,aACA,SACA,UACA,SAEFC,aACE,UACA,QACA,UAGFG,iBACE,IACA,KACA,MACA,SACA,KACA,SAEFC,mBACE,UACA,OACA,UACA,UAGFY,uBACE,mBACA,UACA,MACA,SAEFC,yBACE,WACA,OACA,QACA,KAGFC,cACE,+BACA,kCACA,sBAAwB,IAAIC,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFC,gBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAID,OAAO,MACnC,uBAAyB,IAAIA,OAAO,OAGtCE,kBACE,+BACA,kCACA,sBAAwB,IAAIF,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFG,oBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAIH,OAAO,KACnC,uBAAyB,IAAIA,OAAO,MAGtCI,iBACE,WACA,WACA,OACA,UACA,UACA,aACA,cAEFC,mBACE,QACA,OACA,OACA;;kGC1UC,IAAMtV,kBACXuV,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMjP,GAAM,KAClEkP,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAO75B,IAAO,MAAO85B,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAC/DC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MAAOC,IAAO,MA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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n  NAV,\n} from './cmi/aicc_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   */\n  constructor() {\n    super();\n\n    this.cmi = new CMI(this);\n    this.nav = new NAV(this);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {object}\n   */\n  getChildElement(CMIElement, value) {\n    let newChild = super.getChildElement(CMIElement);\n\n    if (!newChild) {\n      if (this.stringContains(CMIElement, 'cmi.evaluation.comments')) {\n        newChild = new CMIEvaluationCommentsObject(this);\n      } else if (this.stringContains(CMIElement, 'cmi.student_data.tries')) {\n        newChild = new CMITriesObject(this);\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\n\nconst api_constants = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  cmi;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   */\n  constructor(error_codes) {\n    this.currentState = api_constants.STATE_NOT_INITIALIZED;\n    this.apiLogLevel = api_constants.LOG_LEVEL_ERROR;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      this.currentState = api_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = api_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      this.currentState = api_constants.STATE_TERMINATED;\n      returnValue = api_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue = '';\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    let returnValue = '';\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.setCMIValue(CMIElement, value);\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = api_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case api_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case api_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case api_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringContains(str: String, tester: String) {\n    return str.indexOf(tester) > -1;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    return 'No error';\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   */\n  getCMIValue(_CMIElement) {\n    return '';\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   */\n  setCMIValue(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return api_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = api_constants.SCORM_FALSE;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!{}.hasOwnProperty.call(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringContains(CMIElement, '.correct_responses')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = api_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value);\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === api_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          api_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @return {*}\n   */\n  getChildElement(_CMIElement, _value) {\n    return null;\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!{}.hasOwnProperty.call(refObject, attribute)) {\n            this.throwSCORMError(101,\n                'getCMIValue did not find a value for: ' + CMIElement);\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!{}.hasOwnProperty.call(refObject, attribute)) {\n          this.throwSCORMError(401,\n              'The data model element passed to GetValue (' + CMIElement +\n              ') is not a valid SCORM data model element.');\n          return '';\n        }\n      }\n\n      refObject = refObject[attribute];\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(202);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(203);\n        }\n      }\n      return '';\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === api_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === api_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === api_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      const CMIElementsMatch = listener.CMIElement === CMIElement;\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        api_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== api_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement || 'cmi';\n\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = CMIElement + '.' + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSON() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled: false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper, when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport {scorm12_constants} from './constants/api_constants';\nimport {scorm12_error_codes} from './constants/error_codes';\nimport {scorm12_regex} from './constants/regex';\n\nconst constants = scorm12_constants;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   */\n  constructor() {\n    super(scorm12_error_codes);\n\n    this.cmi = new CMI(this);\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    return this.terminate('LMSFinish', false);\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  setCMIValue(CMIElement, value) {\n    this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {object}\n   */\n  getChildElement(CMIElement, value) {\n    let newChild;\n\n    if (this.stringContains(CMIElement, 'cmi.objectives')) {\n      newChild = new CMIObjectivesObject(this);\n    } else if (this.stringContains(CMIElement, '.correct_responses')) {\n      newChild = new CMIInteractionsCorrectResponsesObject(this);\n    } else if (this.stringContains(CMIElement, '.objectives')) {\n      newChild = new CMIInteractionsObjectivesObject(this);\n    } else if (this.stringContains(CMIElement, 'cmi.interactions')) {\n      newChild = new CMIInteractionsObject(this);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    const timeRegex = new RegExp(scorm12_regex.CMITime);\n\n    const totalTime = this.cmi.core.total_time;\n    const sessionTime = this.cmi.core.session_time;\n\n    return Utilities.addHHMMSSTimeStrings(totalTime, sessionTime, timeRegex);\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsFromLearnerObject,\n  CMICommentsFromLMSObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Util from './utilities';\nimport {scorm2004_constants} from './constants/api_constants';\nimport {scorm2004_error_codes} from './constants/error_codes';\nimport {correct_responses} from './constants/response_constants';\nimport {valid_languages} from './constants/language_constants';\nimport {scorm2004_regex} from './constants/regex';\n\nconst constants = scorm2004_constants;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   */\n  constructor() {\n    super(scorm2004_error_codes);\n\n    this.cmi = new CMI(this);\n    this.adl = new ADL(this);\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    return this.terminate('Terminate', true);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   */\n  setCMIValue(CMIElement, value) {\n    this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {any}\n   */\n  getChildElement(CMIElement, value) {\n    let newChild;\n\n    if (this.stringContains(CMIElement, 'cmi.objectives')) {\n      newChild = new CMIObjectivesObject(this);\n    } else if (this.stringContains(CMIElement, '.correct_responses')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (typeof interaction.type === 'undefined') {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        let nodes = [];\n        if (response_type.delimiter !== '') {\n          nodes = String(value).split(response_type.delimiter);\n        } else {\n          nodes[0] = value;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          this.checkCorrectResponseValue(interaction_type, nodes, value);\n        } else if (nodes.length > response_type.max) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Too Long');\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject(this);\n      }\n    } else if (this.stringContains(CMIElement, '.objectives')) {\n      newChild = new CMIInteractionsObjectivesObject(this);\n    } else if (this.stringContains(CMIElement, 'cmi.interactions')) {\n      newChild = new CMIInteractionsObject(this);\n    } else if (this.stringContains(CMIElement, 'cmi.comments_from_learner')) {\n      newChild = new CMICommentsFromLearnerObject(this);\n    } else if (this.stringContains(CMIElement, 'cmi.comments_from_lms')) {\n      newChild = new CMICommentsFromLMSObject(this);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = scorm2004_constants.correct_responses[interaction_type];\n    if (typeof response_type.limit !== 'undefined' || interaction_count <\n        response_type.limit) {\n      let nodes = [];\n      if (response_type.delimiter !== '') {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response.delimiter2 !== undefined) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (valid_languages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    const totalTime = this.cmi.total_time;\n    const sessionTime = this.cmi.session_time;\n\n    return Util.addTwoDurations(totalTime, sessionTime,\n        scorm2004_regex.CMITimespan);\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport {aicc_constants} from '../constants/api_constants';\nimport {aicc_regex} from '../constants/regex';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n  throwWriteOnlyError,\n} from './scorm12_cmi';\n\nconst constants = aicc_constants;\nconst regex = aicc_regex;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_data = new AICCCMIStudentData();\n    this.evaluation = new CMIEvaluation();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_data?.initialize();\n    this.evaluation?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport {scorm12_regex} from '../constants/regex';\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ?\n        score_children :\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ?\n        invalidErrorCode :\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ?\n        invalidTypeCode :\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ?\n        invalidRangeCode :\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ?\n        decimalRegex :\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    return {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   * @private\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   * @private\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {scorm12_regex} from '../constants/regex';\nimport {ValidationError} from '../exceptions';\n\nconst constants = scorm12_constants;\nconst regex = scorm12_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @return {boolean}\n */\nexport function check12ValidFormat(value: String, regexPattern: String) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nexport function check12ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #suspend_data = '';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ? cmi_children : constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, regex.CMIString4096)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n}\n\n/**\n * Class representing the cmi.core object\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = '';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, regex.CMIString256)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      total_time: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'total_time': this.total_time,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n */\nclass CMIStudentPreference extends BaseCMI {\n  /**\n   * Constructor for cmi.student_preference\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = constants.student_preference_children;\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, regex.CMISInteger) &&\n        check12ValidRange(audio, regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, regex.CMISInteger) &&\n        check12ValidRange(speed, regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, regex.CMISInteger) &&\n        check12ValidRange(text, regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, regex.CMIDecimal) &&\n        check12ValidRange(weighting, regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, regex.CMIFeedback)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm2004_constants} from '../constants/api_constants';\nimport {scorm2004_regex} from '../constants/regex';\nimport {scorm2004_error_codes} from '../constants/error_codes';\nimport {learner_responses} from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\n\nconst constants = scorm2004_constants;\nconst regex = scorm2004_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  #_version = '1.0';\n  #_children = constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '0';\n\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, regex.CMIString64000)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string,\n   *      total_time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n      'total_time': this.total_time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type.delimiter !== '') {\n        nodes = learner_response.split(response_type.delimiter);\n      } else {\n        nodes[0] = learner_response;\n      }\n\n      if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n        const formatRegex = new RegExp(response_type.format);\n        for (let i = 0; i < nodes.length; i++) {\n          if (typeof response_type.delimiter2 !== 'undefined') {\n            const values = nodes[i].split(response_type.delimiter2);\n            if (values.length === 2) {\n              if (!values[0].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (!values[1].match(new RegExp(response_type.format2))) {\n                  throwTypeMismatchError();\n                }\n              }\n            } else {\n              throwTypeMismatchError();\n            }\n          } else {\n            if (!nodes[i].match(formatRegex)) {\n              throwTypeMismatchError();\n            } else {\n              if (nodes[i] !== '' && response_type.unique) {\n                for (let j = 0; j < i; j++) {\n                  if (nodes[i] === nodes[j]) {\n                    throwTypeMismatchError();\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, regex.CMIDecimal) &&\n        check2004ValidRange(scaled, regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n object\n */\nexport class CMICommentsFromLearnerObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n\n  /**\n   * Constructor for cmi.comments_from_learner.n\n   */\n  constructor() {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (check2004ValidFormat(comment, regex.CMILangString4000, true)) {\n      this.#comment = comment;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, regex.CMIString250)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms.n object\n */\nexport class CMICommentsFromLMSObject extends CMICommentsFromLearnerObject {\n  /**\n   * Constructor for cmi.comments_from_lms.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return super.comment;\n  }\n\n  /**\n   * Setter for #comment. Can only be called before  initialization.\n   * @param {string} comment\n   */\n  set comment(comment) {\n    !this.initialized ? super.comment = comment : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return super.location;\n  }\n\n  /**\n   * Setter for #location. Can only be called before  initialization.\n   * @param {string} location\n   */\n  set location(location) {\n    !this.initialized ? super.location = location : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return super.timestamp;\n  }\n\n  /**\n   * Setter for #timestamp. Can only be called before  initialization.\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    !this.initialized ? super.timestamp = timestamp : throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.comments_from_lms.n\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    return super.toJSON();\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nexport const scorm12_constants = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nexport const aicc_constants = {\n  ...scorm12_constants, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    tries_children: 'time,status,score',\n  },\n};\n\nexport const scorm2004_constants = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n","// @flow\nexport const error_codes = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_error_codes = {\n  ...error_codes, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nexport const scorm2004_error_codes = {\n  ...error_codes, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n","const common_values = {\n  validResult: [\n    'correct',\n    'wrong',\n    'unanticipated',\n    'neutral',\n  ],\n  invalidResult: [\n    '-10000',\n    '10000',\n    'invalid',\n  ],\n\n  valid0To1Range: [\n    '0.0',\n    '0.25',\n    '0.5',\n    '1.0',\n  ],\n  invalid0To1Range: [\n    '-1',\n    '-0.1',\n    '1.1',\n    '.25',\n  ],\n\n  valid0To100Range: [\n    '1',\n    '50',\n    '100',\n  ],\n  invalid0To100Range: [\n    'invalid',\n    'a100',\n    '-1',\n  ],\n\n  validScaledRange: [\n    '1',\n    '0.5',\n    '0',\n    '-0.5',\n    '-1',\n  ],\n  invalidScaledRange: [\n    '-101',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n\n  validIntegerScaledRange: [\n    '1',\n    '0',\n    '-1',\n  ],\n  invalidIntegerScaledRange: [\n    '-101',\n    '-0.5',\n    '0.5',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n};\n\nexport const scorm12_values = {\n  ...common_values, ...{\n    validLessonStatus: [\n      'passed',\n      'completed',\n      'failed',\n      'incomplete',\n      'browsed',\n    ],\n    invalidLessonStatus: [\n      'Passed',\n      'P',\n      'F',\n      'p',\n      'true',\n      'false',\n      'complete',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validSpeedRange: [\n      '1',\n      '50',\n      '100',\n      '-1',\n      '-50',\n      '-100',\n    ],\n    invalidSpeedRange: [\n      'invalid',\n      'a100',\n      '-101',\n      '101',\n      '-100000',\n      '100000',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50.25',\n      '100',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-1',\n      '101',\n      '-100000',\n      '100000',\n    ],\n    invalid0To100Range: [\n      'invalid',\n      'a100',\n      '-2',\n    ],\n\n    validTime: [\n      '10:06:57',\n      '23:59:59',\n      '00:00:00',\n    ],\n    invalidTime: [\n      '47:59:59',\n      '00:00:01.56',\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n\n    validTimestamp: [\n      '10:06:57',\n      '00:00:01.56',\n      '23:59:59',\n      '47:59:59',\n    ],\n    invalidTimestamp: [\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n  },\n};\n\nexport const scorm2004_values = {\n  ...common_values, ...{\n    // valid field values\n    validTimestamps: [\n      '2019-06-25',\n      '2019-06-25T23:59',\n      '2019-06-25T23:59:59.99',\n      '1970-01-01',\n    ],\n    invalidTimestamps: [\n      '2019-06-25T',\n      '2019-06-25T23:59:59.999',\n      '2019-06-25T25:59:59.99',\n      '2019-13-31',\n      '1969-12-31',\n      '-00:00:30',\n      '0:50:30',\n      '23:00:30.',\n    ],\n\n    validCStatus: [\n      'completed',\n      'incomplete',\n      'not attempted',\n      'unknown',\n    ],\n    invalidCStatus: [\n      'complete',\n      'passed',\n      'failed',\n    ],\n\n    validSStatus: [\n      'passed',\n      'failed',\n      'unknown',\n    ],\n    invalidSStatus: [\n      'complete',\n      'incomplete',\n      'P',\n      'f',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n      'normal',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'long-fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n      'other',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50',\n      '100',\n      '-10000',\n      '-1',\n      '10000',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-100000',\n      '100000',\n    ],\n\n    validISO8601Durations: [\n      'P1Y34DT23H45M15S',\n      'PT1M45S',\n      'P0S',\n      'PT75M',\n    ],\n    invalidISO8601Durations: [\n      '00:08:45',\n      '-P1H',\n      '1y45D',\n      '0',\n    ],\n\n    validComment: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4000),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidComment: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4001),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(3999),\n    ],\n\n    validDescription: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(250),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidDescription: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(251),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(249),\n    ],\n\n    validNavRequest: [\n      'previous',\n      'continue',\n      'exit',\n      'exitAll',\n      'abandon',\n      'abandonAll',\n      'suspendAll',\n    ],\n    invalidNavRequest: [\n      'close',\n      'quit',\n      'next',\n      'before',\n    ],\n  },\n};\n","export const valid_languages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n","// @flow\n\nimport {scorm12_values, scorm2004_values} from './field_values';\n\nexport const scorm12_regex = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(' + scorm12_values.validLessonStatus.join('|') + ')$',\n  CMIStatus2: '^(' + scorm12_values.validLessonStatus.join('|') + '|not attempted)$',\n  CMIExit: '^(' + scorm12_values.validExit.join('|') + '|)$',\n  CMIType: '^(' + scorm12_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm12_values.validResult.join('|') + '|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nexport const aicc_regex = {\n  ...scorm12_regex, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nexport const scorm2004_regex = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\.]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000})$',\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(' + scorm2004_values.validCStatus.join('|') + ')$',\n  CMISStatus: '^(' + scorm2004_values.validSStatus.join('|') + ')$',\n  CMIExit: '^(' + scorm2004_values.validExit.join('|') + ')$',\n  CMIType: '^(' + scorm2004_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm2004_values.validResult.join('|') + '|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(' + scorm2004_values.validNavRequest.join('|') + '|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n","// @flow\nimport {scorm2004_regex} from './regex';\n\nexport const learner_responses = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nexport const correct_responses = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds() + (totalSeconds % 1.0);\n\n  return hours.toString().padStart(2, '0') + ':' +\n      minutes.toString().padStart(2, '0') + ':' +\n      seconds.toString().padStart(2, '0');\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'P0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  const now = new Date();\n  const anchor = new Date(now);\n  anchor.setFullYear(anchor.getFullYear() + Number(years || 0));\n  anchor.setMonth(anchor.getMonth() + Number(months || 0));\n  anchor.setDate(anchor.getDate() + Number(days || 0));\n  anchor.setHours(anchor.getHours() + Number(hours || 0));\n  anchor.setMinutes(anchor.getMinutes() + Number(minutes || 0));\n  anchor.setSeconds(anchor.getSeconds() + Number(seconds || 0));\n  if (seconds && String(seconds).indexOf('.') > 0) {\n    const milliseconds = Number(Number(seconds) % 1).toFixed(6) * 1000.0;\n    anchor.setMilliseconds(anchor.getMilliseconds() + milliseconds);\n  }\n\n  return ((anchor * 1.0) - now) / 1000.0;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  const firstSeconds = getDurationAsSeconds(first, durationRegex);\n  const secondSeconds = getDurationAsSeconds(second, durationRegex);\n\n  return getSecondsAsISODuration(firstSeconds + secondSeconds);\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  const firstSeconds = getTimeAsSeconds(first, timeRegex);\n  const secondSeconds = getTimeAsSeconds(second, timeRegex);\n  return getSecondsAsHHMMSS(firstSeconds + secondSeconds);\n}\n"]}