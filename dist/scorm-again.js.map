{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/field_values.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/exports.js","src/utilities.js"],"names":["_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","_scorm12_cmi","AICC","settings","_this","_classCallCheck","this","finalSettings","_objectSpread","mastery_override","_possibleConstructorReturn","_getPrototypeOf","call","cmi","CMI","nav","NAV","CMIElement","value","foundFirstIndex","newChild","_get","prototype","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","newAPI","Scorm12API","_common","_exceptions","_error_codes2","_api_constants","_utilities","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_settings","autocommit","autocommitSeconds","lmsCommitUrl","dataCommitFormat","commitRequestDataType","autoProgress","logLevel","global_constants","LOG_LEVEL_ERROR","_defineProperty","constructor","TypeError","currentState","STATE_NOT_INITIALIZED","lastErrorCode","listenerArray","_classPrivateFieldSet","apiLogLevel","callbackName","initializeMessage","terminationMessage","returnValue","SCORM_FALSE","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","STATE_INITIALIZED","SCORM_TRUE","processListeners","apiLog","LOG_LEVEL_INFO","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","result","storeData","errorCode","STATE_TERMINATED","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","e","ValidationError","GENERAL","undefined","String","scheduleCommit","clearScheduledCommit","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","LOG_LEVEL_DEBUG","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","console","error","LOG_LEVEL_WARNING","warn","info","message","messageString","fillChars","length","i","j","str","tester","match","refObject","attribute","Object","hasOwnProperty","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","parseInt","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","scorm12_error_codes","CHILDREN_ERROR","COUNT_ERROR","listenerName","callback","listenerFunctions","listenerSplit","replace","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","errorNumber","success","_calculateTotalTime","json","loadFromJSON","unflatten","startingData","key","currentCMIElement","JSON","stringify","parse","renderCMIToJSONString","_terminateCommit","url","params","genericError","httpReq","XMLHttpRequest","open","Array","setRequestHeader","send","join","responseText","when","ScheduledCommit","cancel","API","_API","_cancelled","_timeout2","setTimeout","wrapper","clearTimeout","commit","_BaseAPI2","Utilities","_interopRequireWildcard","constants","scorm12_constants","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","event","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","terminateCommit","cmiExport","renderCMIToJSONObject","core","total_time","getCurrentTotalTime","flattened","flatten","originalStatus","lesson_status","lesson_mode","credit","student_data","mastery_score","score","raw","parseFloat","_this$startingData","_this$startingData$cm","_this$startingData$cm2","commitObject","renderCommitCMI","debug","processHttpRequest","log","_scorm2004_cmi","_response_constants","_language_constants","_regex","scorm2004_constants","Scorm2004API","scorm2004_error_codes","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","request","parts","Number","interaction","interactions","type","DEPENDENCY_NOT_ESTABLISHED","interaction_type","interaction_count","correct_responses","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","max","checkCorrectResponseValue","CMICommentsObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","scorm2004_regex","CMILangcr","lang","valid_languages","toLowerCase","_this$startingData$ad","_this$startingData$ad2","mode","completion_threshold","progress_measure","completion_status","scaled_passing_score","scaled","success_status","navRequest","encodeURIComponent","Function","Scorm12CMI","aicc_constants","regex","aicc_regex","cmi_children","AICCCMIStudentData","evaluation","CMIEvaluation","_this$student_data","_this$evaluation","jsonString","suspend_data","launch_data","comments","comments_from_lms","objectives","student_preference","_this2","CMIEvaluationComments","_this$comments","BaseCMI","comments_children","INVALID_SET_VALUE","_this3","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","tries_children","_this4","_status","_time","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","status","time","check12ValidFormat","CMIStatus2","CMITime","_this5","_content","_location","_time2","content","location","CMIString256","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","_initialized","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","scorm12_regex","CMIDecimal","min","_children","_ref2","children","_errorCode","_children3","throwWriteOnlyError","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_suspend_data","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIStudentPreference","CMIInteractions","_this$core","_this$objectives","_this$student_prefere","_this$interactions","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","addHHMMSSTimeStrings","CMITimespan","student_id","student_name","lesson_location","entry","exit","session_time","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","student_preference_children","_audio","_language","_speed","_text","audio","language","speed","text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_this6","_id2","_this7","_id3","_this8","_pattern","_this9","_event","NAVEvent","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","Util","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","addTwoDurations","learner_id","learner_name","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","learner_responses","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_this$score2","_scaled","scaled_range","readOnlyAfterInit","arguments","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","ADLNav","_this$nav","_this10","_request","request_valid","ADLNavRequestValid","_this$request_valid","_this11","_continue","_previous","_temp","_target","_temp2","previous","continue","_","LOG_LEVEL_NONE","101","201","202","203","301","401","402","403","404","405","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","common_values","validResult","invalidResult","valid0To1Range","invalid0To1Range","valid0To100Range","invalid0To100Range","validScaledRange","invalidScaledRange","validIntegerScaledRange","invalidIntegerScaledRange","scorm12_values","validLessonStatus","invalidLessonStatus","validExit","invalidExit","validType","invalidType","validSpeedRange","invalidSpeedRange","validScoreRange","invalidScoreRange","validTime","invalidTime","validTimespan","invalidTimespan","scorm2004_values","validTimestamps","invalidTimestamps","validCStatus","invalidCStatus","validSStatus","invalidSStatus","validISO8601Durations","invalidISO8601Durations","validComment","repeat","invalidComment","validDescription","invalidDescription","validNavRequest","invalidNavRequest","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","_field_values","CMIInteger","CMIIndex","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","other","_Scorm2004API","_Scorm12API","_AICC","window","getSecondsAsHHMMSS","totalSeconds","hours","Math","floor","SECONDS_PER_HOUR","dateObj","Date","minutes","getUTCMinutes","seconds","getSeconds","toString","padStart","getSecondsAsISODuration","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","indexOf","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","months","days","now","anchor","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","milliseconds","toFixed","setMilliseconds","getMilliseconds","first","second","data","recurse","cur","prop","isArray","l","isEmpty","p","m","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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,KACA,QAISC,eAAc7nB,iBACtBknB,kBACDY,mBACE,SACA,YACA,SACA,aACA,WAEFC,qBACE,SACA,IACA,IACA,IACA,OACA,QACA,YAGFC,WACE,WACA,UACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,WACA,cACA,aACA,SACA,WAEFC,aACE,UACA,QACA,UAGFC,iBACE,IACA,KACA,MACA,KACA,MACA,QAEFC,mBACE,UACA,OACA,OACA,MACA,UACA,UAGFC,iBACE,IACA,QACA,OAEFC,mBACE,UACA,OACA,KACA,MACA,UACA,UAEFf,oBACE,UACA,OACA,MAGFgB,WACE,WACA,WACA,YAEFC,aACE,WACA,cACA,UACA,eACA,iBAGFC,eACE,WACA,cACA,WACA,YAEFC,iBACE,UACA,eACA,wDAKC,IAAMC,kBAAgB5oB,iBACxBknB,kBAED2B,iBACE,aACA,mBACA,yBACA,cAEFC,mBACE,cACA,0BACA,yBACA,aACA,aACA,YACA,UACA,aAGFC,cACE,YACA,aACA,gBACA,WAEFC,gBACE,WACA,SACA,UAGFC,cACE,SACA,SACA,WAEFC,gBACE,WACA,aACA,IACA,KAGFlB,WACE,WACA,UACA,SACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,eACA,WACA,cACA,aACA,SACA,UACA,SAEFC,aACE,UACA,QACA,UAGFG,iBACE,IACA,KACA,MACA,SACA,KACA,SAEFC,mBACE,UACA,OACA,UACA,UAGFY,uBACE,mBACA,UACA,MACA,SAEFC,yBACE,WACA,OACA,QACA,KAGFC,cACE,+BACA,kCACA,sBAAwB,IAAIC,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFC,gBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAID,OAAO,MACnC,uBAAyB,IAAIA,OAAO,OAGtCE,kBACE,+BACA,kCACA,sBAAwB,IAAIF,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFG,oBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAIH,OAAO,KACnC,uB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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n} from './cmi/aicc_cmi';\nimport {NAV} from './cmi/scorm12_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement, 'cmi\\\\.student_data\\\\.tries\\\\.\\\\d')) {\n        newChild = new CMITriesObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\nimport {ValidationError} from './exceptions';\nimport {scorm12_error_codes} from './constants/error_codes';\nimport {global_constants} from './constants/api_constants';\nimport {unflatten} from './utilities';\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  #settings = {\n    autocommit: false,\n    autocommitSeconds: 60,\n    lmsCommitUrl: false,\n    dataCommitFormat: 'json', // valid formats are 'json' or 'flattened', 'params'\n    commitRequestDataType: 'application/json;charset=UTF-8',\n    autoProgress: false,\n    logLevel: global_constants.LOG_LEVEL_ERROR,\n  };\n  cmi;\n  startingData: {};\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   * @param {object} settings\n   */\n  constructor(error_codes, settings) {\n    if (new.target === BaseAPI) {\n      throw new TypeError('Cannot construct BaseAPI instances directly');\n    }\n    this.currentState = global_constants.STATE_NOT_INITIALIZED;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n\n    this.settings = settings;\n    this.apiLogLevel = this.settings.logLevel;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      this.currentState = global_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Getter for #settings\n   * @return {object}\n   */\n  get settings() {\n    return this.#settings;\n  }\n\n  /**\n   * Setter for #settings\n   * @param {object} settings\n   */\n  set settings(settings: Object) {\n    this.#settings = {...this.#settings, ...settings};\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      const result = this.storeData(true);\n      if (result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      if (checkTerminated) this.lastErrorCode = 0;\n      this.currentState = global_constants.STATE_TERMINATED;\n      returnValue = global_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          this.lastErrorCode = e.errorCode;\n          returnValue = global_constants.SCORM_FALSE;\n        } else {\n          this.throwSCORMError(this.#error_codes.GENERAL);\n        }\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = global_constants.SCORM_FALSE;\n    }\n\n    // If we didn't have any errors while setting the data, go ahead and\n    // schedule a commit, if autocommit is turned on\n    if (String(this.lastErrorCode) === '0') {\n      if (this.#settings.autocommit && this.#timeout === undefined) {\n        this.scheduleCommit(this.#settings.autocommitSeconds * 1000);\n      }\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    this.clearScheduledCommit();\n\n    let returnValue = global_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      const result = this.storeData(false);\n      if (result.errorCode && result.errorCode > 0) {\n        this.throwSCORMError(result.errorCode);\n      }\n      returnValue = result.result ?\n          result.result : global_constants.SCORM_FALSE;\n\n      this.apiLog(callbackName, 'HttpRequest', ' Result: ' + returnValue,\n          global_constants.LOG_LEVEL_DEBUG);\n\n      if (checkTerminated) this.lastErrorCode = 0;\n\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        global_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case global_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case global_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringMatches(str: String, tester: String) {\n    return str && tester && str.match(tester);\n  }\n\n  /**\n   * Check to see if the specific object has the given property\n   * @param {*} refObject\n   * @param {string} attribute\n   * @return {boolean}\n   * @private\n   */\n  _checkObjectHasProperty(refObject, attribute: String) {\n    return Object.hasOwnProperty.call(refObject, attribute) ||\n        Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(refObject), attribute) ||\n        (attribute in refObject);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    throw new Error(\n        'The getLmsErrorMessageDetails method has not been implemented');\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement) {\n    throw new Error('The getCMIValue method has not been implemented');\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement, _value) {\n    throw new Error('The setCMIValue method has not been implemented');\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return global_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = global_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = global_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value,\n                  foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === global_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          global_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {*}\n   * @abstract\n   */\n  getChildElement(_CMIElement, _value, _foundFirstIndex) {\n    throw new Error('The getChildElement method has not been implemented');\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute];\n      if (refObject === undefined) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[i + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED,\n                uninitializedErrorMessage);\n            break;\n          }\n\n          // Have to update i value to skip the array position\n          i++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(scorm12_error_codes.CHILDREN_ERROR);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(scorm12_error_codes.COUNT_ERROR);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === global_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === global_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === global_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      const CMIElementsMatch = listener.CMIElement === CMIElement;\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        global_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== undefined && success !== global_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS, logs data if no LMS configured\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _calculateTotalTime\n   * @return {string}\n   * @abstract\n   */\n  storeData(_calculateTotalTime) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Load the CMI from a flattened JSON object\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromFlattenedJSON(json, CMIElement) {\n    this.loadFromJSON(unflatten(json), CMIElement);\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement || 'cmi';\n\n    this.startingData = json;\n\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = CMIElement + '.' + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSONString() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @return {object}\n   */\n  renderCMIToJSONObject() {\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.parse(this.renderCMIToJSONString());\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {boolean} _terminateCommit\n   * @return {*}\n   * @abstract\n   */\n  renderCommitCMI(_terminateCommit) {\n    throw new Error(\n        'The storeData method has not been implemented');\n  }\n\n  /**\n   * Send the request to the LMS\n   * @param {string} url\n   * @param {object|Array} params\n   * @return {object}\n   */\n  processHttpRequest(url: String, params) {\n    const genericError = {\n      'result': global_constants.SCORM_FALSE,\n      'errorCode': this.#error_codes.GENERAL,\n    };\n\n    const httpReq = new XMLHttpRequest();\n    httpReq.open('POST', url, false);\n    try {\n      if (params instanceof Array) {\n        httpReq.setRequestHeader('Content-Type',\n            'application/x-www-form-urlencoded');\n        httpReq.send(params.join('&'));\n      } else {\n        httpReq.setRequestHeader('Content-Type',\n            this.settings.commitRequestDataType);\n        httpReq.send(JSON.stringify(params));\n      }\n    } catch (e) {\n      return genericError;\n    }\n\n    try {\n      return JSON.parse(httpReq.responseText);\n    } catch (e) {\n      return genericError;\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled: false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper, when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject, NAV,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport {global_constants, scorm12_constants} from './constants/api_constants';\nimport {scorm12_error_codes} from './constants/error_codes';\n\nconst constants = scorm12_constants;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm12_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    const result = this.terminate('LMSFinish', false);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.nav.event !== '') {\n        if (this.nav.event === 'continue') {\n          this.processListeners('SequenceNext');\n        } else {\n          this.processListeners('SequencePrevious');\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.core.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      const originalStatus = this.cmi.core.lesson_status;\n      if (originalStatus === 'not attempted') {\n        this.cmi.core.lesson_status = 'completed';\n      }\n\n      if (this.cmi.core.lesson_mode === 'normal') {\n        if (this.cmi.core.credit === 'credit') {\n          if (this.settings.mastery_override &&\n              this.cmi.student_data.mastery_score !== '' &&\n              this.cmi.core.score.raw !== '') {\n            if (parseFloat(this.cmi.core.score.raw) >=\n                parseFloat(this.cmi.student_data.mastery_score)) {\n              this.cmi.core.lesson_status = 'passed';\n            } else {\n              this.cmi.core.lesson_status = 'failed';\n            }\n          }\n        }\n      } else if (this.cmi.core.lesson_mode === 'browse') {\n        if ((this.startingData?.cmi?.core?.lesson_status || '') === '' &&\n            originalStatus === 'not attempted') {\n          this.cmi.core.lesson_status = 'browsed';\n        }\n      }\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      return this.processHttpRequest(this.settings.lmsCommitUrl, commitObject);\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Utilities from './utilities';\nimport {global_constants, scorm2004_constants} from './constants/api_constants';\nimport {scorm2004_error_codes} from './constants/error_codes';\nimport {correct_responses} from './constants/response_constants';\nimport {valid_languages} from './constants/language_constants';\nimport {scorm2004_regex} from './constants/regex';\n\nconst constants = scorm2004_constants;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   * @param {object} settings\n   */\n  constructor(settings: {}) {\n    const finalSettings = {\n      ...{\n        mastery_override: false,\n      }, ...settings,\n    };\n\n    super(scorm2004_error_codes, finalSettings);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    const result = this.terminate('Terminate', true);\n\n    if (result === global_constants.SCORM_TRUE) {\n      if (this.adl.nav.request !== '_none_') {\n        switch (this.adl.nav.request) {\n          case 'continue':\n            this.processListeners('SequenceNext');\n            break;\n          case 'previous':\n            this.processListeners('SequencePrevious');\n            break;\n          case 'choice':\n            this.processListeners('SequenceChoice');\n            break;\n          case 'exit':\n            this.processListeners('SequenceExit');\n            break;\n          case 'exitAll':\n            this.processListeners('SequenceExitAll');\n            break;\n          case 'abandon':\n            this.processListeners('SequenceAbandon');\n            break;\n          case 'abandonAll':\n            this.processListeners('SequenceAbandonAll');\n            break;\n        }\n      } else if (this.settings.autoProgress) {\n        this.processListeners('SequenceNext');\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (typeof interaction.type === 'undefined') {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        let nodes = [];\n        if (response_type.delimiter !== '') {\n          nodes = String(value).split(response_type.delimiter);\n        } else {\n          nodes[0] = value;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          this.checkCorrectResponseValue(interaction_type, nodes, value);\n        } else if (nodes.length > response_type.max) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Too Long');\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement,\n        'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_learner\\\\.\\\\d')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement,\n        'cmi\\\\.comments_from_lms\\\\.\\\\d')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = scorm2004_constants.correct_responses[interaction_type];\n    if (typeof response_type.limit !== 'undefined' || interaction_count <\n        response_type.limit) {\n      let nodes = [];\n      if (response_type.delimiter !== '') {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response.delimiter2 !== undefined) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (valid_languages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n\n  /**\n   * Render the cmi object to the proper format for LMS commit\n   *\n   * @param {boolean} terminateCommit\n   * @return {object|Array}\n   */\n  renderCommitCMI(terminateCommit: boolean) {\n    const cmiExport = this.renderCMIToJSONObject();\n\n    if (terminateCommit) {\n      cmiExport.cmi.total_time = this.cmi.getCurrentTotalTime();\n    }\n\n    const result = [];\n    const flattened = Utilities.flatten(cmiExport);\n    switch (this.settings.dataCommitFormat) {\n      case 'flattened':\n        return Utilities.flatten(cmiExport);\n      case 'params':\n        for (const item in flattened) {\n          if ({}.hasOwnProperty.call(flattened, item)) {\n            result.push(`${item}=${flattened[item]}`);\n          }\n        }\n        return result;\n      case 'json':\n      default:\n        return cmiExport;\n    }\n  }\n\n  /**\n   * Attempts to store the data to the LMS\n   *\n   * @param {boolean} terminateCommit\n   * @return {string}\n   */\n  storeData(terminateCommit: boolean) {\n    if (terminateCommit) {\n      if (this.cmi.mode === 'normal') {\n        if (this.cmi.credit === 'credit') {\n          if (this.cmi.completion_threshold && this.cmi.progress_measure) {\n            if (this.cmi.progress_measure >= this.cmi.completion_threshold) {\n              this.cmi.completion_status = 'completed';\n            } else {\n              this.cmi.completion_status = 'incomplete';\n            }\n          }\n          if (this.cmi.scaled_passing_score !== null &&\n              this.cmi.score.scaled !== '') {\n            if (this.cmi.score.scaled >= this.cmi.scaled_passing_score) {\n              this.cmi.success_status = 'passed';\n            } else {\n              this.cmi.success_status = 'failed';\n            }\n          }\n        }\n      }\n    }\n\n    let navRequest = false;\n    if (this.adl.nav.request !== (this.startingData?.adl?.nav?.request) &&\n        this.adl.nav.request !== '_none_') {\n      this.adl.nav.request = encodeURIComponent(this.adl.nav.request);\n      navRequest = true;\n    }\n\n    const commitObject = this.renderCommitCMI(terminateCommit);\n\n    if (this.settings.lmsCommitUrl) {\n      if (this.apiLogLevel === global_constants.LOG_LEVEL_DEBUG) {\n        console.debug('Commit (terminated: ' +\n            (terminateCommit ? 'yes' : 'no') + '): ');\n        console.debug(commitObject);\n      }\n      const result = this.processHttpRequest(this.settings.lmsCommitUrl,\n          commitObject);\n      // check if this is a sequencing call, and then call the necessary JS\n      if (navRequest && result.navRequest !== undefined &&\n          result.navRequest !== '') {\n        Function(`\"use strict\";(() => { ${result.navRequest} })()`)();\n      }\n      return result;\n    } else {\n      console.log('Commit (terminated: ' +\n          (terminateCommit ? 'yes' : 'no') + '): ');\n      console.log(commitObject);\n      return global_constants.SCORM_TRUE;\n    }\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport {aicc_constants} from '../constants/api_constants';\nimport {aicc_regex} from '../constants/regex';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n  throwWriteOnlyError,\n} from './scorm12_cmi';\n\nconst constants = aicc_constants;\nconst regex = aicc_regex;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_data = new AICCCMIStudentData();\n    this.evaluation = new CMIEvaluation();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_data?.initialize();\n    this.evaluation?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport {scorm12_regex} from '../constants/regex';\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {scorm12_regex} from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\n\nconst constants = scorm12_constants;\nconst regex = scorm12_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE, allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #suspend_data = '';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ? cmi_children : constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, regex.CMIString4096)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime();\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = 'not attempted';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, regex.CMIString256)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        this.#session_time,\n        new RegExp(scorm12_regex.CMITimespan)\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      total_time: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'total_time': this.total_time,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nclass CMIStudentPreference extends BaseCMI {\n  /**\n   * Constructor for cmi.student_preference\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = constants.student_preference_children;\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, regex.CMISInteger) &&\n        check12ValidRange(audio, regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, regex.CMISInteger) &&\n        check12ValidRange(speed, regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, regex.CMISInteger) &&\n        check12ValidRange(text, regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, regex.CMIDecimal) &&\n        check12ValidRange(weighting, regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm2004_constants} from '../constants/api_constants';\nimport {scorm2004_regex} from '../constants/regex';\nimport {scorm2004_error_codes} from '../constants/error_codes';\nimport {learner_responses} from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst constants = scorm2004_constants;\nconst regex = scorm2004_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  #_version = '1.0';\n  #_children = constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '0';\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, regex.CMIString64000)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    return Util.addTwoDurations(\n        this.#total_time,\n        this.#session_time,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string,\n   *      total_time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n      'total_time': this.total_time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type.delimiter !== '') {\n        nodes = learner_response.split(response_type.delimiter);\n      } else {\n        nodes[0] = learner_response;\n      }\n\n      if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n        const formatRegex = new RegExp(response_type.format);\n        for (let i = 0; i < nodes.length; i++) {\n          if (typeof response_type.delimiter2 !== 'undefined') {\n            const values = nodes[i].split(response_type.delimiter2);\n            if (values.length === 2) {\n              if (!values[0].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (!values[1].match(new RegExp(response_type.format2))) {\n                  throwTypeMismatchError();\n                }\n              }\n            } else {\n              throwTypeMismatchError();\n            }\n          } else {\n            if (!nodes[i].match(formatRegex)) {\n              throwTypeMismatchError();\n            } else {\n              if (nodes[i] !== '' && response_type.unique) {\n                for (let j = 0; j < i; j++) {\n                  if (nodes[i] === nodes[j]) {\n                    throwTypeMismatchError();\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, regex.CMIDecimal) &&\n        check2004ValidRange(scaled, regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, regex.CMILangString4000, true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\n\nexport const global_constants = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\nexport const scorm12_constants = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nexport const aicc_constants = {\n  ...scorm12_constants, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    tries_children: 'time,status,score',\n  },\n};\n\nexport const scorm2004_constants = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n","// @flow\nexport const error_codes = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_error_codes = {\n  ...error_codes, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nexport const scorm2004_error_codes = {\n  ...error_codes, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n","const common_values = {\n  validResult: [\n    'correct',\n    'wrong',\n    'unanticipated',\n    'neutral',\n  ],\n  invalidResult: [\n    '-10000',\n    '10000',\n    'invalid',\n  ],\n\n  valid0To1Range: [\n    '0.0',\n    '0.25',\n    '0.5',\n    '1.0',\n  ],\n  invalid0To1Range: [\n    '-1',\n    '-0.1',\n    '1.1',\n    '.25',\n  ],\n\n  valid0To100Range: [\n    '1',\n    '50',\n    '100',\n  ],\n  invalid0To100Range: [\n    'invalid',\n    'a100',\n    '-1',\n  ],\n\n  validScaledRange: [\n    '1',\n    '0.5',\n    '0',\n    '-0.5',\n    '-1',\n  ],\n  invalidScaledRange: [\n    '-101',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n\n  validIntegerScaledRange: [\n    '1',\n    '0',\n    '-1',\n  ],\n  invalidIntegerScaledRange: [\n    '-101',\n    '-0.5',\n    '0.5',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n};\n\nexport const scorm12_values = {\n  ...common_values, ...{\n    validLessonStatus: [\n      'passed',\n      'completed',\n      'failed',\n      'incomplete',\n      'browsed',\n    ],\n    invalidLessonStatus: [\n      'Passed',\n      'P',\n      'F',\n      'p',\n      'true',\n      'false',\n      'complete',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validSpeedRange: [\n      '1',\n      '50',\n      '100',\n      '-1',\n      '-50',\n      '-100',\n    ],\n    invalidSpeedRange: [\n      'invalid',\n      'a100',\n      '-101',\n      '101',\n      '-100000',\n      '100000',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50.25',\n      '100',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-1',\n      '101',\n      '-100000',\n      '100000',\n    ],\n    invalid0To100Range: [\n      'invalid',\n      'a100',\n      '-2',\n    ],\n\n    validTime: [\n      '10:06:57',\n      '23:59:59',\n      '00:00:00',\n    ],\n    invalidTime: [\n      '47:59:59',\n      '00:00:01.56',\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n\n    validTimespan: [\n      '10:06:57',\n      '00:00:01.56',\n      '23:59:59',\n      '47:59:59',\n    ],\n    invalidTimespan: [\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n  },\n};\n\nexport const scorm2004_values = {\n  ...common_values, ...{\n    // valid field values\n    validTimestamps: [\n      '2019-06-25',\n      '2019-06-25T23:59',\n      '2019-06-25T23:59:59.99',\n      '1970-01-01',\n    ],\n    invalidTimestamps: [\n      '2019-06-25T',\n      '2019-06-25T23:59:59.999',\n      '2019-06-25T25:59:59.99',\n      '2019-13-31',\n      '1969-12-31',\n      '-00:00:30',\n      '0:50:30',\n      '23:00:30.',\n    ],\n\n    validCStatus: [\n      'completed',\n      'incomplete',\n      'not attempted',\n      'unknown',\n    ],\n    invalidCStatus: [\n      'complete',\n      'passed',\n      'failed',\n    ],\n\n    validSStatus: [\n      'passed',\n      'failed',\n      'unknown',\n    ],\n    invalidSStatus: [\n      'complete',\n      'incomplete',\n      'P',\n      'f',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n      'normal',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'long-fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n      'other',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50',\n      '100',\n      '-10000',\n      '-1',\n      '10000',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-100000',\n      '100000',\n    ],\n\n    validISO8601Durations: [\n      'P1Y34DT23H45M15S',\n      'PT1M45S',\n      'P0S',\n      'PT75M',\n    ],\n    invalidISO8601Durations: [\n      '00:08:45',\n      '-P1H',\n      '1y45D',\n      '0',\n    ],\n\n    validComment: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4000),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidComment: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4001),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(3999),\n    ],\n\n    validDescription: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(250),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidDescription: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(251),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(249),\n    ],\n\n    validNavRequest: [\n      'previous',\n      'continue',\n      'exit',\n      'exitAll',\n      'abandon',\n      'abandonAll',\n      'suspendAll',\n    ],\n    invalidNavRequest: [\n      'close',\n      'quit',\n      'next',\n      'before',\n    ],\n  },\n};\n","export const valid_languages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n","// @flow\n\nimport {scorm12_values, scorm2004_values} from './field_values';\n\nexport const scorm12_regex = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(' + scorm12_values.validLessonStatus.join('|') + ')$',\n  CMIStatus2: '^(' + scorm12_values.validLessonStatus.join('|') + '|not attempted)$',\n  CMIExit: '^(' + scorm12_values.validExit.join('|') + '|)$',\n  CMIType: '^(' + scorm12_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm12_values.validResult.join('|') + '|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nexport const aicc_regex = {\n  ...scorm12_regex, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nexport const scorm2004_regex = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\.]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000})$',\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(' + scorm2004_values.validCStatus.join('|') + ')$',\n  CMISStatus: '^(' + scorm2004_values.validSStatus.join('|') + ')$',\n  CMIExit: '^(' + scorm2004_values.validExit.join('|') + ')$',\n  CMIType: '^(' + scorm2004_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm2004_values.validResult.join('|') + '|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(' + scorm2004_values.validNavRequest.join('|') + '|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n","// @flow\nimport {scorm2004_regex} from './regex';\n\nexport const learner_responses = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nexport const correct_responses = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","import Scorm2004API from './Scorm2004API';\nimport Scorm12API from './Scorm12API';\nimport AICC from './AICC';\n\nwindow.Scorm12API = Scorm12API;\nwindow.Scorm2004API = Scorm2004API;\nwindow.AICC = AICC;\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds() + (totalSeconds % 1.0);\n\n  return hours.toString().padStart(2, '0') + ':' +\n      minutes.toString().padStart(2, '0') + ':' +\n      seconds.toString().padStart(2, '0');\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  const now = new Date();\n  const anchor = new Date(now);\n  anchor.setFullYear(anchor.getFullYear() + Number(years || 0));\n  anchor.setMonth(anchor.getMonth() + Number(months || 0));\n  anchor.setDate(anchor.getDate() + Number(days || 0));\n  anchor.setHours(anchor.getHours() + Number(hours || 0));\n  anchor.setMinutes(anchor.getMinutes() + Number(minutes || 0));\n  anchor.setSeconds(anchor.getSeconds() + Number(seconds || 0));\n  if (seconds && String(seconds).indexOf('.') > 0) {\n    const milliseconds = Number(Number(seconds) % 1).toFixed(6) * 1000.0;\n    anchor.setMilliseconds(anchor.getMilliseconds() + milliseconds);\n  }\n\n  return ((anchor * 1.0) - now) / 1000.0;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  const firstSeconds = getDurationAsSeconds(first, durationRegex);\n  const secondSeconds = getDurationAsSeconds(second, durationRegex);\n\n  return getSecondsAsISODuration(firstSeconds + secondSeconds);\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  const firstSeconds = getTimeAsSeconds(first, timeRegex);\n  const secondSeconds = getTimeAsSeconds(second, timeRegex);\n  return getSecondsAsHHMMSS(firstSeconds + secondSeconds);\n}\n\n/**\n * Flatten a JSON object down to string paths for each values\n * @param {object} data\n * @return {object}\n */\nexport function flatten(data) {\n  const result = {};\n\n  /**\n   * Recurse through the object\n   * @param {*} cur\n   * @param {*} prop\n   */\n  function recurse(cur, prop) {\n    if (Object(cur) !== cur) {\n      result[prop] = cur;\n    } else if (Array.isArray(cur)) {\n      for (let i = 0, l = cur.length; i < l; i++) {\n        recurse(cur[i], prop + '[' + i + ']');\n        if (l === 0) result[prop] = [];\n      }\n    } else {\n      let isEmpty = true;\n      for (const p in cur) {\n        if ({}.hasOwnProperty.call(cur, p)) {\n          isEmpty = false;\n          recurse(cur[p], prop ? prop + '.' + p : p);\n        }\n      }\n      if (isEmpty && prop) result[prop] = {};\n    }\n  }\n\n  recurse(data, '');\n  return result;\n}\n\n/**\n * Un-flatten a flat JSON object\n * @param {object} data\n * @return {object}\n */\nexport function unflatten(data) {\n  'use strict';\n  if (Object(data) !== data || Array.isArray(data)) return data;\n  const regex = /\\.?([^.[\\]]+)|\\[(\\d+)]/g;\n  const result = {};\n  for (const p in data) {\n    if ({}.hasOwnProperty.call(data, p)) {\n      let cur = result;\n      let prop = '';\n      let m = regex.exec(p);\n      while (m) {\n        cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));\n        prop = m[2] || m[1];\n        m = regex.exec(p);\n      }\n      cur[prop] = data[p];\n    }\n  }\n  return result[''] || result;\n}\n"]}