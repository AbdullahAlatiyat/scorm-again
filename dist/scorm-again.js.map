{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/AICC.js","src/BaseAPI.js","src/Scorm12API.js","src/Scorm2004API.js","src/cmi/aicc_cmi.js","src/cmi/common.js","src/cmi/scorm12_cmi.js","src/cmi/scorm2004_cmi.js","src/constants/api_constants.js","src/constants/error_codes.js","src/constants/field_values.js","src/constants/language_constants.js","src/constants/regex.js","src/constants/response_constants.js","src/exceptions.js","src/utilities.js"],"names":["_Scorm12API2","_interopRequireDefault","require","_aicc_cmi","AICC","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","cmi","CMI","nav","NAV","CMIElement","value","foundFirstIndex","newChild","_get","prototype","stringMatches","CMIEvaluationCommentsObject","CMITriesObject","newAPI","Scorm12API","_common","_exceptions","api_constants","SCORM_TRUE","SCORM_FALSE","STATE_NOT_INITIALIZED","STATE_INITIALIZED","STATE_TERMINATED","LOG_LEVEL_DEBUG","LOG_LEVEL_INFO","LOG_LEVEL_WARNING","LOG_LEVEL_ERROR","LOG_LEVEL_NONE","BaseAPI","error_codes","_timeout","set","writable","_error_codes","_defineProperty","constructor","TypeError","currentState","apiLogLevel","lastErrorCode","listenerArray","_classPrivateFieldSet","callbackName","initializeMessage","terminationMessage","returnValue","isInitialized","throwSCORMError","_classPrivateFieldGet","INITIALIZED","isTerminated","TERMINATED","processListeners","apiLog","clearSCORMError","checkTerminated","checkState","TERMINATION_BEFORE_INIT","MULTIPLE_TERMINATION","RETRIEVE_BEFORE_INIT","RETRIEVE_AFTER_TERM","getCMIValue","STORE_BEFORE_INIT","STORE_AFTER_TERM","setCMIValue","e","ValidationError","errorCode","GENERAL","undefined","COMMIT_BEFORE_INIT","COMMIT_AFTER_TERM","String","CMIErrorCode","getLmsErrorMessageDetails","beforeInitError","afterTermError","isNotInitialized","functionName","logMessage","messageLevel","formatMessage","console","error","warn","info","message","messageString","fillChars","length","i","j","str","tester","match","refObject","attribute","Object","hasOwnProperty","getOwnPropertyDescriptor","getPrototypeOf","_errorNumber","_detail","Error","_CMIElement","_value","methodName","scorm2004","structure","split","invalidErrorMessage","concat","invalidErrorCode","UNDEFINED_DATA_MODEL","substr","_isTargetValid","READ_ONLY_ELEMENT","_checkObjectHasProperty","validateCorrectResponse","CMIArray","index","parseInt","isNaN","item","childArray","getChildElement","initialized","initialize","push","_foundFirstIndex","uninitializedErrorMessage","target","VALUE_NOT_INITIALIZED","listenerName","callback","listenerFunctions","listenerSplit","replace","listener","functionsMatch","listenerHasCMIElement","CMIElementsMatch","errorNumber","success","json","key","currentCMIElement","loadFromJSON","JSON","stringify","parse","getCurrentTotalTime","when","ScheduledCommit","cancel","API","_API","_cancelled","_timeout2","setTimeout","wrapper","clearTimeout","commit","_BaseAPI2","_scorm12_cmi","Utilities","_interopRequireWildcard","_api_constants","_regex","constants","scorm12_constants","scorm12_error_codes","LMSInitialize","lmsInitialize","LMSFinish","lmsFinish","LMSGetValue","lmsGetValue","LMSSetValue","lmsSetValue","LMSCommit","lmsCommit","LMSGetLastError","lmsGetLastError","LMSGetErrorString","lmsGetErrorString","LMSGetDiagnostic","lmsGetDiagnostic","terminate","getValue","setValue","getLastError","getErrorString","getDiagnostic","_commonSetCMIValue","_commonGetCMIValue","CMIObjectivesObject","CMIInteractionsCorrectResponsesObject","CMIInteractionsObjectivesObject","CMIInteractionsObject","detail","basicMessage","detailMessage","error_descriptions","_scorm2004_cmi","Util","_response_constants","_language_constants","scorm2004_constants","Scorm2004API","scorm2004_error_codes","_version","_assertThisInitialized","correct_response","current_index","found","count","_count","adl","ADL","Initialize","Terminate","lmsTerminate","GetValue","SetValue","Commit","GetLastError","GetErrorString","GetDiagnostic","parts","Number","interaction","interactions","type","DEPENDENCY_NOT_ESTABLISHED","interaction_type","interaction_count","correct_responses","response","pattern","GENERAL_SET_FAILURE","response_type","nodes","delimiter","max","checkCorrectResponseValue","CMICommentsObject","pattern_index","limit","duplicate","checkDuplicatedPattern","formatRegex","RegExp","format","removeCorrectResponsePrefixes","delimiter2","values","matches","format2","TYPE_MISMATCH","unique","node","seenOrder","seenCase","seenLang","prefixRegex","langMatches","scorm2004_regex","CMILangcr","lang","valid_languages","toLowerCase","Scorm12CMI","aicc_constants","regex","aicc_regex","cmi_children","student_data","AICCCMIStudentData","evaluation","CMIEvaluation","_this$student_data","_this$evaluation","jsonString","result","suspend_data","launch_data","comments","comments_from_lms","core","objectives","student_preference","_this2","CMIEvaluationComments","_this$comments","BaseCMI","comments_children","INVALID_SET_VALUE","_this3","student_data_children","_tries_during_lesson","tries","CMITries","_this$tries","mastery_score","max_time_allowed","time_limit_action","tries_during_lesson","throwReadOnlyError","CMIStudentData","tries_children","_this4","_status","_time","score","CMIScore","score_children","score_range","invalidTypeCode","invalidRangeCode","VALUE_OUT_OF_RANGE","_this$score","status","time","check12ValidFormat","CMIStatus2","CMITime","_this5","_content","_location","_time2","content","location","CMIString256","_this6","_event","event","throwWriteOnlyError","NAVEvent","checkValidFormat","regexPattern","allowEmptyString","checkValidRange","rangePattern","ranges","_initialized","_ref","decimalRegex","_children2","_score_range","_invalid_error_code","_invalid_type_code","_invalid_range_code","_decimal_regex","_raw","_min","_max","scorm12_regex","CMIDecimal","raw","min","_children","_ref2","children","_errorCode","_children3","WRITE_ONLY_ELEMENT","throwInvalidValueError","check12ValidRange","_version2","_suspend_data","_launch_data","_comments","_comments_from_lms","CMICore","CMIObjectives","CMIStudentPreference","CMIInteractions","_this$core","_this$objectives","_this$student_prefere","_this$interactions","CMIString4096","core_children","_student_id","_student_name","_lesson_location","_credit","_lesson_status","_entry","_total_time","_lesson_mode","_exit","_session_time","addHHMMSSTimeStrings","CMITimespan","student_id","student_name","lesson_location","credit","lesson_status","entry","total_time","lesson_mode","exit","session_time","CMIStatus","CMIExit","objectives_children","_children4","_mastery_score","_max_time_allowed","_time_limit_action","_children5","student_preference_children","_audio","_language","_speed","_text","audio","language","speed","text","CMISInteger","audio_range","speed_range","text_range","interactions_children","_id","_type","_weighting","_student_response","_result","_latency","correct_responses_children","_this$objectives2","_this$correct_respons","id","weighting","student_response","latency","CMIIdentifier","CMIType","weighting_range","CMIFeedback","CMIResult","_id2","_this7","_id3","_this8","_pattern","throwTypeMismatchError","check2004ValidFormat","check2004ValidRange","_completion_status","_completion_threshold","_learner_id","_learner_name","_mode","_progress_measure","_scaled_passing_score","_success_status","learner_preference","CMILearnerPreference","Scorm2004CMIScore","comments_from_learner","CMICommentsFromLearner","CMICommentsFromLMS","_this$learner_prefere","_this$comments_from_l","_this$comments_from_l2","addTwoDurations","completion_status","completion_threshold","learner_id","learner_name","mode","progress_measure","scaled_passing_score","success_status","CMICStatus","CMIString1000","progress_range","CMISStatus","CMIString64000","_audio_level","_delivery_speed","_audio_captioning","audio_level","delivery_speed","audio_captioning","CMILang","_timestamp","_learner_response","_description","timestamp","learner_response","description","CMILongIdentifier","learner_responses","CMILangString250","_success_status2","_completion_status2","_progress_measure2","_description2","_this$score2","_scaled","scaled","scaled_range","readOnlyAfterInit","arguments","_comment","_location2","_timestamp2","_readOnlyAfterInit","comment","CMILangString4000","CMIString250","_this9","ADLNav","_this$nav","_this10","_request","request_valid","ADLNavRequestValid","_this$request_valid","request","_this11","_continue","_previous","_temp","_target","_temp2","previous","continue","_","101","201","202","203","301","401","402","403","404","405","_objectSpread","0","102","103","104","111","112","113","122","123","132","133","142","143","351","391","406","407","408","INITIALIZATION_FAILED","TERMINATION_FAILURE","ARGUMENT_ERROR","CHILDREN_ERROR","COUNT_ERROR","GENERAL_GET_FAILURE","GENERAL_COMMIT_FAILURE","UNIMPLEMENTED_ELEMENT","MULTIPLE_TERMINATIONS","common_values","validResult","invalidResult","valid0To1Range","invalid0To1Range","valid0To100Range","invalid0To100Range","validScaledRange","invalidScaledRange","validIntegerScaledRange","invalidIntegerScaledRange","scorm12_values","validLessonStatus","invalidLessonStatus","validExit","invalidExit","validType","invalidType","validSpeedRange","invalidSpeedRange","validScoreRange","invalidScoreRange","validTime","invalidTime","validTimestamp","invalidTimestamp","scorm2004_values","validTimestamps","invalidTimestamps","validCStatus","invalidCStatus","validSStatus","invalidSStatus","validISO8601Durations","invalidISO8601Durations","validComment","repeat","invalidComment","validDescription","invalidDescription","validNavRequest","invalidNavRequest","aa","ab","ae","af","ak","am","an","ar","as","av","ay","az","ba","be","bg","bh","bi","bm","bn","bo","br","bs","ca","ce","ch","co","cr","cs","cu","cv","cy","da","de","dv","dz","ee","el","en","eo","es","et","eu","fa","ff","fi","fj","fo","fr","fy","ga","gd","gl","gn","gu","gv","ha","he","hi","ho","hr","ht","hu","hy","hz","ia","ie","ig","ii","ik","io","is","it","iu","ja","jv","ka","kg","ki","kj","kk","kl","km","kn","ko","kr","ks","ku","kv","kw","ky","la","lb","lg","li","ln","lo","lt","lu","lv","mg","mh","mi","mk","ml","mn","mo","mr","ms","mt","my","na","nb","nd","ne","ng","nl","nn","no","nr","nv","ny","oc","oj","om","or","os","pa","pi","pl","ps","pt","qu","rm","rn","ro","ru","rw","sa","sc","sd","se","sg","sh","si","sk","sl","sm","sn","so","sq","sr","ss","st","su","sv","sw","ta","te","tg","th","ti","tk","tl","tn","to","tr","ts","tt","tw","ty","ug","uk","ur","uz","ve","vi","vo","wa","wo","xh","yi","yo","za","zh","zu","aar","abk","ave","afr","aka","amh","arg","ara","asm","ava","aym","aze","bak","bel","bul","bih","bis","bam","ben","tib","bod","bre","bos","cat","che","cha","cos","cre","cze","ces","chu","chv","wel","cym","dan","ger","deu","div","dzo","ewe","gre","ell","eng","epo","spa","est","baq","eus","per","fas","ful","fin","fij","fao","fre","fra","fry","gle","gla","glg","grn","guj","glv","hau","heb","hin","hmo","hrv","hat","hun","arm","hye","her","ina","ind","ile","ibo","iii","ipk","ido","ice","isl","ita","iku","jpn","jav","geo","kat","kon","kik","kua","kaz","kal","khm","kan","kor","kau","kas","kur","kom","cor","kir","lat","ltz","lug","lim","lin","lao","lit","lub","lav","mlg","mah","mao","mri","mac","mkd","mal","mon","mol","mar","may","msa","mlt","bur","mya","nau","nob","nde","nep","ndo","dut","nld","nno","nor","nbl","nya","oci","oji","orm","ori","oss","pan","pli","pol","pus","por","que","roh","run","rum","ron","rus","kin","san","srd","snd","sme","sag","slo","sin","slk","slv","smo","sna","som","alb","sqi","srp","ssw","sot","sun","swe","swa","tam","tel","tgk","tha","tir","tuk","tgl","tsn","ton","tur","tso","tat","twi","tah","uig","ukr","urd","uzb","ven","vie","vol","wln","wol","xho","yid","yor","zha","chi","zho","zul","_field_values","CMIInteger","CMIIndex","join","CMIString200","CMIString4000","CMILangString250cr","CMIShortIdentifier","CMIIndexStore","NAVBoolean","NAVTarget","true-false","choice","fill-in","long-fill-in","matching","performance","sequencing","likert","numeric","other","getSecondsAsHHMMSS","totalSeconds","hours","Math","floor","SECONDS_PER_HOUR","dateObj","Date","minutes","getUTCMinutes","seconds","getSeconds","toString","padStart","getSecondsAsISODuration","duration","remainder","designations","forEach","_slicedToArray","sign","current_seconds","indexOf","getTimeAsSeconds","timeString","timeRegex","getDurationAsSeconds","durationRegex","_ref3","exec","_ref4","years","months","days","now","anchor","setFullYear","getFullYear","setMonth","getMonth","setDate","getDate","setHours","getHours","setMinutes","getMinutes","setSeconds","milliseconds","toFixed","setMilliseconds","getMilliseconds","first","second","SECONDS_PER_SECOND","SECONDS_PER_MINUTE","SECONDS_PER_DAY"],"mappings":"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uBAAwB,IACxB1c,qBAAsB,IACtB2c,sBAAuB,IACvBxb,sBAAuB,IACvBhB,kBAAmB,IACnB0P,mBAAoB,IACpB3G,cAAe,IACf6D,mBAAoB,IACpBtF,2BAA4B;;q1BC7EhC,IAAMoV,gBACJC,aACE,UACA,QACA,gBACA,WAEFC,eACE,SACA,QACA,WAGFC,gBACE,MACA,OACA,MACA,OAEFC,kBACE,KACA,OACA,MACA,OAGFC,kBACE,IACA,KACA,OAEFC,oBACE,UACA,OACA,MAGFC,kBACE,IACA,MACA,IACA,OACA,MAEFC,oBACE,OACA,OACA,OACA,KACA,OAGFC,yBACE,IACA,IACA,MAEFC,2BACE,OACA,OACA,MACA,OACA,OACA,KACA,QAISC,eAAcvC,iBACtB4B,kBACDY,mBACE,SACA,YACA,SACA,aACA,WAEFC,qBACE,SACA,IACA,IACA,IACA,OACA,QACA,YAGFC,WACE,WACA,UACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,WACA,cACA,aACA,SACA,WAEFC,aACE,UACA,QACA,UAGFC,iBACE,IACA,KACA,MACA,KACA,MACA,QAEFC,mBACE,UACA,OACA,OACA,MACA,UACA,UAGFC,iBACE,IACA,QACA,OAEFC,mBACE,UACA,OACA,KACA,MACA,UACA,UAEFf,oBACE,UACA,OACA,MAGFgB,WACE,WACA,WACA,YAEFC,aACE,WACA,cACA,UACA,eACA,iBAGFC,gBACE,WACA,cACA,WACA,YAEFC,kBACE,UACA,eACA,wDAKC,IAAMC,kBAAgBtD,iBACxB4B,kBAED2B,iBACE,aACA,mBACA,yBACA,cAEFC,mBACE,cACA,0BACA,yBACA,aACA,aACA,YACA,UACA,aAGFC,cACE,YACA,aACA,gBACA,WAEFC,gBACE,WACA,SACA,UAGFC,cACE,SACA,SACA,WAEFC,gBACE,WACA,aACA,IACA,KAGFlB,WACE,WACA,UACA,SACA,UAEFC,aACE,QACA,OACA,SAGFC,WACE,aACA,SACA,UACA,eACA,WACA,cACA,aACA,SACA,UACA,SAEFC,aACE,UACA,QACA,UAGFG,iBACE,IACA,KACA,MACA,SACA,KACA,SAEFC,mBACE,UACA,OACA,UACA,UAGFY,uBACE,mBACA,UACA,MACA,SAEFC,yBACE,WACA,OACA,QACA,KAGFC,cACE,+BACA,kCACA,sBAAwB,IAAIC,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFC,gBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAID,OAAO,MACnC,uBAAyB,IAAIA,OAAO,OAGtCE,kBACE,+BACA,kCACA,sBAAwB,IAAIF,OAAO,KACnC,kBACA,mBACA,cACA,WACA,IAEFG,oBACE,YACA,aACA,uCACA,mBACA,sBAAwB,IAAIH,OAAO,KACnC,uBAAyB,IAAIA,OAAO,MAGtCI,iBACE,WACA,WACA,OACA,UACA,UACA,aACA,cAEFC,mBACE,QACA,OACA,OACA;;kGC1UC,IAAMzV,kBACX0V,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMnP,GAAM,KAClEoP,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAAMC,GAAM,KAClEC,GAAM,K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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","// @flow\nimport Scorm12API from './Scorm12API';\nimport {\n  CMI,\n  CMIEvaluationCommentsObject,\n  CMITriesObject,\n  NAV,\n} from './cmi/aicc_cmi';\n\n/**\n * The AICC API class\n */\nexport default class AICC extends Scorm12API {\n  /**\n   * Constructor to create AICC API object\n   */\n  constructor() {\n    super();\n\n    this.cmi = new CMI();\n    this.nav = new NAV();\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild = super.getChildElement(CMIElement, value, foundFirstIndex);\n\n    if (!newChild) {\n      if (this.stringMatches(CMIElement, 'cmi\\\\.evaluation\\\\.comments\\\\.\\\\d')) {\n        newChild = new CMIEvaluationCommentsObject();\n      } else if (this.stringMatches(CMIElement, 'cmi\\\\.student_data\\\\.tries\\\\.\\\\d')) {\n        newChild = new CMITriesObject();\n      }\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {AICC} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.nav = newAPI.nav;\n  }\n}\n","// @flow\nimport {CMIArray} from './cmi/common';\nimport {ValidationError} from './exceptions';\n\nconst api_constants = {\n  SCORM_TRUE: 'true',\n  SCORM_FALSE: 'false',\n  STATE_NOT_INITIALIZED: 0,\n  STATE_INITIALIZED: 1,\n  STATE_TERMINATED: 2,\n  LOG_LEVEL_DEBUG: 1,\n  LOG_LEVEL_INFO: 2,\n  LOG_LEVEL_WARNING: 3,\n  LOG_LEVEL_ERROR: 4,\n  LOG_LEVEL_NONE: 5,\n};\n\n/**\n * Base API class for AICC, SCORM 1.2, and SCORM 2004. Should be considered\n * abstract, and never initialized on it's own.\n */\nexport default class BaseAPI {\n  #timeout;\n  #error_codes;\n  cmi;\n\n  /**\n   * Constructor for Base API class. Sets some shared API fields, as well as\n   * sets up options for the API.\n   * @param {object} error_codes\n   */\n  constructor(error_codes) {\n    if (new.target === BaseAPI) {\n      throw new TypeError('Cannot construct BaseAPI instances directly');\n    }\n    this.currentState = api_constants.STATE_NOT_INITIALIZED;\n    this.apiLogLevel = api_constants.LOG_LEVEL_ERROR;\n    this.lastErrorCode = 0;\n    this.listenerArray = [];\n\n    this.#timeout = null;\n    this.#error_codes = error_codes;\n  }\n\n  /**\n   * Initialize the API\n   * @param {string} callbackName\n   * @param {string} initializeMessage\n   * @param {string} terminationMessage\n   * @return {string}\n   */\n  initialize(\n      callbackName: String,\n      initializeMessage?: String,\n      terminationMessage?: String) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.isInitialized()) {\n      this.throwSCORMError(this.#error_codes.INITIALIZED, initializeMessage);\n    } else if (this.isTerminated()) {\n      this.throwSCORMError(this.#error_codes.TERMINATED, terminationMessage);\n    } else {\n      this.currentState = api_constants.STATE_INITIALIZED;\n      this.lastErrorCode = 0;\n      returnValue = api_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Terminates the current run of the API\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  terminate(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.TERMINATION_BEFORE_INIT,\n        this.#error_codes.MULTIPLE_TERMINATION)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      this.currentState = api_constants.STATE_TERMINATED;\n      returnValue = api_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Get the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  getValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement: String) {\n    let returnValue;\n\n    if (this.checkState(checkTerminated,\n        this.#error_codes.RETRIEVE_BEFORE_INIT,\n        this.#error_codes.RETRIEVE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = this.getCMIValue(CMIElement);\n      this.processListeners(callbackName, CMIElement);\n    }\n\n    this.apiLog(callbackName, CMIElement, ': returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Sets the value of the CMIElement.\n   *\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setValue(\n      callbackName: String,\n      checkTerminated: boolean,\n      CMIElement,\n      value) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.STORE_BEFORE_INIT,\n        this.#error_codes.STORE_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      try {\n        returnValue = this.setCMIValue(CMIElement, value);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          this.lastErrorCode = e.errorCode;\n          returnValue = api_constants.SCORM_FALSE;\n        } else {\n          this.throwSCORMError(this.#error_codes.GENERAL);\n        }\n      }\n      this.processListeners(callbackName, CMIElement, value);\n    }\n\n    if (returnValue === undefined) {\n      returnValue = api_constants.SCORM_FALSE;\n    }\n\n    this.apiLog(callbackName, CMIElement,\n        ': ' + value + ': result: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   * @param {string} callbackName\n   * @param {boolean} checkTerminated\n   * @return {string}\n   */\n  commit(\n      callbackName: String,\n      checkTerminated: boolean) {\n    let returnValue = api_constants.SCORM_FALSE;\n\n    if (this.checkState(checkTerminated, this.#error_codes.COMMIT_BEFORE_INIT,\n        this.#error_codes.COMMIT_AFTER_TERM)) {\n      if (checkTerminated) this.lastErrorCode = 0;\n      returnValue = api_constants.SCORM_TRUE;\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n    this.clearSCORMError(returnValue);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns last error code\n   * @param {string} callbackName\n   * @return {string}\n   */\n  getLastError(callbackName: String) {\n    const returnValue = String(this.lastErrorCode);\n\n    this.processListeners(callbackName);\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getErrorString(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {string} callbackName\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  getDiagnostic(callbackName: String, CMIErrorCode) {\n    let returnValue = '';\n\n    if (CMIErrorCode !== null && CMIErrorCode !== '') {\n      returnValue = this.getLmsErrorMessageDetails(CMIErrorCode, true);\n      this.processListeners(callbackName);\n    }\n\n    this.apiLog(callbackName, null, 'returned: ' + returnValue,\n        api_constants.LOG_LEVEL_INFO);\n\n    return returnValue;\n  }\n\n  /**\n   * Checks the LMS state and ensures it has been initialized.\n   *\n   * @param {boolean} checkTerminated\n   * @param {number} beforeInitError\n   * @param {number} afterTermError\n   * @return {boolean}\n   */\n  checkState(\n      checkTerminated: boolean,\n      beforeInitError: number,\n      afterTermError?: number) {\n    if (this.isNotInitialized()) {\n      this.throwSCORMError(beforeInitError);\n      return false;\n    } else if (checkTerminated && this.isTerminated()) {\n      this.throwSCORMError(afterTermError);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Logging for all SCORM actions\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} logMessage\n   * @param {number}messageLevel\n   */\n  apiLog(\n      functionName: String,\n      CMIElement: String,\n      logMessage: String,\n      messageLevel: number) {\n    logMessage = this.formatMessage(functionName, CMIElement, logMessage);\n\n    if (messageLevel >= this.apiLogLevel) {\n      switch (messageLevel) {\n        case api_constants.LOG_LEVEL_ERROR:\n          console.error(logMessage);\n          break;\n        case api_constants.LOG_LEVEL_WARNING:\n          console.warn(logMessage);\n          break;\n        case api_constants.LOG_LEVEL_INFO:\n          console.info(logMessage);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Formats the SCORM messages for easy reading\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {string} message\n   * @return {string}\n   */\n  formatMessage(functionName: String, CMIElement: String, message: String) {\n    const baseLength = 20;\n    let messageString = '';\n\n    messageString += functionName;\n\n    let fillChars = baseLength - messageString.length;\n\n    for (let i = 0; i < fillChars; i++) {\n      messageString += ' ';\n    }\n\n    messageString += ': ';\n\n    if (CMIElement) {\n      const CMIElementBaseLength = 70;\n\n      messageString += CMIElement;\n\n      fillChars = CMIElementBaseLength - messageString.length;\n\n      for (let j = 0; j < fillChars; j++) {\n        messageString += ' ';\n      }\n    }\n\n    if (message) {\n      messageString += message;\n    }\n\n    return messageString;\n  }\n\n  /**\n   * Checks to see if {str} contains {tester}\n   *\n   * @param {string} str String to check against\n   * @param {string} tester String to check for\n   * @return {boolean}\n   */\n  stringMatches(str: String, tester: String) {\n    return str && tester && str.match(tester);\n  }\n\n  /**\n   * Check to see if the specific object has the given property\n   * @param {*} refObject\n   * @param {string} attribute\n   * @return {boolean}\n   * @private\n   */\n  _checkObjectHasProperty(refObject, attribute: String) {\n    return Object.hasOwnProperty.call(refObject, attribute) ||\n        Object.getOwnPropertyDescriptor(\n            Object.getPrototypeOf(refObject), attribute) ||\n        (attribute in refObject);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {(string|number)} _errorNumber\n   * @param {boolean} _detail\n   * @return {string}\n   * @abstract\n   */\n  getLmsErrorMessageDetails(_errorNumber, _detail) {\n    throw new Error(\n        'The getLmsErrorMessageDetails method has not been implemented');\n  }\n\n  /**\n   * Gets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @return {string}\n   * @abstract\n   */\n  getCMIValue(_CMIElement) {\n    throw new Error('The getCMIValue method has not been implemented');\n  }\n\n  /**\n   * Sets the value for the specific element.\n   * APIs that inherit BaseAPI should override this function\n   *\n   * @param {string} _CMIElement\n   * @param {any} _value\n   * @return {string}\n   * @abstract\n   */\n  setCMIValue(_CMIElement, _value) {\n    throw new Error('The setCMIValue method has not been implemented');\n  }\n\n  /**\n   * Shared API method to set a valid for a given element.\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  _commonSetCMIValue(\n      methodName: String, scorm2004: boolean, CMIElement, value) {\n    if (!CMIElement || CMIElement === '') {\n      return api_constants.SCORM_FALSE;\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let returnValue = api_constants.SCORM_FALSE;\n    let foundFirstIndex = false;\n\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      const attribute = structure[i];\n\n      if (i === structure.length - 1) {\n        if (scorm2004 && (attribute.substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          this.throwSCORMError(this.#error_codes.READ_ONLY_ELEMENT);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        } else {\n          if (this.stringMatches(CMIElement, '\\\\.correct_responses\\\\.\\\\d')) {\n            this.validateCorrectResponse(CMIElement, value);\n          }\n\n          if (!scorm2004 || this.lastErrorCode === 0) {\n            refObject[attribute] = value;\n            returnValue = api_constants.SCORM_TRUE;\n          }\n        }\n      } else {\n        refObject = refObject[attribute];\n        if (!refObject) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          break;\n        }\n\n        if (refObject instanceof CMIArray) {\n          const index = parseInt(structure[i + 1], 10);\n\n          // SCO is trying to set an item on an array\n          if (!isNaN(index)) {\n            const item = refObject.childArray[index];\n\n            if (item) {\n              refObject = item;\n            } else {\n              const newChild = this.getChildElement(CMIElement, value,\n                  foundFirstIndex);\n              foundFirstIndex = true;\n\n              if (!newChild) {\n                this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n              } else {\n                if (refObject.initialized) newChild.initialize();\n\n                refObject.childArray.push(newChild);\n                refObject = newChild;\n              }\n            }\n\n            // Have to update i value to skip the array position\n            i++;\n          }\n        }\n      }\n    }\n\n    if (returnValue === api_constants.SCORM_FALSE) {\n      this.apiLog(methodName, null,\n          `There was an error setting the value for: ${CMIElement}, value of: ${value}`,\n          api_constants.LOG_LEVEL_WARNING);\n    }\n\n    return returnValue;\n  }\n\n  /**\n   * Abstract method for validating that a response is correct.\n   *\n   * @param {string} _CMIElement\n   * @param {*} _value\n   */\n  validateCorrectResponse(_CMIElement, _value) {\n    // just a stub method\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   * APIs that inherit BaseAPI should override this method.\n   *\n   * @param {string} _CMIElement - unused\n   * @param {*} _value - unused\n   * @param {boolean} _foundFirstIndex - unused\n   * @return {*}\n   * @abstract\n   */\n  getChildElement(_CMIElement, _value, _foundFirstIndex) {\n    throw new Error('The getChildElement method has not been implemented');\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} methodName\n   * @param {boolean} scorm2004\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  _commonGetCMIValue(methodName: String, scorm2004: boolean, CMIElement) {\n    if (!CMIElement || CMIElement === '') {\n      return '';\n    }\n\n    const structure = CMIElement.split('.');\n    let refObject = this;\n    let attribute = null;\n\n    const uninitializedErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) has not been initialized.`;\n    const invalidErrorMessage = `The data model element passed to ${methodName} (${CMIElement}) is not a valid SCORM data model element.`;\n    const invalidErrorCode = scorm2004 ?\n        this.#error_codes.UNDEFINED_DATA_MODEL :\n        this.#error_codes.GENERAL;\n\n    for (let i = 0; i < structure.length; i++) {\n      attribute = structure[i];\n\n      if (!scorm2004) {\n        if (i === structure.length - 1) {\n          if (!this._checkObjectHasProperty(refObject, attribute)) {\n            this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n            return;\n          }\n        }\n      } else {\n        if ((String(attribute).substr(0, 8) === '{target=') &&\n            (typeof refObject._isTargetValid == 'function')) {\n          const target = String(attribute).\n              substr(8, String(attribute).length - 9);\n          return refObject._isTargetValid(target);\n        } else if (!this._checkObjectHasProperty(refObject, attribute)) {\n          this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n          return;\n        }\n      }\n\n      refObject = refObject[attribute];\n      if (!refObject) {\n        this.throwSCORMError(invalidErrorCode, invalidErrorMessage);\n        break;\n      }\n\n      if (refObject instanceof CMIArray) {\n        const index = parseInt(structure[i + 1], 10);\n\n        // SCO is trying to set an item on an array\n        if (!isNaN(index)) {\n          const item = refObject.childArray[index];\n\n          if (item) {\n            refObject = item;\n          } else {\n            this.throwSCORMError(this.#error_codes.VALUE_NOT_INITIALIZED,\n                uninitializedErrorMessage);\n            break;\n          }\n\n          // Have to update i value to skip the array position\n          i++;\n        }\n      }\n    }\n\n    if (refObject === null || refObject === undefined) {\n      if (!scorm2004) {\n        if (attribute === '_children') {\n          this.throwSCORMError(202);\n        } else if (attribute === '_count') {\n          this.throwSCORMError(203);\n        }\n      }\n    } else {\n      return refObject;\n    }\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isInitialized() {\n    return this.currentState === api_constants.STATE_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_NOT_INITIALIZED\n   *\n   * @return {boolean}\n   */\n  isNotInitialized() {\n    return this.currentState === api_constants.STATE_NOT_INITIALIZED;\n  }\n\n  /**\n   * Returns true if the API's current state is STATE_TERMINATED\n   *\n   * @return {boolean}\n   */\n  isTerminated() {\n    return this.currentState === api_constants.STATE_TERMINATED;\n  }\n\n  /**\n   * Provides a mechanism for attaching to a specific SCORM event\n   *\n   * @param {string} listenerName\n   * @param {function} callback\n   */\n  on(listenerName: String, callback: function) {\n    if (!callback) return;\n\n    const listenerFunctions = listenerName.split(' ');\n    for (let i = 0; i < listenerFunctions.length; i++) {\n      const listenerSplit = listenerFunctions[i].split('.');\n      if (listenerSplit.length === 0) return;\n\n      const functionName = listenerSplit[0];\n\n      let CMIElement = null;\n      if (listenerSplit.length > 1) {\n        CMIElement = listenerName.replace(functionName + '.', '');\n      }\n\n      this.listenerArray.push({\n        functionName: functionName,\n        CMIElement: CMIElement,\n        callback: callback,\n      });\n    }\n  }\n\n  /**\n   * Processes any 'on' listeners that have been created\n   *\n   * @param {string} functionName\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  processListeners(functionName: String, CMIElement: String, value: any) {\n    for (let i = 0; i < this.listenerArray.length; i++) {\n      const listener = this.listenerArray[i];\n      const functionsMatch = listener.functionName === functionName;\n      const listenerHasCMIElement = !!listener.CMIElement;\n      const CMIElementsMatch = listener.CMIElement === CMIElement;\n\n      if (functionsMatch && (!listenerHasCMIElement || CMIElementsMatch)) {\n        listener.callback(CMIElement, value);\n      }\n    }\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} errorNumber\n   * @param {string} message\n   */\n  throwSCORMError(errorNumber: number, message: String) {\n    if (!message) {\n      message = this.getLmsErrorMessageDetails(errorNumber);\n    }\n\n    this.apiLog('throwSCORMError', null, errorNumber + ': ' + message,\n        api_constants.LOG_LEVEL_ERROR);\n\n    this.lastErrorCode = String(errorNumber);\n  }\n\n  /**\n   * Clears the last SCORM error code on success.\n   *\n   * @param {string} success\n   */\n  clearSCORMError(success: String) {\n    if (success !== undefined && success !== api_constants.SCORM_FALSE) {\n      this.lastErrorCode = 0;\n    }\n  }\n\n  /**\n   * Loads CMI data from a JSON object.\n   *\n   * @param {object} json\n   * @param {string} CMIElement\n   */\n  loadFromJSON(json, CMIElement) {\n    if (!this.isNotInitialized()) {\n      console.error(\n          'loadFromJSON can only be called before the call to lmsInitialize.');\n      return;\n    }\n\n    CMIElement = CMIElement || 'cmi';\n\n    for (const key in json) {\n      if ({}.hasOwnProperty.call(json, key) && json[key]) {\n        const currentCMIElement = CMIElement + '.' + key;\n        const value = json[key];\n\n        if (value['childArray']) {\n          for (let i = 0; i < value['childArray'].length; i++) {\n            this.loadFromJSON(value['childArray'][i],\n                currentCMIElement + '.' + i);\n          }\n        } else if (value.constructor === Object) {\n          this.loadFromJSON(value, currentCMIElement);\n        } else {\n          this.setCMIValue(currentCMIElement, value);\n        }\n      }\n    }\n  }\n\n  /**\n   * Render the CMI object to JSON for sending to an LMS.\n   *\n   * @return {string}\n   */\n  renderCMIToJSONString() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.stringify({cmi});\n  }\n\n  /**\n   * Returns a JS object representing the current cmi\n   * @return {object}\n   */\n  renderCMIToJSONObject() {\n    const cmi = this.cmi;\n    // Do we want/need to return fields that have no set value?\n    // return JSON.stringify({ cmi }, (k, v) => v === undefined ? null : v, 2);\n    return JSON.parse(JSON.stringify(cmi));\n  }\n\n  /**\n   * Gets the current total time as total_time + session_time\n   * APIs that inherit BaseAPI should override this function\n   */\n  getCurrentTotalTime() {\n    this.cmi.getCurrentTotalTime();\n  }\n\n  /**\n   * Throws a SCORM error\n   *\n   * @param {number} when - the number of milliseconds to wait before committing\n   */\n  scheduleCommit(when: number) {\n    this.#timeout = new ScheduledCommit(this, when);\n  }\n\n  /**\n   * Clears and cancels any currently scheduled commits\n   */\n  clearScheduledCommit() {\n    if (this.#timeout) {\n      this.#timeout.cancel();\n      this.#timeout = null;\n    }\n  }\n}\n\n/**\n * Private class that wraps a timeout call to the commit() function\n */\nclass ScheduledCommit {\n  #API;\n  #cancelled: false;\n  #timeout;\n\n  /**\n   * Constructor for ScheduledCommit\n   * @param {BaseAPI} API\n   * @param {number} when\n   */\n  constructor(API: any, when: number) {\n    this.#API = API;\n    this.#timeout = setTimeout(this.wrapper, when);\n  }\n\n  /**\n   * Cancel any currently scheduled commit\n   */\n  cancel() {\n    this.#cancelled = true;\n    if (this.#timeout) {\n      clearTimeout(this.#timeout);\n    }\n  }\n\n  /**\n   * Wrap the API commit call to check if the call has already been cancelled\n   */\n  wrapper() {\n    if (!this.#cancelled) {\n      this.#API.commit();\n    }\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  CMI,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm12_cmi';\nimport * as Utilities from './utilities';\nimport {scorm12_constants} from './constants/api_constants';\nimport {scorm12_error_codes} from './constants/error_codes';\nimport {scorm12_regex} from './constants/regex';\n\nconst constants = scorm12_constants;\n\n/**\n * API class for SCORM 1.2\n */\nexport default class Scorm12API extends BaseAPI {\n  /**\n   * Constructor for SCORM 1.2 API\n   */\n  constructor() {\n    super(scorm12_error_codes);\n\n    this.cmi = new CMI();\n    // Rename functions to match 1.2 Spec and expose to modules\n    this.LMSInitialize = this.lmsInitialize;\n    this.LMSFinish = this.lmsFinish;\n    this.LMSGetValue = this.lmsGetValue;\n    this.LMSSetValue = this.lmsSetValue;\n    this.LMSCommit = this.lmsCommit;\n    this.LMSGetLastError = this.lmsGetLastError;\n    this.LMSGetErrorString = this.lmsGetErrorString;\n    this.LMSGetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * lmsInitialize function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('LMSInitialize', 'LMS was already initialized!',\n        'LMS is already finished!');\n  }\n\n  /**\n   * LMSFinish function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsFinish() {\n    return this.terminate('LMSFinish', false);\n  }\n\n  /**\n   * LMSGetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('LMSGetValue', false, CMIElement);\n  }\n\n  /**\n   * LMSSetValue function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * LMSCommit function from SCORM 1.2 Spec\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('LMSCommit', false);\n  }\n\n  /**\n   * LMSGetLastError function from SCORM 1.2 Spec\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('LMSGetLastError');\n  }\n\n  /**\n   * LMSGetErrorString function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('LMSGetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * LMSGetDiagnostic function from SCORM 1.2 Spec\n   *\n   * @param {string} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('LMSGetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('LMSSetValue', false, CMIElement, value);\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('getCMIValue', false, CMIElement);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @param {boolean} foundFirstIndex\n   * @return {object}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      newChild = new CMIInteractionsCorrectResponsesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validates Correct Response values\n   *\n   * @param {string} CMIElement\n   * @param {*} value\n   * @return {boolean}\n   */\n  validateCorrectResponse(CMIElement, value) {\n    return true;\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {*} errorNumber\n   * @param {boolean }detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = 'No Error';\n    let detailMessage = 'No Error';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Replace the whole API with another\n   *\n   * @param {Scorm12API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n  }\n}\n","// @flow\nimport BaseAPI from './BaseAPI';\nimport {\n  ADL,\n  CMI,\n  CMICommentsObject,\n  CMIInteractionsCorrectResponsesObject,\n  CMIInteractionsObject,\n  CMIInteractionsObjectivesObject,\n  CMIObjectivesObject,\n} from './cmi/scorm2004_cmi';\nimport * as Util from './utilities';\nimport {scorm2004_constants} from './constants/api_constants';\nimport {scorm2004_error_codes} from './constants/error_codes';\nimport {correct_responses} from './constants/response_constants';\nimport {valid_languages} from './constants/language_constants';\nimport {scorm2004_regex} from './constants/regex';\n\nconst constants = scorm2004_constants;\n\n/**\n * API class for SCORM 2004\n */\nexport default class Scorm2004API extends BaseAPI {\n  #version: '1.0';\n\n  /**\n   * Constructor for SCORM 2004 API\n   */\n  constructor() {\n    super(scorm2004_error_codes);\n\n    this.cmi = new CMI();\n    this.adl = new ADL();\n\n    // Rename functions to match 2004 Spec and expose to modules\n    this.Initialize = this.lmsInitialize;\n    this.Terminate = this.lmsTerminate;\n    this.GetValue = this.lmsGetValue;\n    this.SetValue = this.lmsSetValue;\n    this.Commit = this.lmsCommit;\n    this.GetLastError = this.lmsGetLastError;\n    this.GetErrorString = this.lmsGetErrorString;\n    this.GetDiagnostic = this.lmsGetDiagnostic;\n  }\n\n  /**\n   * Getter for #version\n   * @return {string}\n   */\n  get version() {\n    return this.#version;\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsInitialize() {\n    this.cmi.initialize();\n    return this.initialize('Initialize');\n  }\n\n  /**\n   * @return {string} bool\n   */\n  lmsTerminate() {\n    return this.terminate('Terminate', true);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @return {string}\n   */\n  lmsGetValue(CMIElement) {\n    return this.getValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  lmsSetValue(CMIElement, value) {\n    return this.setValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Orders LMS to store all content parameters\n   *\n   * @return {string} bool\n   */\n  lmsCommit() {\n    return this.commit('Commit');\n  }\n\n  /**\n   * Returns last error code\n   *\n   * @return {string}\n   */\n  lmsGetLastError() {\n    return this.getLastError('GetLastError');\n  }\n\n  /**\n   * Returns the errorNumber error description\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetErrorString(CMIErrorCode) {\n    return this.getErrorString('GetErrorString', CMIErrorCode);\n  }\n\n  /**\n   * Returns a comprehensive description of the errorNumber error.\n   *\n   * @param {(string|number)} CMIErrorCode\n   * @return {string}\n   */\n  lmsGetDiagnostic(CMIErrorCode) {\n    return this.getDiagnostic('GetDiagnostic', CMIErrorCode);\n  }\n\n  /**\n   * Sets a value on the CMI Object\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @return {string}\n   */\n  setCMIValue(CMIElement, value) {\n    return this._commonSetCMIValue('SetValue', true, CMIElement, value);\n  }\n\n  /**\n   * Gets or builds a new child element to add to the array.\n   *\n   * @param {string} CMIElement\n   * @param {any} value\n   * @param {boolean} foundFirstIndex\n   * @return {any}\n   */\n  getChildElement(CMIElement, value, foundFirstIndex) {\n    let newChild;\n\n    if (this.stringMatches(CMIElement, 'cmi\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIObjectivesObject();\n    } else if (foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d\\\\.correct_responses\\\\.\\\\d')) {\n      const parts = CMIElement.split('.');\n      const index = Number(parts[2]);\n      const interaction = this.cmi.interactions.childArray[index];\n      if (typeof interaction.type === 'undefined') {\n        this.throwSCORMError(scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n      } else {\n        const interaction_type = interaction.type;\n        const interaction_count = interaction.correct_responses._count;\n        if (interaction_type === 'choice') {\n          for (let i = 0; i < interaction_count && this.lastErrorCode ===\n          0; i++) {\n            const response = interaction.correct_responses.childArray[i];\n            if (response.pattern === value) {\n              this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n            }\n          }\n        }\n\n        const response_type = correct_responses[interaction_type];\n        let nodes = [];\n        if (response_type.delimiter !== '') {\n          nodes = String(value).split(response_type.delimiter);\n        } else {\n          nodes[0] = value;\n        }\n\n        if (nodes.length > 0 && nodes.length <= response_type.max) {\n          this.checkCorrectResponseValue(interaction_type, nodes, value);\n        } else if (nodes.length > response_type.max) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Too Long');\n        }\n      }\n      if (this.lastErrorCode === 0) {\n        newChild = new CMIInteractionsCorrectResponsesObject();\n      }\n    } else if (foundFirstIndex && this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d\\\\.objectives\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObjectivesObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.interactions\\\\.\\\\d')) {\n      newChild = new CMIInteractionsObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.comments_from_learner\\\\.\\\\d')) {\n      newChild = new CMICommentsObject();\n    } else if (this.stringMatches(CMIElement, 'cmi\\\\.comments_from_lms\\\\.\\\\d')) {\n      newChild = new CMICommentsObject(true);\n    }\n\n    return newChild;\n  }\n\n  /**\n   * Validate correct response.\n   * @param {string} CMIElement\n   * @param {*} value\n   */\n  validateCorrectResponse(CMIElement, value) {\n    const parts = CMIElement.split('.');\n    const index = Number(parts[2]);\n    const pattern_index = Number(parts[4]);\n    const interaction = this.cmi.interactions.childArray[index];\n\n    const interaction_type = interaction.type;\n    const interaction_count = interaction.correct_responses._count;\n    if (interaction_type === 'choice') {\n      for (let i = 0; i < interaction_count && this.lastErrorCode === 0; i++) {\n        const response = interaction.correct_responses.childArray[i];\n        if (response.pattern === value) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n        }\n      }\n    }\n\n    const response_type = scorm2004_constants.correct_responses[interaction_type];\n    if (typeof response_type.limit !== 'undefined' || interaction_count <\n        response_type.limit) {\n      let nodes = [];\n      if (response_type.delimiter !== '') {\n        nodes = String(value).split(response_type.delimiter);\n      } else {\n        nodes[0] = value;\n      }\n\n      if (nodes.length > 0 && nodes.length <= response_type.max) {\n        this.checkCorrectResponseValue(interaction_type, nodes, value);\n      } else if (nodes.length > response_type.max) {\n        this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n            'Data Model Element Pattern Too Long');\n      }\n\n      if (this.lastErrorCode === 0 &&\n          (!response_type.duplicate ||\n              !this.checkDuplicatedPattern(interaction.correct_responses,\n                  pattern_index, value)) ||\n          (this.lastErrorCode === 0 && value === '')) {\n        // do nothing, we want the inverse\n      } else {\n        if (this.lastErrorCode === 0) {\n          this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n              'Data Model Element Pattern Already Exists');\n        }\n      }\n    } else {\n      this.throwSCORMError(scorm2004_error_codes.GENERAL_SET_FAILURE,\n          'Data Model Element Collection Limit Reached');\n    }\n  }\n\n  /**\n   * Gets a value from the CMI Object\n   *\n   * @param {string} CMIElement\n   * @return {*}\n   */\n  getCMIValue(CMIElement) {\n    return this._commonGetCMIValue('GetValue', true, CMIElement);\n  }\n\n  /**\n   * Returns the message that corresponds to errorNumber.\n   *\n   * @param {(string|number)} errorNumber\n   * @param {boolean} detail\n   * @return {string}\n   */\n  getLmsErrorMessageDetails(errorNumber, detail) {\n    let basicMessage = '';\n    let detailMessage = '';\n\n    // Set error number to string since inconsistent from modules if string or number\n    errorNumber = String(errorNumber);\n    if (constants.error_descriptions[errorNumber]) {\n      basicMessage = constants.error_descriptions[errorNumber].basicMessage;\n      detailMessage = constants.error_descriptions[errorNumber].detailMessage;\n    }\n\n    return detail ? detailMessage : basicMessage;\n  }\n\n  /**\n   * Check to see if a correct_response value has been duplicated\n   * @param {CMIArray} correct_response\n   * @param {number} current_index\n   * @param {*} value\n   * @return {boolean}\n   */\n  checkDuplicatedPattern = (correct_response, current_index, value) => {\n    let found = false;\n    const count = correct_response._count;\n    for (let i = 0; i < count && !found; i++) {\n      if (i !== current_index && correct_response.childArray[i] === value) {\n        found = true;\n      }\n    }\n    return found;\n  };\n\n  /**\n   * Checks for a valid correct_response value\n   * @param {string} interaction_type\n   * @param {Array} nodes\n   * @param {*} value\n   */\n  checkCorrectResponseValue(interaction_type, nodes, value) {\n    const response = correct_responses[interaction_type];\n    const formatRegex = new RegExp(response.format);\n    for (let i = 0; i < nodes.length && this.lastErrorCode === 0; i++) {\n      if (interaction_type.match(\n          '^(fill-in|long-fill-in|matching|performance|sequencing)$')) {\n        nodes[i] = this.removeCorrectResponsePrefixes(nodes[i]);\n      }\n\n      if (response.delimiter2 !== undefined) {\n        const values = nodes[i].split(response.delimiter2);\n        if (values.length === 2) {\n          const matches = values[0].match(formatRegex);\n          if (!matches) {\n            this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n          } else {\n            if (!values[1].match(new RegExp(response.format2))) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n        } else {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        }\n      } else {\n        const matches = nodes[i].match(formatRegex);\n        if ((!matches && value !== '') ||\n            (!matches && interaction_type === 'true-false')) {\n          this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n        } else {\n          if (interaction_type === 'numeric' && nodes.length > 1) {\n            if (Number(nodes[0]) > Number(nodes[1])) {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          } else {\n            if (nodes[i] !== '' && response.unique) {\n              for (let j = 0; j < i && this.lastErrorCode === 0; j++) {\n                if (nodes[i] === nodes[j]) {\n                  this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Remove prefixes from correct_response\n   * @param {string} node\n   * @return {*}\n   */\n  removeCorrectResponsePrefixes(node) {\n    let seenOrder = false;\n    let seenCase = false;\n    let seenLang = false;\n\n    const prefixRegex = new RegExp(\n        '^({(lang|case_matters|order_matters)=([^}]+)})');\n    let matches = node.match(prefixRegex);\n    let langMatches = null;\n    while (matches) {\n      switch (matches[2]) {\n        case 'lang':\n          langMatches = node.match(scorm2004_regex.CMILangcr);\n          if (langMatches) {\n            const lang = langMatches[3];\n            if (lang !== undefined && lang.length > 0) {\n              if (valid_languages[lang.toLowerCase()] === undefined) {\n                this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n              }\n            }\n          }\n          seenLang = true;\n          break;\n        case 'case_matters':\n          if (!seenLang && !seenOrder && !seenCase) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenCase = true;\n          break;\n        case 'order_matters':\n          if (!seenCase && !seenLang && !seenOrder) {\n            if (matches[3] !== 'true' && matches[3] !== 'false') {\n              this.throwSCORMError(scorm2004_error_codes.TYPE_MISMATCH);\n            }\n          }\n\n          seenOrder = true;\n          break;\n        default:\n          break;\n      }\n      node = node.substr(matches[1].length);\n      matches = node.match(prefixRegex);\n    }\n\n    return node;\n  }\n\n  /**\n   * Replace the whole API with another\n   * @param {Scorm2004API} newAPI\n   */\n  replaceWithAnotherScormAPI(newAPI) {\n    // Data Model\n    this.cmi = newAPI.cmi;\n    this.adl = newAPI.adl;\n  }\n}\n","import * as Scorm12CMI from './scorm12_cmi';\nimport {BaseCMI, CMIArray, CMIScore} from './common';\nimport {aicc_constants} from '../constants/api_constants';\nimport {aicc_regex} from '../constants/regex';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {\n  check12ValidFormat,\n  throwReadOnlyError,\n  throwWriteOnlyError,\n} from './scorm12_cmi';\n\nconst constants = aicc_constants;\nconst regex = aicc_regex;\n\n/**\n * CMI Class for AICC\n */\nexport class CMI extends Scorm12CMI.CMI {\n  /**\n   * Constructor for AICC CMI object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super(constants.cmi_children);\n\n    if (initialized) this.initialize();\n\n    this.student_data = new AICCCMIStudentData();\n    this.evaluation = new CMIEvaluation();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.student_data?.initialize();\n    this.evaluation?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n      'evaluation': this.evaluation,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * AICC Evaluation object\n */\nclass CMIEvaluation extends BaseCMI {\n  /**\n   * Constructor for AICC Evaluation object\n   */\n  constructor() {\n    super();\n\n    this.comments = new CMIEvaluationComments();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.comments?.initialize();\n  }\n\n  /**\n   * toJSON for cmi.evaluation object\n   * @return {{comments: CMIEvaluationComments}}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments': this.comments,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing AICC's cmi.evaluation.comments object\n */\nclass CMIEvaluationComments extends CMIArray {\n  /**\n   * Constructor for AICC Evaluation Comments object\n   */\n  constructor() {\n    super(constants.comments_children,\n        scorm12_error_codes.INVALID_SET_VALUE);\n  }\n}\n\n/**\n * StudentData class for AICC\n */\nclass AICCCMIStudentData extends Scorm12CMI.CMIStudentData {\n  /**\n   * Constructor for AICC StudentData object\n   */\n  constructor() {\n    super(constants.student_data_children);\n\n    this.tries = new CMITries();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.tries?.initialize();\n  }\n\n  #tries_during_lesson = '';\n\n  /**\n   * Getter for tries_during_lesson\n   * @return {string}\n   */\n  get tries_during_lesson() {\n    return this.#tries_during_lesson;\n  }\n\n  /**\n   * Setter for #tries_during_lesson. Sets an error if trying to set after\n   *  initialization.\n   * @param {string} tries_during_lesson\n   */\n  set tries_during_lesson(tries_during_lesson) {\n    !this.initialized ?\n        this.#tries_during_lesson = tries_during_lesson :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data object\n   * @return {\n   *    {\n   *      mastery_score: string,\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      tries: CMITries\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n      'tries': this.tries,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing the AICC cmi.student_data.tries object\n */\nexport class CMITries extends CMIArray {\n  /**\n   * Constructor for inline Tries Array class\n   */\n  constructor() {\n    super(aicc_constants.tries_children);\n  }\n}\n\n/**\n * Class for AICC Tries\n */\nexport class CMITriesObject extends BaseCMI {\n  /**\n   * Constructor for AICC Tries object\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #status = '';\n  #time = '';\n\n  /**\n   * Getter for #status\n   * @return {string}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_data.tries.n object\n   * @return {\n   *    {\n   *      status: string,\n   *      time: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'status': this.status,\n      'time': this.time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Evaluation Comments\n */\nexport class CMIEvaluationCommentsObject extends BaseCMI {\n  /**\n   * Constructor for Evaluation Comments\n   */\n  constructor() {\n    super();\n  }\n\n  #content = '';\n  #location = '';\n  #time = '';\n\n  /**\n   * Getter for #content\n   * @return {string}\n   */\n  get content() {\n    return this.#content;\n  }\n\n  /**\n   * Setter for #content\n   * @param {string} content\n   */\n  set content(content) {\n    if (check12ValidFormat(content, regex.CMIString256)) {\n      this.#content = content;\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check12ValidFormat(location, regex.CMIString256)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #time\n   * @return {string}\n   */\n  get time() {\n    return this.#time;\n  }\n\n  /**\n   * Setting for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * toJSON for cmi.evaulation.comments.n object\n   * @return {\n   *    {\n   *      content: string,\n   *      location: string,\n   *      time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'content': this.content,\n      'location': this.location,\n      'time': this.time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for AICC Navigation object\n */\nexport class NAV extends BaseCMI {\n  /**\n   * Constructor for NAV object\n   */\n  constructor() {\n    super();\n  }\n\n  #event = '';\n\n  /**\n   * Getter for #event\n   * @return {string}\n   */\n  get event() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#event;\n  }\n\n  /**\n   * Setter for #event\n   * @param {string} event\n   */\n  set event(event) {\n    if (check12ValidFormat(event, regex.NAVEvent)) {\n      this.#event = event;\n    }\n  }\n\n  /**\n   * toJSON for nav object\n   * @return {\n   *    {\n   *      event: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'event': this.event,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {ValidationError} from '../exceptions';\nimport {scorm12_regex} from '../constants/regex';\n\n/**\n * Check if the value matches the proper format. If not, throw proper error code.\n *\n * @param {string} value\n * @param {string} regexPattern\n * @param {number} errorCode\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function checkValidFormat(\n    value: String,\n    regexPattern: String,\n    errorCode: number,\n    allowEmptyString?: boolean) {\n  const formatRegex = new RegExp(regexPattern);\n  const matches = value.match(formatRegex);\n  if (allowEmptyString && value === '') {\n    return true;\n  }\n  if (value === undefined || !matches || matches[0] === '') {\n    throw new ValidationError(errorCode);\n  }\n  return true;\n}\n\n/**\n * Check if the value matches the proper range. If not, throw proper error code.\n *\n * @param {*} value\n * @param {string} rangePattern\n * @param {number} errorCode\n * @return {boolean}\n */\nexport function checkValidRange(\n    value: any, rangePattern: String, errorCode: number) {\n  const ranges = rangePattern.split('#');\n  value = value * 1.0;\n  if (value >= ranges[0]) {\n    if ((ranges[1] === '*') || (value <= ranges[1])) {\n      return true;\n    } else {\n      throw new ValidationError(errorCode);\n    }\n  } else {\n    throw new ValidationError(errorCode);\n  }\n}\n\n/**\n * Base class for API cmi objects\n */\nexport class BaseCMI {\n  jsonString = false;\n  #initialized = false;\n\n  /**\n   * Constructor for BaseCMI, just marks the class as abstract\n   */\n  constructor() {\n    if (new.target === BaseCMI) {\n      throw new TypeError('Cannot construct BaseCMI instances directly');\n    }\n  }\n\n  /**\n   * Getter for #initialized\n   * @return {boolean}\n   */\n  get initialized() {\n    return this.#initialized;\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    this.#initialized = true;\n  }\n}\n\n/**\n * Base class for cmi *.score objects\n */\nexport class CMIScore extends BaseCMI {\n  /**\n   * Constructor for *.score\n   * @param {string} score_children\n   * @param {string} score_range\n   * @param {string} max\n   * @param {number} invalidErrorCode\n   * @param {number} invalidTypeCode\n   * @param {number} invalidRangeCode\n   * @param {string} decimalRegex\n   */\n  constructor(\n      {\n        score_children,\n        score_range,\n        max,\n        invalidErrorCode,\n        invalidTypeCode,\n        invalidRangeCode,\n        decimalRegex,\n      }) {\n    super();\n\n    this.#_children = score_children ||\n        scorm12_constants.score_children;\n    this.#_score_range = !score_range ? false : scorm12_regex.score_range;\n    this.#max = (max || max === '') ? max : '100';\n    this.#_invalid_error_code = invalidErrorCode ||\n        scorm12_error_codes.INVALID_SET_VALUE;\n    this.#_invalid_type_code = invalidTypeCode ||\n        scorm12_error_codes.TYPE_MISMATCH;\n    this.#_invalid_range_code = invalidRangeCode ||\n        scorm12_error_codes.VALUE_OUT_OF_RANGE;\n    this.#_decimal_regex = decimalRegex ||\n        scorm12_regex.CMIDecimal;\n  }\n\n  #_children;\n  #_score_range;\n  #_invalid_error_code;\n  #_invalid_type_code;\n  #_invalid_range_code;\n  #_decimal_regex;\n  #raw = '';\n  #min = '';\n  #max;\n\n  /**\n   * Getter for _children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#_invalid_error_code);\n  }\n\n  /**\n   * Getter for #raw\n   * @return {string}\n   */\n  get raw() {\n    return this.#raw;\n  }\n\n  /**\n   * Setter for #raw\n   * @param {string} raw\n   */\n  set raw(raw) {\n    if (checkValidFormat(raw, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(raw, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#raw = raw;\n    }\n  }\n\n  /**\n   * Getter for #min\n   * @return {string}\n   */\n  get min() {\n    return this.#min;\n  }\n\n  /**\n   * Setter for #min\n   * @param {string} min\n   */\n  set min(min) {\n    if (checkValidFormat(min, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(min, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#min = min;\n    }\n  }\n\n  /**\n   * Getter for #max\n   * @return {string}\n   */\n  get max() {\n    return this.#max;\n  }\n\n  /**\n   * Setter for #max\n   * @param {string} max\n   */\n  set max(max) {\n    if (checkValidFormat(max, this.#_decimal_regex,\n        this.#_invalid_type_code) &&\n        (!this.#_score_range ||\n            checkValidRange(max, this.#_score_range,\n                this.#_invalid_range_code))) {\n      this.#max = max;\n    }\n  }\n\n  /**\n   * toJSON for *.score\n   * @return {{min: string, max: string, raw: string}}\n   */\n  toJSON() {\n    return {\n      'raw': this.raw,\n      'min': this.min,\n      'max': this.max,\n    };\n  }\n}\n\n/**\n * Base class for cmi *.n objects\n */\nexport class CMIArray extends BaseCMI {\n  /**\n   * Constructor cmi *.n arrays\n   * @param {string} children\n   * @param {number} errorCode\n   */\n  constructor({children, errorCode}) {\n    super();\n    this.#_children = children;\n    this.#errorCode = errorCode;\n    this.childArray = [];\n  }\n\n  #errorCode;\n  #_children;\n\n  /**\n   * Getter for _children\n   * @return {*}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for _children. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * Getter for _count\n   * @return {number}\n   */\n  get _count() {\n    return this.childArray.length;\n  }\n\n  /**\n   * Setter for _count. Just throws an error.\n   * @param {number} _count\n   */\n  set _count(_count) {\n    throw new ValidationError(this.#errorCode);\n  }\n\n  /**\n   * toJSON for *.n arrays\n   * @return {object}\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {};\n    for (let i = 0; i < this.childArray.length; i++) {\n      result[i + ''] = this.childArray[i];\n    }\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm12_constants} from '../constants/api_constants';\nimport {scorm12_error_codes} from '../constants/error_codes';\nimport {scorm12_regex} from '../constants/regex';\nimport {ValidationError} from '../exceptions';\nimport * as Utilities from '../utilities';\n\nconst constants = scorm12_constants;\nconst regex = scorm12_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nexport function throwReadOnlyError() {\n  throw new ValidationError(scorm12_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nexport function throwWriteOnlyError() {\n  throw new ValidationError(scorm12_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Invalid Set error\n */\nfunction throwInvalidValueError() {\n  throw new ValidationError(scorm12_error_codes.INVALID_SET_VALUE);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm12_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nexport function check12ValidRange(\n    value: any,\n    rangePattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidRange(value, rangePattern,\n      scorm12_error_codes.VALUE_OUT_OF_RANGE, allowEmptyString);\n}\n\n/**\n * Class representing the cmi object for SCORM 1.2\n */\nexport class CMI extends BaseCMI {\n  #_children = '';\n  #_version = '3.4';\n  #suspend_data = '';\n  #launch_data = '';\n  #comments = '';\n  #comments_from_lms = '';\n\n  student_data = null;\n\n  /**\n   * Constructor for the SCORM 1.2 cmi object\n   * @param {string} cmi_children\n   * @param {(CMIStudentData|AICCCMIStudentData)} student_data\n   * @param {boolean} initialized\n   */\n  constructor(cmi_children, student_data, initialized: boolean) {\n    super();\n\n    if (initialized) this.initialize();\n\n    this.#_children = cmi_children ? cmi_children : constants.cmi_children;\n    this.core = new CMICore();\n    this.objectives = new CMIObjectives();\n    this.student_data = student_data ? student_data : new CMIStudentData();\n    this.student_preference = new CMIStudentPreference();\n    this.interactions = new CMIInteractions();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.core?.initialize();\n    this.objectives?.initialize();\n    this.student_data?.initialize();\n    this.student_preference?.initialize();\n    this.interactions?.initialize();\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      suspend_data: string,\n   *      launch_data: string,\n   *      comments: string,\n   *      comments_from_lms: string,\n   *      core: CMICore,\n   *      objectives: CMIObjectives,\n   *      student_data: CMIStudentData,\n   *      student_preference: CMIStudentPreference,\n   *      interactions: CMIInteractions\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'suspend_data': this.suspend_data,\n      'launch_data': this.launch_data,\n      'comments': this.comments,\n      'comments_from_lms': this.comments_from_lms,\n      'core': this.core,\n      'objectives': this.objectives,\n      'student_data': this.student_data,\n      'student_preference': this.student_preference,\n      'interactions': this.interactions,\n    };\n    delete this.jsonString;\n    return result;\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   */\n  set _version(_version) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _children\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check12ValidFormat(suspend_data, regex.CMIString4096)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #comments\n   * @return {string}\n   */\n  get comments() {\n    return this.#comments;\n  }\n\n  /**\n   * Setter for #comments\n   * @param {string} comments\n   */\n  set comments(comments) {\n    if (check12ValidFormat(comments, regex.CMIString4096)) {\n      this.#comments = comments;\n    }\n  }\n\n  /**\n   * Getter for #comments_from_lms\n   * @return {string}\n   */\n  get comments_from_lms() {\n    return this.#comments_from_lms;\n  }\n\n  /**\n   * Setter for #comments_from_lms. Can only be called before  initialization.\n   * @param {string} comments_from_lms\n   */\n  set comments_from_lms(comments_from_lms) {\n    !this.initialized ?\n        this.#comments_from_lms = comments_from_lms :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return this.core.getCurrentTotalTime();\n  }\n}\n\n/**\n * Class representing the cmi.core object\n * @extends BaseCMI\n */\nclass CMICore extends BaseCMI {\n  /**\n   * Constructor for cmi.core\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  #_children = constants.core_children;\n  #student_id = '';\n  #student_name = '';\n  #lesson_location = '';\n  #credit = '';\n  #lesson_status = '';\n  #entry = '';\n  #total_time = '';\n  #lesson_mode = 'normal';\n  #exit = '';\n  #session_time = '00:00:00';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #student_id\n   * @return {string}\n   */\n  get student_id() {\n    return this.#student_id;\n  }\n\n  /**\n   * Setter for #student_id. Can only be called before  initialization.\n   * @param {string} student_id\n   */\n  set student_id(student_id) {\n    !this.initialized ? this.#student_id = student_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #student_name\n   * @return {string}\n   */\n  get student_name() {\n    return this.#student_name;\n  }\n\n  /**\n   * Setter for #student_name. Can only be called before  initialization.\n   * @param {string} student_name\n   */\n  set student_name(student_name) {\n    !this.initialized ?\n        this.#student_name = student_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_location\n   * @return {string}\n   */\n  get lesson_location() {\n    return this.#lesson_location;\n  }\n\n  /**\n   * Setter for #lesson_location\n   * @param {string} lesson_location\n   */\n  set lesson_location(lesson_location) {\n    if (check12ValidFormat(lesson_location, regex.CMIString256)) {\n      this.#lesson_location = lesson_location;\n    }\n  }\n\n  /**\n   * Getter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_status\n   * @return {string}\n   */\n  get lesson_status() {\n    return this.#lesson_status;\n  }\n\n  /**\n   * Setter for #lesson_status\n   * @param {string} lesson_status\n   */\n  set lesson_status(lesson_status) {\n    if (check12ValidFormat(lesson_status, regex.CMIStatus)) {\n      this.#lesson_status = lesson_status;\n    }\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #lesson_mode\n   * @return {string}\n   */\n  get lesson_mode() {\n    return this.#lesson_mode;\n  }\n\n  /**\n   * Setter for #lesson_mode. Can only be called before  initialization.\n   * @param {string} lesson_mode\n   */\n  set lesson_mode(lesson_mode) {\n    !this.initialized ? this.#lesson_mode = lesson_mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {*}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Setter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check12ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check12ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string}\n   */\n  getCurrentTotalTime() {\n    return Utilities.addHHMMSSTimeStrings(\n        this.#total_time,\n        this.#session_time,\n        new RegExp(scorm12_regex.CMITimespan)\n    );\n  }\n\n  /**\n   * toJSON for cmi.core\n   *\n   * @return {\n   *    {\n   *      student_name: string,\n   *      entry: string,\n   *      exit: string,\n   *      score: CMIScore,\n   *      student_id: string,\n   *      lesson_mode: string,\n   *      lesson_location: string,\n   *      lesson_status: string,\n   *      credit: string,\n   *      total_time: string,\n   *      session_time: *\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'student_id': this.student_id,\n      'student_name': this.student_name,\n      'lesson_location': this.lesson_location,\n      'credit': this.credit,\n      'lesson_status': this.lesson_status,\n      'entry': this.entry,\n      'total_time': this.total_time,\n      'lesson_mode': this.lesson_mode,\n      'exit': this.exit,\n      'session_time': this.session_time,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives object\n * @extends CMIArray\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_data object\n * @extends BaseCMI\n */\nexport class CMIStudentData extends BaseCMI {\n  #_children;\n  #mastery_score = '';\n  #max_time_allowed = '';\n  #time_limit_action = '';\n\n  /**\n   * Constructor for cmi.student_data\n   * @param {string} student_data_children\n   */\n  constructor(student_data_children) {\n    super();\n\n    this.#_children = student_data_children ?\n        student_data_children :\n        constants.student_data_children;\n  }\n\n  /**\n   * Getter for #_children\n   * @return {*}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #master_score\n   * @return {string}\n   */\n  get mastery_score() {\n    return this.#mastery_score;\n  }\n\n  /**\n   * Setter for #master_score. Can only be called before  initialization.\n   * @param {string} mastery_score\n   */\n  set mastery_score(mastery_score) {\n    !this.initialized ?\n        this.#mastery_score = mastery_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for cmi.student_data\n   *\n   * @return {\n   *    {\n   *      max_time_allowed: string,\n   *      time_limit_action: string,\n   *      mastery_score: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'mastery_score': this.mastery_score,\n      'max_time_allowed': this.max_time_allowed,\n      'time_limit_action': this.time_limit_action,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.student_preference object\n * @extends BaseCMI\n */\nclass CMIStudentPreference extends BaseCMI {\n  /**\n   * Constructor for cmi.student_preference\n   */\n  constructor() {\n    super();\n  }\n\n  #_children = constants.student_preference_children;\n  #audio = '';\n  #language = '';\n  #speed = '';\n  #text = '';\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwInvalidValueError();\n  }\n\n  /**\n   * Getter for #audio\n   * @return {string}\n   */\n  get audio() {\n    return this.#audio;\n  }\n\n  /**\n   * Setter for #audio\n   * @param {string} audio\n   */\n  set audio(audio) {\n    if (check12ValidFormat(audio, regex.CMISInteger) &&\n        check12ValidRange(audio, regex.audio_range)) {\n      this.#audio = audio;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check12ValidFormat(language, regex.CMIString256)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #speed\n   * @return {string}\n   */\n  get speed() {\n    return this.#speed;\n  }\n\n  /**\n   * Setter for #speed\n   * @param {string} speed\n   */\n  set speed(speed) {\n    if (check12ValidFormat(speed, regex.CMISInteger) &&\n        check12ValidRange(speed, regex.speed_range)) {\n      this.#speed = speed;\n    }\n  }\n\n  /**\n   * Getter for #text\n   * @return {string}\n   */\n  get text() {\n    return this.#text;\n  }\n\n  /**\n   * Setter for #text\n   * @param {string} text\n   */\n  set text(text) {\n    if (check12ValidFormat(text, regex.CMISInteger) &&\n        check12ValidRange(text, regex.text_range)) {\n      this.#text = text;\n    }\n  }\n\n  /**\n   * toJSON for cmi.student_preference\n   *\n   * @return {\n   *    {\n   *      audio: string,\n   *      language: string,\n   *      speed: string,\n   *      text: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio': this.audio,\n      'language': this.language,\n      'speed': this.speed,\n      'text': this.text,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions object\n * @extends BaseCMI\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.interactions\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n object\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm12_error_codes.INVALID_SET_VALUE,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  #id = '';\n  #time = '';\n  #type = '';\n  #weighting = '';\n  #student_response = '';\n  #result = '';\n  #latency = '';\n\n  /**\n   * Getter for #id. Should only be called during JSON export.\n   * @return {*}\n   */\n  get id() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #time. Should only be called during JSON export.\n   * @return {*}\n   */\n  get time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#time;\n  }\n\n  /**\n   * Setter for #time\n   * @param {string} time\n   */\n  set time(time) {\n    if (check12ValidFormat(time, regex.CMITime)) {\n      this.#time = time;\n    }\n  }\n\n  /**\n   * Getter for #type. Should only be called during JSON export.\n   * @return {*}\n   */\n  get type() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check12ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #weighting. Should only be called during JSON export.\n   * @return {*}\n   */\n  get weighting() {\n    return (!this.jsonString) ?\n        throwWriteOnlyError() :\n        this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check12ValidFormat(weighting, regex.CMIDecimal) &&\n        check12ValidRange(weighting, regex.weighting_range)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #student_response. Should only be called during JSON export.\n   * @return {*}\n   */\n  get student_response() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#student_response;\n  }\n\n  /**\n   * Setter for #student_response\n   * @param {string} student_response\n   */\n  set student_response(student_response) {\n    if (check12ValidFormat(student_response, regex.CMIFeedback, true)) {\n      this.#student_response = student_response;\n    }\n  }\n\n  /**\n   * Getter for #result. Should only be called during JSON export.\n   * @return {*}\n   */\n  get result() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check12ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency. Should only be called during JSON export.\n   * @return {*}\n   */\n  get latency() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check12ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      time: string,\n   *      type: string,\n   *      weighting: string,\n   *      student_response: string,\n   *      result: string,\n   *      latency: string,\n   *      objectives: CMIArray,\n   *      correct_responses: CMIArray\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'time': this.time,\n      'type': this.type,\n      'weighting': this.weighting,\n      'student_response': this.student_response,\n      'result': this.result,\n      'latency': this.latency,\n      'objectives': this.objectives,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new CMIScore(\n        {\n          score_children: constants.score_children,\n          score_range: regex.score_range,\n          invalidErrorCode: scorm12_error_codes.INVALID_SET_VALUE,\n          invalidTypeCode: scorm12_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm12_error_codes.VALUE_OUT_OF_RANGE,\n        });\n  }\n\n  #id = '';\n  #status = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #status\n   * @return {\"\"}\n   */\n  get status() {\n    return this.#status;\n  }\n\n  /**\n   * Setter for #status\n   * @param {string} status\n   */\n  set status(status) {\n    if (check12ValidFormat(status, regex.CMIStatus2)) {\n      this.#status = status;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   * @return {\n   *    {\n   *      id: string,\n   *      status: string,\n   *      score: CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'status': this.status,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.n.objectives.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  #id = '';\n\n  /**\n   * Getter for #id\n   * @return {\"\"}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check12ValidFormat(id, regex.CMIIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 1.2's cmi.interactions.correct_responses.n object\n * @extends BaseCMI\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  /**\n   * Constructor for cmi.interactions.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  #pattern = '';\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check12ValidFormat(pattern, regex.CMIFeedback, true)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.correct_responses.n\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nimport {\n  BaseCMI,\n  checkValidFormat,\n  checkValidRange,\n  CMIArray,\n  CMIScore,\n} from './common';\nimport {scorm2004_constants} from '../constants/api_constants';\nimport {scorm2004_regex} from '../constants/regex';\nimport {scorm2004_error_codes} from '../constants/error_codes';\nimport {learner_responses} from '../constants/response_constants';\nimport {ValidationError} from '../exceptions';\nimport * as Util from '../utilities';\n\nconst constants = scorm2004_constants;\nconst regex = scorm2004_regex;\n\n/**\n * Helper method for throwing Read Only error\n */\nfunction throwReadOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.READ_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Write Only error\n */\nfunction throwWriteOnlyError() {\n  throw new ValidationError(scorm2004_error_codes.WRITE_ONLY_ELEMENT);\n}\n\n/**\n * Helper method for throwing Type Mismatch error\n */\nfunction throwTypeMismatchError() {\n  throw new ValidationError(scorm2004_error_codes.TYPE_MISMATCH);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} regexPattern\n * @param {boolean} allowEmptyString\n * @return {boolean}\n */\nfunction check2004ValidFormat(\n    value: String,\n    regexPattern: String,\n    allowEmptyString?: boolean) {\n  return checkValidFormat(value, regexPattern,\n      scorm2004_error_codes.TYPE_MISMATCH, allowEmptyString);\n}\n\n/**\n * Helper method, no reason to have to pass the same error codes every time\n * @param {*} value\n * @param {string} rangePattern\n * @return {boolean}\n */\nfunction check2004ValidRange(value: any, rangePattern: String) {\n  return checkValidRange(value, rangePattern,\n      scorm2004_error_codes.VALUE_OUT_OF_RANGE);\n}\n\n/**\n * Class representing cmi object for SCORM 2004\n */\nexport class CMI extends BaseCMI {\n  #_version = '1.0';\n  #_children = constants.cmi_children;\n  #completion_status = 'unknown';\n  #completion_threshold = '';\n  #credit = 'credit';\n  #entry = '';\n  #exit = '';\n  #launch_data = '';\n  #learner_id = '';\n  #learner_name = '';\n  #location = '';\n  #max_time_allowed = '';\n  #mode = 'normal';\n  #progress_measure = '';\n  #scaled_passing_score = '';\n  #session_time = 'PT0H0M0S';\n  #success_status = 'unknown';\n  #suspend_data = '';\n  #time_limit_action = 'continue,no message';\n  #total_time = '0';\n\n  /**\n   * Constructor for the SCORM 2004 cmi object\n   * @param {boolean} initialized\n   */\n  constructor(initialized: boolean) {\n    super();\n\n    this.learner_preference = new CMILearnerPreference();\n    this.score = new Scorm2004CMIScore();\n    this.comments_from_learner = new CMICommentsFromLearner();\n    this.comments_from_lms = new CMICommentsFromLMS();\n    this.interactions = new CMIInteractions();\n    this.objectives = new CMIObjectives();\n\n    if (initialized) this.initialize();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.learner_preference?.initialize();\n    this.score?.initialize();\n    this.comments_from_learner?.initialize();\n    this.comments_from_lms?.initialize();\n    this.interactions?.initialize();\n    this.objectives?.initialize();\n  }\n\n  /**\n   * Getter for #_version\n   * @return {string}\n   * @private\n   */\n  get _version() {\n    return this.#_version;\n  }\n\n  /**\n   * Setter for #_version. Just throws an error.\n   * @param {string} _version\n   * @private\n   */\n  set _version(_version) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {number} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_threshold\n   * @return {string}\n   */\n  get completion_threshold() {\n    return this.#completion_threshold;\n  }\n\n  /**\n   * Setter for #completion_threshold. Can only be called before  initialization.\n   * @param {string} completion_threshold\n   */\n  set completion_threshold(completion_threshold) {\n    !this.initialized ?\n        this.#completion_threshold = completion_threshold :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Setter for #credit\n   * @return {string}\n   */\n  get credit() {\n    return this.#credit;\n  }\n\n  /**\n   * Setter for #credit. Can only be called before  initialization.\n   * @param {string} credit\n   */\n  set credit(credit) {\n    !this.initialized ? this.#credit = credit : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #entry\n   * @return {string}\n   */\n  get entry() {\n    return this.#entry;\n  }\n\n  /**\n   * Setter for #entry. Can only be called before  initialization.\n   * @param {string} entry\n   */\n  set entry(entry) {\n    !this.initialized ? this.#entry = entry : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #exit. Should only be called during JSON export.\n   * @return {string}\n   */\n  get exit() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#exit;\n  }\n\n  /**\n   * Getter for #exit\n   * @param {string} exit\n   */\n  set exit(exit) {\n    if (check2004ValidFormat(exit, regex.CMIExit)) {\n      this.#exit = exit;\n    }\n  }\n\n  /**\n   * Getter for #launch_data\n   * @return {string}\n   */\n  get launch_data() {\n    return this.#launch_data;\n  }\n\n  /**\n   * Setter for #launch_data. Can only be called before  initialization.\n   * @param {string} launch_data\n   */\n  set launch_data(launch_data) {\n    !this.initialized ? this.#launch_data = launch_data : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_id\n   * @return {string}\n   */\n  get learner_id() {\n    return this.#learner_id;\n  }\n\n  /**\n   * Setter for #learner_id. Can only be called before  initialization.\n   * @param {string} learner_id\n   */\n  set learner_id(learner_id) {\n    !this.initialized ? this.#learner_id = learner_id : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #learner_name\n   * @return {string}\n   */\n  get learner_name() {\n    return this.#learner_name;\n  }\n\n  /**\n   * Setter for #learner_name. Can only be called before  initialization.\n   * @param {string} learner_name\n   */\n  set learner_name(learner_name) {\n    !this.initialized ?\n        this.#learner_name = learner_name :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (check2004ValidFormat(location, regex.CMIString1000)) {\n      this.#location = location;\n    }\n  }\n\n  /**\n   * Getter for #max_time_allowed\n   * @return {string}\n   */\n  get max_time_allowed() {\n    return this.#max_time_allowed;\n  }\n\n  /**\n   * Setter for #max_time_allowed. Can only be called before  initialization.\n   * @param {string} max_time_allowed\n   */\n  set max_time_allowed(max_time_allowed) {\n    !this.initialized ?\n        this.#max_time_allowed = max_time_allowed :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #mode\n   * @return {string}\n   */\n  get mode() {\n    return this.#mode;\n  }\n\n  /**\n   * Setter for #mode. Can only be called before  initialization.\n   * @param {string} mode\n   */\n  set mode(mode) {\n    !this.initialized ? this.#mode = mode : throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #scaled_passing_score\n   * @return {string}\n   */\n  get scaled_passing_score() {\n    return this.#scaled_passing_score;\n  }\n\n  /**\n   * Setter for #scaled_passing_score. Can only be called before  initialization.\n   * @param {string} scaled_passing_score\n   */\n  set scaled_passing_score(scaled_passing_score) {\n    !this.initialized ?\n        this.#scaled_passing_score = scaled_passing_score :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #session_time. Should only be called during JSON export.\n   * @return {string}\n   */\n  get session_time() {\n    return (!this.jsonString) ? throwWriteOnlyError() : this.#session_time;\n  }\n\n  /**\n   * Setter for #session_time\n   * @param {string} session_time\n   */\n  set session_time(session_time) {\n    if (check2004ValidFormat(session_time, regex.CMITimespan)) {\n      this.#session_time = session_time;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #suspend_data\n   * @return {string}\n   */\n  get suspend_data() {\n    return this.#suspend_data;\n  }\n\n  /**\n   * Setter for #suspend_data\n   * @param {string} suspend_data\n   */\n  set suspend_data(suspend_data) {\n    if (check2004ValidFormat(suspend_data, regex.CMIString64000)) {\n      this.#suspend_data = suspend_data;\n    }\n  }\n\n  /**\n   * Getter for #time_limit_action\n   * @return {string}\n   */\n  get time_limit_action() {\n    return this.#time_limit_action;\n  }\n\n  /**\n   * Setter for #time_limit_action. Can only be called before  initialization.\n   * @param {string} time_limit_action\n   */\n  set time_limit_action(time_limit_action) {\n    !this.initialized ?\n        this.#time_limit_action = time_limit_action :\n        throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #total_time\n   * @return {string}\n   */\n  get total_time() {\n    return this.#total_time;\n  }\n\n  /**\n   * Setter for #total_time. Can only be called before  initialization.\n   * @param {string} total_time\n   */\n  set total_time(total_time) {\n    !this.initialized ? this.#total_time = total_time : throwReadOnlyError();\n  }\n\n  /**\n   * Adds the current session time to the existing total time.\n   *\n   * @return {string} ISO8601 Duration\n   */\n  getCurrentTotalTime() {\n    return Util.addTwoDurations(\n        this.#total_time,\n        this.#session_time,\n        scorm2004_regex.CMITimespan,\n    );\n  }\n\n  /**\n   * toJSON for cmi\n   *\n   * @return {\n   *    {\n   *      comments_from_learner: CMICommentsFromLearner,\n   *      comments_from_lms: CMICommentsFromLMS,\n   *      completion_status: string,\n   *      completion_threshold: string,\n   *      credit: string,\n   *      entry: string,\n   *      exit: string,\n   *      interactions: CMIInteractions,\n   *      launch_data: string,\n   *      learner_id: string,\n   *      learner_name: string,\n   *      learner_preference: CMILearnerPreference,\n   *      location: string,\n   *      max_time_allowed: string,\n   *      mode: string,\n   *      objectives: CMIObjectives,\n   *      progress_measure: string,\n   *      scaled_passing_score: string,\n   *      score: Scorm2004CMIScore,\n   *      session_time: string,\n   *      success_status: string,\n   *      suspend_data: string,\n   *      time_limit_action: string,\n   *      total_time: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comments_from_learner': this.comments_from_learner,\n      'comments_from_lms': this.comments_from_lms,\n      'completion_status': this.completion_status,\n      'completion_threshold': this.completion_threshold,\n      'credit': this.credit,\n      'entry': this.entry,\n      'exit': this.exit,\n      'interactions': this.interactions,\n      'launch_data': this.launch_data,\n      'learner_id': this.learner_id,\n      'learner_name': this.learner_name,\n      'learner_preference': this.learner_preference,\n      'location': this.location,\n      'max_time_allowed': this.max_time_allowed,\n      'mode': this.mode,\n      'objectives': this.objectives,\n      'progress_measure': this.progress_measure,\n      'scaled_passing_score': this.scaled_passing_score,\n      'score': this.score,\n      'session_time': this.session_time,\n      'success_status': this.success_status,\n      'suspend_data': this.suspend_data,\n      'time_limit_action': this.time_limit_action,\n      'total_time': this.total_time,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.learner_preference object\n */\nclass CMILearnerPreference extends BaseCMI {\n  #_children = constants.student_preference_children;\n  #audio_level = '1';\n  #language = '';\n  #delivery_speed = '1';\n  #audio_captioning = '0';\n\n  /**\n   * Constructor for cmi.learner_preference\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #_children\n   * @return {string}\n   * @private\n   */\n  get _children() {\n    return this.#_children;\n  }\n\n  /**\n   * Setter for #_children. Just throws an error.\n   * @param {string} _children\n   * @private\n   */\n  set _children(_children) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #audio_level\n   * @return {string}\n   */\n  get audio_level() {\n    return this.#audio_level;\n  }\n\n  /**\n   * Setter for #audio_level\n   * @param {string} audio_level\n   */\n  set audio_level(audio_level) {\n    if (check2004ValidFormat(audio_level, regex.CMIDecimal) &&\n        check2004ValidRange(audio_level, regex.audio_range)) {\n      this.#audio_level = audio_level;\n    }\n  }\n\n  /**\n   * Getter for #language\n   * @return {string}\n   */\n  get language() {\n    return this.#language;\n  }\n\n  /**\n   * Setter for #language\n   * @param {string} language\n   */\n  set language(language) {\n    if (check2004ValidFormat(language, regex.CMILang)) {\n      this.#language = language;\n    }\n  }\n\n  /**\n   * Getter for #delivery_speed\n   * @return {string}\n   */\n  get delivery_speed() {\n    return this.#delivery_speed;\n  }\n\n  /**\n   * Setter for #delivery_speed\n   * @param {string} delivery_speed\n   */\n  set delivery_speed(delivery_speed) {\n    if (check2004ValidFormat(delivery_speed, regex.CMIDecimal) &&\n        check2004ValidRange(delivery_speed, regex.speed_range)) {\n      this.#delivery_speed = delivery_speed;\n    }\n  }\n\n  /**\n   * Getter for #audio_captioning\n   * @return {string}\n   */\n  get audio_captioning() {\n    return this.#audio_captioning;\n  }\n\n  /**\n   * Setter for #audio_captioning\n   * @param {string} audio_captioning\n   */\n  set audio_captioning(audio_captioning) {\n    if (check2004ValidFormat(audio_captioning, regex.CMISInteger) &&\n        check2004ValidRange(audio_captioning, regex.text_range)) {\n      this.#audio_captioning = audio_captioning;\n    }\n  }\n\n  /**\n   * toJSON for cmi.learner_preference\n   *\n   * @return {\n   *    {\n   *      audio_level: string,\n   *      language: string,\n   *      delivery_speed: string,\n   *      audio_captioning: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'audio_level': this.audio_level,\n      'language': this.language,\n      'delivery_speed': this.delivery_speed,\n      'audio_captioning': this.audio_captioning,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions object\n */\nclass CMIInteractions extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.interactions_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.objectives object\n */\nclass CMIObjectives extends CMIArray {\n  /**\n   * Constructor for cmi.objectives Array\n   */\n  constructor() {\n    super({\n      children: constants.objectives_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_lms object\n */\nclass CMICommentsFromLMS extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_lms Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner object\n */\nclass CMICommentsFromLearner extends CMIArray {\n  /**\n   * Constructor for cmi.comments_from_learner Array\n   */\n  constructor() {\n    super({\n      children: constants.comments_children,\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n    });\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.interaction.n object\n */\nexport class CMIInteractionsObject extends BaseCMI {\n  #id = '';\n  #type = '';\n  #timestamp = '';\n  #weighting = '';\n  #learner_response = '';\n  #result = '';\n  #latency = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.interaction.n\n   */\n  constructor() {\n    super();\n\n    this.objectives = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.objectives_children,\n    });\n    this.correct_responses = new CMIArray({\n      errorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n      children: constants.correct_responses_children,\n    });\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.objectives?.initialize();\n    this.correct_responses?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #type\n   * @return {string}\n   */\n  get type() {\n    return this.#type;\n  }\n\n  /**\n   * Setter for #type\n   * @param {string} type\n   */\n  set type(type) {\n    if (check2004ValidFormat(type, regex.CMIType)) {\n      this.#type = type;\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (check2004ValidFormat(timestamp, regex.CMITime)) {\n      this.#timestamp = timestamp;\n    }\n  }\n\n  /**\n   * Getter for #weighting\n   * @return {string}\n   */\n  get weighting() {\n    return this.#weighting;\n  }\n\n  /**\n   * Setter for #weighting\n   * @param {string} weighting\n   */\n  set weighting(weighting) {\n    if (check2004ValidFormat(weighting, regex.CMIDecimal)) {\n      this.#weighting = weighting;\n    }\n  }\n\n  /**\n   * Getter for #learner_response\n   * @return {string}\n   */\n  get learner_response() {\n    return this.#learner_response;\n  }\n\n  /**\n   * Setter for #learner_response. Does type validation to make sure response\n   * matches SCORM 2004's spec\n   * @param {string} learner_response\n   */\n  set learner_response(learner_response) {\n    if (typeof this.type === 'undefined') {\n      throw new ValidationError(\n          scorm2004_error_codes.DEPENDENCY_NOT_ESTABLISHED);\n    } else {\n      let nodes = [];\n      const response_type = learner_responses[this.type];\n      if (response_type.delimiter !== '') {\n        nodes = learner_response.split(response_type.delimiter);\n      } else {\n        nodes[0] = learner_response;\n      }\n\n      if ((nodes.length > 0) && (nodes.length <= response_type.max)) {\n        const formatRegex = new RegExp(response_type.format);\n        for (let i = 0; i < nodes.length; i++) {\n          if (typeof response_type.delimiter2 !== 'undefined') {\n            const values = nodes[i].split(response_type.delimiter2);\n            if (values.length === 2) {\n              if (!values[0].match(formatRegex)) {\n                throwTypeMismatchError();\n              } else {\n                if (!values[1].match(new RegExp(response_type.format2))) {\n                  throwTypeMismatchError();\n                }\n              }\n            } else {\n              throwTypeMismatchError();\n            }\n          } else {\n            if (!nodes[i].match(formatRegex)) {\n              throwTypeMismatchError();\n            } else {\n              if (nodes[i] !== '' && response_type.unique) {\n                for (let j = 0; j < i; j++) {\n                  if (nodes[i] === nodes[j]) {\n                    throwTypeMismatchError();\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        throw new ValidationError(scorm2004_error_codes.GENERAL_SET_FAILURE);\n      }\n    }\n  }\n\n  /**\n   * Getter for #result\n   * @return {string}\n   */\n  get result() {\n    return this.#result;\n  }\n\n  /**\n   * Setter for #result\n   * @param {string} result\n   */\n  set result(result) {\n    if (check2004ValidFormat(result, regex.CMIResult)) {\n      this.#result = result;\n    }\n  }\n\n  /**\n   * Getter for #latency\n   * @return {string}\n   */\n  get latency() {\n    return this.#latency;\n  }\n\n  /**\n   * Setter for #latency\n   * @param {string} latency\n   */\n  set latency(latency) {\n    if (check2004ValidFormat(latency, regex.CMITimespan)) {\n      this.#latency = latency;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      type: string,\n   *      objectives: CMIArray,\n   *      timestamp: string,\n   *      correct_responses: CMIArray,\n   *      weighting: string,\n   *      learner_response: string,\n   *      result: string,\n   *      latency: string,\n   *      description: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'type': this.type,\n      'objectives': this.objectives,\n      'timestamp': this.timestamp,\n      'weighting': this.weighting,\n      'learner_response': this.learner_response,\n      'result': this.result,\n      'latency': this.latency,\n      'description': this.description,\n      'correct_responses': this.correct_responses,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi.objectives.n object\n */\nexport class CMIObjectivesObject extends BaseCMI {\n  #id = '';\n  #success_status = 'unknown';\n  #completion_status = 'unknown';\n  #progress_measure = '';\n  #description = '';\n\n  /**\n   * Constructor for cmi.objectives.n\n   */\n  constructor() {\n    super();\n\n    this.score = new Scorm2004CMIScore();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.score?.initialize();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * Getter for #success_status\n   * @return {string}\n   */\n  get success_status() {\n    return this.#success_status;\n  }\n\n  /**\n   * Setter for #success_status\n   * @param {string} success_status\n   */\n  set success_status(success_status) {\n    if (check2004ValidFormat(success_status, regex.CMISStatus)) {\n      this.#success_status = success_status;\n    }\n  }\n\n  /**\n   * Getter for #completion_status\n   * @return {string}\n   */\n  get completion_status() {\n    return this.#completion_status;\n  }\n\n  /**\n   * Setter for #completion_status\n   * @param {string} completion_status\n   */\n  set completion_status(completion_status) {\n    if (check2004ValidFormat(completion_status, regex.CMICStatus)) {\n      this.#completion_status = completion_status;\n    }\n  }\n\n  /**\n   * Getter for #progress_measure\n   * @return {string}\n   */\n  get progress_measure() {\n    return this.#progress_measure;\n  }\n\n  /**\n   * Setter for #progress_measure\n   * @param {string} progress_measure\n   */\n  set progress_measure(progress_measure) {\n    if (check2004ValidFormat(progress_measure, regex.CMIDecimal) &&\n        check2004ValidRange(progress_measure, regex.progress_range)) {\n      this.#progress_measure = progress_measure;\n    }\n  }\n\n  /**\n   * Getter for #description\n   * @return {string}\n   */\n  get description() {\n    return this.#description;\n  }\n\n  /**\n   * Setter for #description\n   * @param {string} description\n   */\n  set description(description) {\n    if (check2004ValidFormat(description, regex.CMILangString250, true)) {\n      this.#description = description;\n    }\n  }\n\n  /**\n   * toJSON for cmi.objectives.n\n   *\n   * @return {\n   *    {\n   *      id: string,\n   *      success_status: string,\n   *      completion_status: string,\n   *      progress_measure: string,\n   *      description: string,\n   *      score: Scorm2004CMIScore\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n      'success_status': this.success_status,\n      'completion_status': this.completion_status,\n      'progress_measure': this.progress_measure,\n      'description': this.description,\n      'score': this.score,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class for SCORM 2004's cmi *.score object\n */\nclass Scorm2004CMIScore extends CMIScore {\n  #scaled = '';\n\n  /**\n   * Constructor for cmi *.score\n   */\n  constructor() {\n    super(\n        {\n          score_children: constants.score_children,\n          max: '',\n          invalidErrorCode: scorm2004_error_codes.READ_ONLY_ELEMENT,\n          invalidTypeCode: scorm2004_error_codes.TYPE_MISMATCH,\n          invalidRangeCode: scorm2004_error_codes.VALUE_OUT_OF_RANGE,\n          decimalRegex: scorm2004_regex.CMIDecimal,\n        });\n  }\n\n  /**\n   * Getter for #scaled\n   * @return {string}\n   */\n  get scaled() {\n    return this.#scaled;\n  }\n\n  /**\n   * Setter for #scaled\n   * @param {string} scaled\n   */\n  set scaled(scaled) {\n    if (check2004ValidFormat(scaled, regex.CMIDecimal) &&\n        check2004ValidRange(scaled, regex.scaled_range)) {\n      this.#scaled = scaled;\n    }\n  }\n\n  /**\n   * toJSON for cmi *.score\n   *\n   * @return {\n   *    {\n   *      scaled: string,\n   *      raw: string,\n   *      min: string,\n   *      max: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'scaled': this.scaled,\n      'raw': super.raw,\n      'min': super.min,\n      'max': super.max,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.comments_from_learner.n and cmi.comments_from_lms.n object\n */\nexport class CMICommentsObject extends BaseCMI {\n  #comment = '';\n  #location = '';\n  #timestamp = '';\n  #readOnlyAfterInit;\n\n  /**\n   * Constructor for cmi.comments_from_learner.n and cmi.comments_from_lms.n\n   * @param {boolean} readOnlyAfterInit\n   */\n  constructor(readOnlyAfterInit = false) {\n    super();\n    this.#comment = '';\n    this.#location = '';\n    this.#timestamp = '';\n    this.#readOnlyAfterInit = readOnlyAfterInit;\n  }\n\n  /**\n   * Getter for #comment\n   * @return {string}\n   */\n  get comment() {\n    return this.#comment;\n  }\n\n  /**\n   * Setter for #comment\n   * @param {string} comment\n   */\n  set comment(comment) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(comment, regex.CMILangString4000, true)) {\n        this.#comment = comment;\n      }\n    }\n  }\n\n  /**\n   * Getter for #location\n   * @return {string}\n   */\n  get location() {\n    return this.#location;\n  }\n\n  /**\n   * Setter for #location\n   * @param {string} location\n   */\n  set location(location) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(location, regex.CMIString250)) {\n        this.#location = location;\n      }\n    }\n  }\n\n  /**\n   * Getter for #timestamp\n   * @return {string}\n   */\n  get timestamp() {\n    return this.#timestamp;\n  }\n\n  /**\n   * Setter for #timestamp\n   * @param {string} timestamp\n   */\n  set timestamp(timestamp) {\n    if (this.initialized && this.#readOnlyAfterInit) {\n      throwReadOnlyError();\n    } else {\n      if (check2004ValidFormat(timestamp, regex.CMITime)) {\n        this.#timestamp = timestamp;\n      }\n    }\n  }\n\n  /**\n   * toJSON for cmi.comments_from_learner.n object\n   * @return {\n   *    {\n   *      comment: string,\n   *      location: string,\n   *      timestamp: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'comment': this.comment,\n      'location': this.location,\n      'timestamp': this.timestamp,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.objectives.n object\n */\nexport class CMIInteractionsObjectivesObject extends BaseCMI {\n  #id = '';\n\n  /**\n   * Constructor for cmi.interactions.n.objectives.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #id\n   * @return {string}\n   */\n  get id() {\n    return this.#id;\n  }\n\n  /**\n   * Setter for #id\n   * @param {string} id\n   */\n  set id(id) {\n    if (check2004ValidFormat(id, regex.CMILongIdentifier)) {\n      this.#id = id;\n    }\n  }\n\n  /**\n   * toJSON for cmi.interactions.n.objectives.n\n   * @return {\n   *    {\n   *      id: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'id': this.id,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's cmi.interactions.n.correct_responses.n object\n */\nexport class CMIInteractionsCorrectResponsesObject extends BaseCMI {\n  #pattern = '';\n\n  /**\n   * Constructor for cmi.interactions.n.correct_responses.n\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #pattern\n   * @return {string}\n   */\n  get pattern() {\n    return this.#pattern;\n  }\n\n  /**\n   * Setter for #pattern\n   * @param {string} pattern\n   */\n  set pattern(pattern) {\n    if (check2004ValidFormat(pattern, regex.CMIFeedback)) {\n      this.#pattern = pattern;\n    }\n  }\n\n  /**\n   * toJSON cmi.interactions.n.correct_responses.n object\n   * @return {\n   *    {\n   *      pattern: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'pattern': this.pattern,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl object\n */\nexport class ADL extends BaseCMI {\n  /**\n   * Constructor for adl\n   */\n  constructor() {\n    super();\n\n    this.nav = new ADLNav();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.nav?.initialize();\n  }\n\n  /**\n   * toJSON for adl\n   * @return {\n   *    {\n   *      nav: {\n   *        request: string\n   *      }\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'nav': this.nav,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav object\n */\nclass ADLNav extends BaseCMI {\n  #request = '_none_';\n\n  /**\n   * Constructor for adl.nav\n   */\n  constructor() {\n    super();\n\n    this.request_valid = new ADLNavRequestValid();\n  }\n\n  /**\n   * Called when the API has been initialized after the CMI has been created\n   */\n  initialize() {\n    super.initialize();\n    this.request_valid?.initialize();\n  }\n\n  /**\n   * Getter for #request\n   * @return {string}\n   */\n  get request() {\n    return this.#request;\n  }\n\n  /**\n   * Setter for #request\n   * @param {string} request\n   */\n  set request(request) {\n    if (check2004ValidFormat(request, regex.NAVEvent)) {\n      this.#request = request;\n    }\n  }\n\n  /**\n   * toJSON for adl.nav\n   *\n   * @return {\n   *    {\n   *      request: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'request': this.request,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n\n/**\n * Class representing SCORM 2004's adl.nav.request_valid object\n */\nclass ADLNavRequestValid extends BaseCMI {\n  #continue = 'unknown';\n  #previous = 'unknown';\n  choice = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n  jump = class {\n    /**\n     * Check if target is valid\n     * @param {*} _target\n     * @return {string}\n     */\n    _isTargetValid = (_target) => 'unknown';\n  };\n\n  /**\n   * Constructor for adl.nav.request_valid\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Getter for #continue\n   * @return {string}\n   */\n  get continue() {\n    return this.#continue;\n  }\n\n  /**\n   * Setter for #continue. Just throws an error.\n   * @param {*} _\n   */\n  set continue(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * Getter for #previous\n   * @return {string}\n   */\n  get previous() {\n    return this.#previous;\n  }\n\n  /**\n   * Setter for #previous. Just throws an error.\n   * @param {*} _\n   */\n  set previous(_) {\n    throwReadOnlyError();\n  }\n\n  /**\n   * toJSON for adl.nav.request_valid\n   *\n   * @return {\n   *    {\n   *      previous: string,\n   *      continue: string\n   *    }\n   *  }\n   */\n  toJSON() {\n    this.jsonString = true;\n    const result = {\n      'previous': this.previous,\n      'continue': this.continue,\n    };\n    delete this.jsonString;\n    return result;\n  }\n}\n","// @flow\nexport const scorm12_constants = {\n  // Children lists\n  cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions',\n  core_children: 'student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,lesson_mode,exit,session_time',\n  score_children: 'raw,min,max',\n  comments_children: 'content,location,time',\n  objectives_children: 'id,score,status',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio,language,speed,text',\n  interactions_children: 'id,objectives,time,type,correct_responses,weighting,student_response,result,latency',\n\n  error_descriptions: {\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use LMSGetDiagnostic for more information',\n    },\n    '201': {\n      basicMessage: 'Invalid argument error',\n      detailMessage: 'Indicates that an argument represents an invalid data model element or is otherwise incorrect.',\n    },\n    '202': {\n      basicMessage: 'Element cannot have children',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_children\" for a data model element that does not support the \"_children\" suffix.',\n    },\n    '203': {\n      basicMessage: 'Element not an array - cannot have count',\n      detailMessage: 'Indicates that LMSGetValue was called with a data model element name that ends in \"_count\" for a data model element that does not support the \"_count\" suffix.',\n    },\n    '301': {\n      basicMessage: 'Not initialized',\n      detailMessage: 'Indicates that an API call was made before the call to lmsInitialize.',\n    },\n    '401': {\n      basicMessage: 'Not implemented error',\n      detailMessage: 'The data model element indicated in a call to LMSGetValue or LMSSetValue is valid, but was not implemented by this LMS. SCORM 1.2 defines a set of data model elements as being optional for an LMS to implement.',\n    },\n    '402': {\n      basicMessage: 'Invalid set value, element is a keyword',\n      detailMessage: 'Indicates that LMSSetValue was called on a data model element that represents a keyword (elements that end in \"_children\" and \"_count\").',\n    },\n    '403': {\n      basicMessage: 'Element is read only',\n      detailMessage: 'LMSSetValue was called with a data model element that can only be read.',\n    },\n    '404': {\n      basicMessage: 'Element is write only',\n      detailMessage: 'LMSGetValue was called on a data model element that can only be written to.',\n    },\n    '405': {\n      basicMessage: 'Incorrect Data Type',\n      detailMessage: 'LMSSetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n  },\n};\n\nexport const aicc_constants = {\n  ...scorm12_constants, ...{\n    cmi_children: 'core,suspend_data,launch_data,comments,objectives,student_data,student_preference,interactions,evaluation',\n    student_data_children: 'attempt_number,tries,mastery_score,max_time_allowed,time_limit_action',\n    tries_children: 'time,status,score',\n  },\n};\n\nexport const scorm2004_constants = {\n  // Children lists\n  cmi_children: '_version,comments_from_learner,comments_from_lms,completion_status,credit,entry,exit,interactions,launch_data,learner_id,learner_name,learner_preference,location,max_time_allowed,mode,objectives,progress_measure,scaled_passing_score,score,session_time,success_status,suspend_data,time_limit_action,total_time',\n  comments_children: 'comment,timestamp,location',\n  score_children: 'max,raw,scaled,min',\n  objectives_children: 'progress_measure,completion_status,success_status,description,score,id',\n  correct_responses_children: 'pattern',\n  student_data_children: 'mastery_score,max_time_allowed,time_limit_action',\n  student_preference_children: 'audio_level,audio_captioning,delivery_speed,language',\n  interactions_children: 'id,type,objectives,timestamp,correct_responses,weighting,learner_response,result,latency,description',\n\n  error_descriptions: {\n    '0': {\n      basicMessage: 'No Error',\n      detailMessage: 'No error occurred, the previous API call was successful.',\n    },\n    '101': {\n      basicMessage: 'General Exception',\n      detailMessage: 'No specific error code exists to describe the error. Use GetDiagnostic for more information.',\n    },\n    '102': {\n      basicMessage: 'General Initialization Failure',\n      detailMessage: 'Call to Initialize failed for an unknown reason.',\n    },\n    '103': {\n      basicMessage: 'Already Initialized',\n      detailMessage: 'Call to Initialize failed because Initialize was already called.',\n    },\n    '104': {\n      basicMessage: 'Content Instance Terminated',\n      detailMessage: 'Call to Initialize failed because Terminate was already called.',\n    },\n    '111': {\n      basicMessage: 'General Termination Failure',\n      detailMessage: 'Call to Terminate failed for an unknown reason.',\n    },\n    '112': {\n      basicMessage: 'Termination Before Initialization',\n      detailMessage: 'Call to Terminate failed because it was made before the call to Initialize.',\n    },\n    '113': {\n      basicMessage: 'Termination After Termination',\n      detailMessage: 'Call to Terminate failed because Terminate was already called.',\n    },\n    '122': {\n      basicMessage: 'Retrieve Data Before Initialization',\n      detailMessage: 'Call to GetValue failed because it was made before the call to Initialize.',\n    },\n    '123': {\n      basicMessage: 'Retrieve Data After Termination',\n      detailMessage: 'Call to GetValue failed because it was made after the call to Terminate.',\n    },\n    '132': {\n      basicMessage: 'Store Data Before Initialization',\n      detailMessage: 'Call to SetValue failed because it was made before the call to Initialize.',\n    },\n    '133': {\n      basicMessage: 'Store Data After Termination',\n      detailMessage: 'Call to SetValue failed because it was made after the call to Terminate.',\n    },\n    '142': {\n      basicMessage: 'Commit Before Initialization',\n      detailMessage: 'Call to Commit failed because it was made before the call to Initialize.',\n    },\n    '143': {\n      basicMessage: 'Commit After Termination',\n      detailMessage: 'Call to Commit failed because it was made after the call to Terminate.',\n    },\n    '201': {\n      basicMessage: 'General Argument Error',\n      detailMessage: 'An invalid argument was passed to an API method (usually indicates that Initialize, Commit or Terminate did not receive the expected empty string argument.',\n    },\n    '301': {\n      basicMessage: 'General Get Failure',\n      detailMessage: 'Indicates a failed GetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '351': {\n      basicMessage: 'General Set Failure',\n      detailMessage: 'Indicates a failed SetValue call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '391': {\n      basicMessage: 'General Commit Failure',\n      detailMessage: 'Indicates a failed Commit call where no other specific error code is applicable. Use GetDiagnostic for more information.',\n    },\n    '401': {\n      basicMessage: 'Undefined Data Model Element',\n      detailMessage: 'The data model element name passed to GetValue or SetValue is not a valid SCORM data model element.',\n    },\n    '402': {\n      basicMessage: 'Unimplemented Data Model Element',\n      detailMessage: 'The data model element indicated in a call to GetValue or SetValue is valid, but was not implemented by this LMS. In SCORM 2004, this error would indicate an LMS that is not fully SCORM conformant.',\n    },\n    '403': {\n      basicMessage: 'Data Model Element Value Not Initialized',\n      detailMessage: 'Attempt to read a data model element that has not been initialized by the LMS or through a SetValue call. This error condition is often reached during normal execution of a SCO.',\n    },\n    '404': {\n      basicMessage: 'Data Model Element Is Read Only',\n      detailMessage: 'SetValue was called with a data model element that can only be read.',\n    },\n    '405': {\n      basicMessage: 'Data Model Element Is Write Only',\n      detailMessage: 'GetValue was called on a data model element that can only be written to.',\n    },\n    '406': {\n      basicMessage: 'Data Model Element Type Mismatch',\n      detailMessage: 'SetValue was called with a value that is not consistent with the data format of the supplied data model element.',\n    },\n    '407': {\n      basicMessage: 'Data Model Element Value Out Of Range',\n      detailMessage: 'The numeric value supplied to a SetValue call is outside of the numeric range allowed for the supplied data model element.',\n    },\n    '408': {\n      basicMessage: 'Data Model Dependency Not Established',\n      detailMessage: 'Some data model elements cannot be set until another data model element was set. This error condition indicates that the prerequisite element was not set before the dependent element.',\n    },\n  },\n};\n","// @flow\nexport const error_codes = {\n  GENERAL: 101,\n  INITIALIZATION_FAILED: 101,\n  INITIALIZED: 101,\n  TERMINATED: 101,\n  TERMINATION_FAILURE: 101,\n  TERMINATION_BEFORE_INIT: 101,\n  MULTIPLE_TERMINATION: 101,\n  RETRIEVE_BEFORE_INIT: 101,\n  RETRIEVE_AFTER_TERM: 101,\n  STORE_BEFORE_INIT: 101,\n  STORE_AFTER_TERM: 101,\n  COMMIT_BEFORE_INIT: 101,\n  COMMIT_AFTER_TERM: 101,\n  ARGUMENT_ERROR: 101,\n  CHILDREN_ERROR: 101,\n  COUNT_ERROR: 101,\n  GENERAL_GET_FAILURE: 101,\n  GENERAL_SET_FAILURE: 101,\n  GENERAL_COMMIT_FAILURE: 101,\n  UNDEFINED_DATA_MODEL: 101,\n  UNIMPLEMENTED_ELEMENT: 101,\n  VALUE_NOT_INITIALIZED: 101,\n  INVALID_SET_VALUE: 101,\n  READ_ONLY_ELEMENT: 101,\n  WRITE_ONLY_ELEMENT: 101,\n  TYPE_MISMATCH: 101,\n  VALUE_OUT_OF_RANGE: 101,\n  DEPENDENCY_NOT_ESTABLISHED: 101,\n};\n\nexport const scorm12_error_codes = {\n  ...error_codes, ...{\n    RETRIEVE_BEFORE_INIT: 301,\n    STORE_BEFORE_INIT: 301,\n    COMMIT_BEFORE_INIT: 301,\n    ARGUMENT_ERROR: 201,\n    CHILDREN_ERROR: 202,\n    COUNT_ERROR: 203,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 401,\n    VALUE_NOT_INITIALIZED: 301,\n    INVALID_SET_VALUE: 402,\n    READ_ONLY_ELEMENT: 403,\n    WRITE_ONLY_ELEMENT: 404,\n    TYPE_MISMATCH: 405,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n\nexport const scorm2004_error_codes = {\n  ...error_codes, ...{\n    INITIALIZATION_FAILED: 102,\n    INITIALIZED: 103,\n    TERMINATED: 104,\n    TERMINATION_FAILURE: 111,\n    TERMINATION_BEFORE_INIT: 112,\n    MULTIPLE_TERMINATIONS: 113,\n    RETRIEVE_BEFORE_INIT: 122,\n    RETRIEVE_AFTER_TERM: 123,\n    STORE_BEFORE_INIT: 132,\n    STORE_AFTER_TERM: 133,\n    COMMIT_BEFORE_INIT: 142,\n    COMMIT_AFTER_TERM: 143,\n    ARGUMENT_ERROR: 201,\n    GENERAL_GET_FAILURE: 301,\n    GENERAL_SET_FAILURE: 351,\n    GENERAL_COMMIT_FAILURE: 391,\n    UNDEFINED_DATA_MODEL: 401,\n    UNIMPLEMENTED_ELEMENT: 402,\n    VALUE_NOT_INITIALIZED: 403,\n    READ_ONLY_ELEMENT: 404,\n    WRITE_ONLY_ELEMENT: 405,\n    TYPE_MISMATCH: 406,\n    VALUE_OUT_OF_RANGE: 407,\n    DEPENDENCY_NOT_ESTABLISHED: 408,\n  },\n};\n","const common_values = {\n  validResult: [\n    'correct',\n    'wrong',\n    'unanticipated',\n    'neutral',\n  ],\n  invalidResult: [\n    '-10000',\n    '10000',\n    'invalid',\n  ],\n\n  valid0To1Range: [\n    '0.0',\n    '0.25',\n    '0.5',\n    '1.0',\n  ],\n  invalid0To1Range: [\n    '-1',\n    '-0.1',\n    '1.1',\n    '.25',\n  ],\n\n  valid0To100Range: [\n    '1',\n    '50',\n    '100',\n  ],\n  invalid0To100Range: [\n    'invalid',\n    'a100',\n    '-1',\n  ],\n\n  validScaledRange: [\n    '1',\n    '0.5',\n    '0',\n    '-0.5',\n    '-1',\n  ],\n  invalidScaledRange: [\n    '-101',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n\n  validIntegerScaledRange: [\n    '1',\n    '0',\n    '-1',\n  ],\n  invalidIntegerScaledRange: [\n    '-101',\n    '-0.5',\n    '0.5',\n    '25.1',\n    '50.5',\n    '75',\n    '100',\n  ],\n};\n\nexport const scorm12_values = {\n  ...common_values, ...{\n    validLessonStatus: [\n      'passed',\n      'completed',\n      'failed',\n      'incomplete',\n      'browsed',\n    ],\n    invalidLessonStatus: [\n      'Passed',\n      'P',\n      'F',\n      'p',\n      'true',\n      'false',\n      'complete',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validSpeedRange: [\n      '1',\n      '50',\n      '100',\n      '-1',\n      '-50',\n      '-100',\n    ],\n    invalidSpeedRange: [\n      'invalid',\n      'a100',\n      '-101',\n      '101',\n      '-100000',\n      '100000',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50.25',\n      '100',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-1',\n      '101',\n      '-100000',\n      '100000',\n    ],\n    invalid0To100Range: [\n      'invalid',\n      'a100',\n      '-2',\n    ],\n\n    validTime: [\n      '10:06:57',\n      '23:59:59',\n      '00:00:00',\n    ],\n    invalidTime: [\n      '47:59:59',\n      '00:00:01.56',\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n\n    validTimestamp: [\n      '10:06:57',\n      '00:00:01.56',\n      '23:59:59',\n      '47:59:59',\n    ],\n    invalidTimestamp: [\n      '06:5:13',\n      '23:59:59.123',\n      'P1DT23H59M59S',\n    ],\n  },\n};\n\nexport const scorm2004_values = {\n  ...common_values, ...{\n    // valid field values\n    validTimestamps: [\n      '2019-06-25',\n      '2019-06-25T23:59',\n      '2019-06-25T23:59:59.99',\n      '1970-01-01',\n    ],\n    invalidTimestamps: [\n      '2019-06-25T',\n      '2019-06-25T23:59:59.999',\n      '2019-06-25T25:59:59.99',\n      '2019-13-31',\n      '1969-12-31',\n      '-00:00:30',\n      '0:50:30',\n      '23:00:30.',\n    ],\n\n    validCStatus: [\n      'completed',\n      'incomplete',\n      'not attempted',\n      'unknown',\n    ],\n    invalidCStatus: [\n      'complete',\n      'passed',\n      'failed',\n    ],\n\n    validSStatus: [\n      'passed',\n      'failed',\n      'unknown',\n    ],\n    invalidSStatus: [\n      'complete',\n      'incomplete',\n      'P',\n      'f',\n    ],\n\n    validExit: [\n      'time-out',\n      'suspend',\n      'logout',\n      'normal',\n    ],\n    invalidExit: [\n      'close',\n      'exit',\n      'crash',\n    ],\n\n    validType: [\n      'true-false',\n      'choice',\n      'fill-in',\n      'long-fill-in',\n      'matching',\n      'performance',\n      'sequencing',\n      'likert',\n      'numeric',\n      'other',\n    ],\n    invalidType: [\n      'correct',\n      'wrong',\n      'logout',\n    ],\n\n    validScoreRange: [\n      '1',\n      '50',\n      '100',\n      '-10000',\n      '-1',\n      '10000',\n    ],\n    invalidScoreRange: [\n      'invalid',\n      'a100',\n      '-100000',\n      '100000',\n    ],\n\n    validISO8601Durations: [\n      'P1Y34DT23H45M15S',\n      'PT1M45S',\n      'P0S',\n      'PT75M',\n    ],\n    invalidISO8601Durations: [\n      '00:08:45',\n      '-P1H',\n      '1y45D',\n      '0',\n    ],\n\n    validComment: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4000),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidComment: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(4001),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(3999),\n    ],\n\n    validDescription: [\n      '{lang=en-98} learner comment',\n      '{lang=eng-98-9} learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(250),\n      'learner comment',\n      'learner comment}',\n      '{lang=i-xx}',\n      '{lang=i}',\n      '',\n    ],\n    invalidDescription: [\n      '{lang=i-}',\n      '{lang=i-x}',\n      '{lang=eng-98-9fhgj}{ learner comment',\n      '{learner comment',\n      '{lang=eng-98-9fhgj}' + 'x'.repeat(251),\n      '{lang=eng-98-9fhgj}{' + 'x'.repeat(249),\n    ],\n\n    validNavRequest: [\n      'previous',\n      'continue',\n      'exit',\n      'exitAll',\n      'abandon',\n      'abandonAll',\n      'suspendAll',\n    ],\n    invalidNavRequest: [\n      'close',\n      'quit',\n      'next',\n      'before',\n    ],\n  },\n};\n","export const valid_languages = {\n  'aa': 'aa', 'ab': 'ab', 'ae': 'ae', 'af': 'af', 'ak': 'ak', 'am': 'am',\n  'an': 'an', 'ar': 'ar', 'as': 'as', 'av': 'av', 'ay': 'ay', 'az': 'az',\n  'ba': 'ba', 'be': 'be', 'bg': 'bg', 'bh': 'bh', 'bi': 'bi', 'bm': 'bm',\n  'bn': 'bn', 'bo': 'bo', 'br': 'br', 'bs': 'bs', 'ca': 'ca', 'ce': 'ce',\n  'ch': 'ch', 'co': 'co', 'cr': 'cr', 'cs': 'cs', 'cu': 'cu', 'cv': 'cv',\n  'cy': 'cy', 'da': 'da', 'de': 'de', 'dv': 'dv', 'dz': 'dz', 'ee': 'ee',\n  'el': 'el', 'en': 'en', 'eo': 'eo', 'es': 'es', 'et': 'et', 'eu': 'eu',\n  'fa': 'fa', 'ff': 'ff', 'fi': 'fi', 'fj': 'fj', 'fo': 'fo', 'fr': 'fr',\n  'fy': 'fy', 'ga': 'ga', 'gd': 'gd', 'gl': 'gl', 'gn': 'gn', 'gu': 'gu',\n  'gv': 'gv', 'ha': 'ha', 'he': 'he', 'hi': 'hi', 'ho': 'ho', 'hr': 'hr',\n  'ht': 'ht', 'hu': 'hu', 'hy': 'hy', 'hz': 'hz', 'ia': 'ia', 'id': 'id',\n  'ie': 'ie', 'ig': 'ig', 'ii': 'ii', 'ik': 'ik', 'io': 'io', 'is': 'is',\n  'it': 'it', 'iu': 'iu', 'ja': 'ja', 'jv': 'jv', 'ka': 'ka', 'kg': 'kg',\n  'ki': 'ki', 'kj': 'kj', 'kk': 'kk', 'kl': 'kl', 'km': 'km', 'kn': 'kn',\n  'ko': 'ko', 'kr': 'kr', 'ks': 'ks', 'ku': 'ku', 'kv': 'kv', 'kw': 'kw',\n  'ky': 'ky', 'la': 'la', 'lb': 'lb', 'lg': 'lg', 'li': 'li', 'ln': 'ln',\n  'lo': 'lo', 'lt': 'lt', 'lu': 'lu', 'lv': 'lv', 'mg': 'mg', 'mh': 'mh',\n  'mi': 'mi', 'mk': 'mk', 'ml': 'ml', 'mn': 'mn', 'mo': 'mo', 'mr': 'mr',\n  'ms': 'ms', 'mt': 'mt', 'my': 'my', 'na': 'na', 'nb': 'nb', 'nd': 'nd',\n  'ne': 'ne', 'ng': 'ng', 'nl': 'nl', 'nn': 'nn', 'no': 'no', 'nr': 'nr',\n  'nv': 'nv', 'ny': 'ny', 'oc': 'oc', 'oj': 'oj', 'om': 'om', 'or': 'or',\n  'os': 'os', 'pa': 'pa', 'pi': 'pi', 'pl': 'pl', 'ps': 'ps', 'pt': 'pt',\n  'qu': 'qu', 'rm': 'rm', 'rn': 'rn', 'ro': 'ro', 'ru': 'ru', 'rw': 'rw',\n  'sa': 'sa', 'sc': 'sc', 'sd': 'sd', 'se': 'se', 'sg': 'sg', 'sh': 'sh',\n  'si': 'si', 'sk': 'sk', 'sl': 'sl', 'sm': 'sm', 'sn': 'sn', 'so': 'so',\n  'sq': 'sq', 'sr': 'sr', 'ss': 'ss', 'st': 'st', 'su': 'su', 'sv': 'sv',\n  'sw': 'sw', 'ta': 'ta', 'te': 'te', 'tg': 'tg', 'th': 'th', 'ti': 'ti',\n  'tk': 'tk', 'tl': 'tl', 'tn': 'tn', 'to': 'to', 'tr': 'tr', 'ts': 'ts',\n  'tt': 'tt', 'tw': 'tw', 'ty': 'ty', 'ug': 'ug', 'uk': 'uk', 'ur': 'ur',\n  'uz': 'uz', 've': 've', 'vi': 'vi', 'vo': 'vo', 'wa': 'wa', 'wo': 'wo',\n  'xh': 'xh', 'yi': 'yi', 'yo': 'yo', 'za': 'za', 'zh': 'zh', 'zu': 'zu',\n  'aar': 'aar', 'abk': 'abk', 'ave': 'ave', 'afr': 'afr', 'aka': 'aka',\n  'amh': 'amh', 'arg': 'arg', 'ara': 'ara', 'asm': 'asm', 'ava': 'ava',\n  'aym': 'aym', 'aze': 'aze', 'bak': 'bak', 'bel': 'bel', 'bul': 'bul',\n  'bih': 'bih', 'bis': 'bis', 'bam': 'bam', 'ben': 'ben', 'tib': 'tib',\n  'bod': 'bod', 'bre': 'bre', 'bos': 'bos', 'cat': 'cat', 'che': 'che',\n  'cha': 'cha', 'cos': 'cos', 'cre': 'cre', 'cze': 'cze', 'ces': 'ces',\n  'chu': 'chu', 'chv': 'chv', 'wel': 'wel', 'cym': 'cym', 'dan': 'dan',\n  'ger': 'ger', 'deu': 'deu', 'div': 'div', 'dzo': 'dzo', 'ewe': 'ewe',\n  'gre': 'gre', 'ell': 'ell', 'eng': 'eng', 'epo': 'epo', 'spa': 'spa',\n  'est': 'est', 'baq': 'baq', 'eus': 'eus', 'per': 'per', 'fas': 'fas',\n  'ful': 'ful', 'fin': 'fin', 'fij': 'fij', 'fao': 'fao', 'fre': 'fre',\n  'fra': 'fra', 'fry': 'fry', 'gle': 'gle', 'gla': 'gla', 'glg': 'glg',\n  'grn': 'grn', 'guj': 'guj', 'glv': 'glv', 'hau': 'hau', 'heb': 'heb',\n  'hin': 'hin', 'hmo': 'hmo', 'hrv': 'hrv', 'hat': 'hat', 'hun': 'hun',\n  'arm': 'arm', 'hye': 'hye', 'her': 'her', 'ina': 'ina', 'ind': 'ind',\n  'ile': 'ile', 'ibo': 'ibo', 'iii': 'iii', 'ipk': 'ipk', 'ido': 'ido',\n  'ice': 'ice', 'isl': 'isl', 'ita': 'ita', 'iku': 'iku', 'jpn': 'jpn',\n  'jav': 'jav', 'geo': 'geo', 'kat': 'kat', 'kon': 'kon', 'kik': 'kik',\n  'kua': 'kua', 'kaz': 'kaz', 'kal': 'kal', 'khm': 'khm', 'kan': 'kan',\n  'kor': 'kor', 'kau': 'kau', 'kas': 'kas', 'kur': 'kur', 'kom': 'kom',\n  'cor': 'cor', 'kir': 'kir', 'lat': 'lat', 'ltz': 'ltz', 'lug': 'lug',\n  'lim': 'lim', 'lin': 'lin', 'lao': 'lao', 'lit': 'lit', 'lub': 'lub',\n  'lav': 'lav', 'mlg': 'mlg', 'mah': 'mah', 'mao': 'mao', 'mri': 'mri',\n  'mac': 'mac', 'mkd': 'mkd', 'mal': 'mal', 'mon': 'mon', 'mol': 'mol',\n  'mar': 'mar', 'may': 'may', 'msa': 'msa', 'mlt': 'mlt', 'bur': 'bur',\n  'mya': 'mya', 'nau': 'nau', 'nob': 'nob', 'nde': 'nde', 'nep': 'nep',\n  'ndo': 'ndo', 'dut': 'dut', 'nld': 'nld', 'nno': 'nno', 'nor': 'nor',\n  'nbl': 'nbl', 'nav': 'nav', 'nya': 'nya', 'oci': 'oci', 'oji': 'oji',\n  'orm': 'orm', 'ori': 'ori', 'oss': 'oss', 'pan': 'pan', 'pli': 'pli',\n  'pol': 'pol', 'pus': 'pus', 'por': 'por', 'que': 'que', 'roh': 'roh',\n  'run': 'run', 'rum': 'rum', 'ron': 'ron', 'rus': 'rus', 'kin': 'kin',\n  'san': 'san', 'srd': 'srd', 'snd': 'snd', 'sme': 'sme', 'sag': 'sag',\n  'slo': 'slo', 'sin': 'sin', 'slk': 'slk', 'slv': 'slv', 'smo': 'smo',\n  'sna': 'sna', 'som': 'som', 'alb': 'alb', 'sqi': 'sqi', 'srp': 'srp',\n  'ssw': 'ssw', 'sot': 'sot', 'sun': 'sun', 'swe': 'swe', 'swa': 'swa',\n  'tam': 'tam', 'tel': 'tel', 'tgk': 'tgk', 'tha': 'tha', 'tir': 'tir',\n  'tuk': 'tuk', 'tgl': 'tgl', 'tsn': 'tsn', 'ton': 'ton', 'tur': 'tur',\n  'tso': 'tso', 'tat': 'tat', 'twi': 'twi', 'tah': 'tah', 'uig': 'uig',\n  'ukr': 'ukr', 'urd': 'urd', 'uzb': 'uzb', 'ven': 'ven', 'vie': 'vie',\n  'vol': 'vol', 'wln': 'wln', 'wol': 'wol', 'xho': 'xho', 'yid': 'yid',\n  'yor': 'yor', 'zha': 'zha', 'chi': 'chi', 'zho': 'zho', 'zul': 'zul',\n};\n","// @flow\n\nimport {scorm12_values, scorm2004_values} from './field_values';\n\nexport const scorm12_regex = {\n  CMIString256: '^.{0,255}$',\n  CMIString4096: '^.{0,4096}$',\n  CMITime: '^(?:[01]\\\\d|2[0123]):(?:[012345]\\\\d):(?:[012345]\\\\d)$', // eslint-disable-line\n  CMITimespan: '^([0-9]{2,}):([0-9]{2}):([0-9]{2})(\\.[0-9]{1,2})?$', // eslint-disable-line\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{0,3})(\\.[0-9]*)?$', // eslint-disable-line\n  CMIIdentifier: '^[\\\\u0021-\\\\u007E]{0,255}$',\n  CMIFeedback: '^.{0,255}$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMIStatus: '^(' + scorm12_values.validLessonStatus.join('|') + ')$',\n  CMIStatus2: '^(' + scorm12_values.validLessonStatus.join('|') + '|not attempted)$',\n  CMIExit: '^(' + scorm12_values.validExit.join('|') + '|)$',\n  CMIType: '^(' + scorm12_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm12_values.validResult.join('|') + '|([0-9]{0,3})?(\\\\.[0-9]*)?)$', // eslint-disable-line\n  NAVEvent: '^(previous|continue)$',\n\n  // Data ranges\n  score_range: '0#100',\n  audio_range: '-1#100',\n  speed_range: '-100#100',\n  weighting_range: '-100#100',\n  text_range: '-1#1',\n};\n\nexport const aicc_regex = {\n  ...scorm12_regex, ...{\n    CMIIdentifier: '^\\\\w{1,255}$',\n  },\n};\n\nexport const scorm2004_regex = {\n  CMIString200: '^[\\\\u0000-\\\\uFFFF]{0,200}$',\n  CMIString250: '^[\\\\u0000-\\\\uFFFF]{0,250}$',\n  CMIString1000: '^[\\\\u0000-\\\\uFFFF]{0,1000}$',\n  CMIString4000: '^[\\\\u0000-\\\\uFFFF]{0,4000}$',\n  CMIString64000: '^[\\\\u0000-\\\\uFFFF]{0,64000}$',\n  CMILang: '^([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?$|^$', // eslint-disable-line\n  CMILangString250: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,250}$)?$', // eslint-disable-line\n  CMILangcr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\}))(.*?)$', // eslint-disable-line\n  CMILangString250cr: '^((\\{lang=([a-zA-Z]{2,3}|i|x)?(\\-[a-zA-Z0-9\\-]{2,8})?\\})?(.{0,250})?)?$', // eslint-disable-line\n  CMILangString4000: '^(\\{lang=([a-zA-Z]{2,3}|i|x)(\\-[a-zA-Z0-9\\-]{2,8})?\\})?((?!\\{.*$).{0,4000}$)?$', // eslint-disable-line\n  CMITime: '^(19[7-9]{1}[0-9]{1}|20[0-2]{1}[0-9]{1}|203[0-8]{1})((-(0[1-9]{1}|1[0-2]{1}))((-(0[1-9]{1}|[1-2]{1}[0-9]{1}|3[0-1]{1}))(T([0-1]{1}[0-9]{1}|2[0-3]{1})((:[0-5]{1}[0-9]{1})((:[0-5]{1}[0-9]{1})((\\\\.[0-9]{1,2})((Z|([+|-]([0-1]{1}[0-9]{1}|2[0-3]{1})))(:[0-5]{1}[0-9]{1})?)?)?)?)?)?)?)?$',\n  CMITimespan: '^P(?:([.,\\\\d]+)Y)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)W)?(?:([.,\\\\d]+)D)?(?:T?(?:([.,\\\\d]+)H)?(?:([.,\\\\d]+)M)?(?:([.,\\\\d]+)S)?)?$',\n  CMIInteger: '^\\\\d+$',\n  CMISInteger: '^-?([0-9]+)$',\n  CMIDecimal: '^-?([0-9]{1,5})(\\\\.[0-9]{1,18})?$',\n  CMIIdentifier: '^\\\\S{1,250}[a-zA-Z0-9]$',\n  CMIShortIdentifier: '^[\\\\w\\.]{1,250}$', // eslint-disable-line\n  CMILongIdentifier: '^(?:(?!urn:)\\\\S{1,4000}|urn:[A-Za-z0-9-]{1,31}:\\\\S{1,4000})$',\n  CMIFeedback: '^.*$', // This must be redefined\n  CMIIndex: '[._](\\\\d+).',\n  CMIIndexStore: '.N(\\\\d+).',\n\n  // Vocabulary Data Type Definition\n  CMICStatus: '^(' + scorm2004_values.validCStatus.join('|') + ')$',\n  CMISStatus: '^(' + scorm2004_values.validSStatus.join('|') + ')$',\n  CMIExit: '^(' + scorm2004_values.validExit.join('|') + ')$',\n  CMIType: '^(' + scorm2004_values.validType.join('|') + ')$',\n  CMIResult: '^(' + scorm2004_values.validResult.join('|') + '|-?([0-9]{1,4})(\\\\.[0-9]{1,18})?)$',\n  NAVEvent: '^(' + scorm2004_values.validNavRequest.join('|') + '|\\{target=\\\\S{0,200}[a-zA-Z0-9]\\}choice|jump)$', // eslint-disable-line\n  NAVBoolean: '^(unknown|true|false$)',\n  NAVTarget: '^(previous|continue|choice.{target=\\\\S{0,200}[a-zA-Z0-9]})$',\n\n  // Data ranges\n  scaled_range: '-1#1',\n  audio_range: '0#*',\n  speed_range: '0#*',\n  text_range: '-1#1',\n  progress_range: '0#1',\n};\n","// @flow\nimport {scorm2004_regex} from './regex';\n\nexport const learner_responses = {\n  'true-false': {\n    format: '^true$|^false$',\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'choice': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n  },\n  'fill-in': {\n    format: scorm2004_regex.CMILangString250,\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'long-fill-in': {\n    format: scorm2004_regex.CMILangString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'matching': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'performance': {\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n  },\n  'sequencing': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n  },\n  'likert': {\n    format: scorm2004_regex.CMIShortIdentifier,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'numeric': {\n    format: scorm2004_regex.CMIDecimal,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n  'other': {\n    format: scorm2004_regex.CMIString4000,\n    max: 1,\n    delimiter: '',\n    unique: false,\n  },\n};\n\nexport const correct_responses = {\n  'true-false': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: '^true$|^false$',\n    limit: 1,\n  },\n  'choice': {\n    max: 36,\n    delimiter: '[,]',\n    unique: true,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'fill-in': {\n    max: 10,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMILangString250cr,\n  },\n  'long-fill-in': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: true,\n    format: scorm2004_regex.CMILangString4000,\n  },\n  'matching': {\n    max: 36,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIShortIdentifier,\n  },\n  'performance': {\n    max: 250,\n    delimiter: '[,]',\n    delimiter2: '[.]',\n    unique: false,\n    duplicate: false,\n    format: '^$|' + scorm2004_regex.CMIShortIdentifier,\n    format2: scorm2004_regex.CMIDecimal + '|^$|' +\n        scorm2004_regex.CMIShortIdentifier,\n  },\n  'sequencing': {\n    max: 36,\n    delimiter: '[,]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n  },\n  'likert': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIShortIdentifier,\n    limit: 1,\n  },\n  'numeric': {\n    max: 2,\n    delimiter: '[:]',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIDecimal,\n    limit: 1,\n  },\n  'other': {\n    max: 1,\n    delimiter: '',\n    unique: false,\n    duplicate: false,\n    format: scorm2004_regex.CMIString4000,\n    limit: 1,\n  },\n};\n","// @flow\n\n/**\n * Data Validation Exception\n */\nexport class ValidationError extends Error {\n  /**\n   * Constructor to take in an error message and code\n   * @param {number} errorCode\n   */\n  constructor(errorCode: number) {\n    super(errorCode);\n    this.#errorCode = errorCode;\n  }\n\n  #errorCode;\n\n  /**\n   * Getter for #errorCode\n   * @return {number}\n   */\n  get errorCode() {\n    return this.#errorCode;\n  }\n\n  /**\n   * Trying to override the default Error message\n   * @return {string}\n   */\n  get message() {\n    return this.#errorCode + '';\n  }\n}\n","// @flow\nexport const SECONDS_PER_SECOND = 1.0;\nexport const SECONDS_PER_MINUTE = 60;\nexport const SECONDS_PER_HOUR = 60 * SECONDS_PER_MINUTE;\nexport const SECONDS_PER_DAY = 24 * SECONDS_PER_HOUR;\n\nconst designations = [\n  ['D', SECONDS_PER_DAY],\n  ['H', SECONDS_PER_HOUR],\n  ['M', SECONDS_PER_MINUTE],\n  ['S', SECONDS_PER_SECOND],\n];\n\n/**\n * Converts a Number to a String of HH:MM:SS\n *\n * @param {Number} totalSeconds\n * @return {string}\n */\nexport function getSecondsAsHHMMSS(totalSeconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!totalSeconds || totalSeconds <= 0) {\n    return '00:00:00';\n  }\n\n  const hours = Math.floor(totalSeconds / SECONDS_PER_HOUR);\n\n  const dateObj = new Date(totalSeconds * 1000);\n  const minutes = dateObj.getUTCMinutes();\n  // make sure we add any possible decimal value\n  const seconds = dateObj.getSeconds() + (totalSeconds % 1.0);\n\n  return hours.toString().padStart(2, '0') + ':' +\n      minutes.toString().padStart(2, '0') + ':' +\n      seconds.toString().padStart(2, '0');\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {Number} seconds\n * @return {String}\n */\nexport function getSecondsAsISODuration(seconds: Number) {\n  // SCORM spec does not deal with negative durations, give zero back\n  if (!seconds || seconds <= 0) {\n    return 'PT0S';\n  }\n\n  let duration = 'P';\n  let remainder = seconds;\n\n  designations.forEach(([sign, current_seconds]) => {\n    let value = Math.floor(remainder / current_seconds);\n\n    remainder = remainder % current_seconds;\n    // If we have anything left in the remainder, and we're currently adding\n    // seconds to the duration, go ahead and add the decimal to the seconds\n    if (sign === 'S' && remainder > 0) {\n      value += remainder;\n    }\n\n    if (value) {\n      if ((duration.indexOf('D') > 0 ||\n          sign === 'H' || sign === 'M' || sign === 'S') &&\n          duration.indexOf('T') === -1) {\n        duration += 'T';\n      }\n      duration += `${value}${sign}`;\n    }\n  });\n\n  return duration;\n}\n\n/**\n * Calculate the number of seconds from HH:MM:SS.DDDDDD\n *\n * @param {string} timeString\n * @param {RegExp} timeRegex\n * @return {number}\n */\nexport function getTimeAsSeconds(timeString: String, timeRegex: RegExp) {\n  if (!timeString || typeof timeString !== 'string' ||\n      !timeString.match(timeRegex)) {\n    return 0;\n  }\n  const parts = timeString.split(':');\n  const hours = Number(parts[0]);\n  const minutes = Number(parts[1]);\n  const seconds = Number(parts[2]);\n  return (hours * 3600) + (minutes * 60) + seconds;\n}\n\n/**\n * Calculate the number of seconds from ISO 8601 Duration\n *\n * @param {string} duration\n * @param {RegExp} durationRegex\n * @return {number}\n */\nexport function getDurationAsSeconds(duration: String, durationRegex: RegExp) {\n  if (!duration || !duration.match(durationRegex)) {\n    return 0;\n  }\n\n  const [, years, months, , days, hours, minutes, seconds] = new RegExp(\n      durationRegex).exec(duration) || [];\n\n  const now = new Date();\n  const anchor = new Date(now);\n  anchor.setFullYear(anchor.getFullYear() + Number(years || 0));\n  anchor.setMonth(anchor.getMonth() + Number(months || 0));\n  anchor.setDate(anchor.getDate() + Number(days || 0));\n  anchor.setHours(anchor.getHours() + Number(hours || 0));\n  anchor.setMinutes(anchor.getMinutes() + Number(minutes || 0));\n  anchor.setSeconds(anchor.getSeconds() + Number(seconds || 0));\n  if (seconds && String(seconds).indexOf('.') > 0) {\n    const milliseconds = Number(Number(seconds) % 1).toFixed(6) * 1000.0;\n    anchor.setMilliseconds(anchor.getMilliseconds() + milliseconds);\n  }\n\n  return ((anchor * 1.0) - now) / 1000.0;\n}\n\n/**\n * Adds together two ISO8601 Duration strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} durationRegex\n * @return {string}\n */\nexport function addTwoDurations(\n    first: String,\n    second: String,\n    durationRegex: RegExp) {\n  const firstSeconds = getDurationAsSeconds(first, durationRegex);\n  const secondSeconds = getDurationAsSeconds(second, durationRegex);\n\n  return getSecondsAsISODuration(firstSeconds + secondSeconds);\n}\n\n/**\n * Add together two HH:MM:SS.DD strings\n *\n * @param {string} first\n * @param {string} second\n * @param {RegExp} timeRegex\n * @return {string}\n */\nexport function addHHMMSSTimeStrings(\n    first: String,\n    second: String,\n    timeRegex: RegExp) {\n  const firstSeconds = getTimeAsSeconds(first, timeRegex);\n  const secondSeconds = getTimeAsSeconds(second, timeRegex);\n  return getSecondsAsHHMMSS(firstSeconds + secondSeconds);\n}\n"]}